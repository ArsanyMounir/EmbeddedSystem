
CAN_CASE_STUDY_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000162c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001738  08001738  00011738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001764  08001764  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001764  08001764  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001764  08001764  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001764  08001764  00011764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001768  08001768  00011768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800176c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  2000000c  08001778  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000054  08001778  00020054  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004bb8  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001001  00000000  00000000  00024bed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000288a  00000000  00000000  00025bee  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000528  00000000  00000000  00028478  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000490  00000000  00000000  000289a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00015e7b  00000000  00000000  00028e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00004900  00000000  00000000  0003ecab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0007e328  00000000  00000000  000435ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000c18d3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001370  00000000  00000000  000c1950  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001720 	.word	0x08001720

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001720 	.word	0x08001720

0800014c <CAN_TX>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

void CAN_TX(uint32_t ID , uint8_t DLC , uint8_t* payload)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08c      	sub	sp, #48	; 0x30
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	460b      	mov	r3, r1
 8000156:	607a      	str	r2, [r7, #4]
 8000158:	72fb      	strb	r3, [r7, #11]

	uint8_t pTxMailbox, numberFree_TxMailBox = 0;
 800015a:	2300      	movs	r3, #0
 800015c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	CAN_TxHeaderTypeDef pHeader ;
	pHeader.DLC = DLC;
 8000160:	7afb      	ldrb	r3, [r7, #11]
 8000162:	627b      	str	r3, [r7, #36]	; 0x24
	pHeader.IDE = CAN_ID_STD;
 8000164:	2300      	movs	r3, #0
 8000166:	61fb      	str	r3, [r7, #28]
	pHeader.RTR = CAN_RTR_DATA;
 8000168:	2300      	movs	r3, #0
 800016a:	623b      	str	r3, [r7, #32]
	pHeader.StdId = ID;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	617b      	str	r3, [r7, #20]


	//Get Number of free Tx Mailboxes
	numberFree_TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 8000170:	4812      	ldr	r0, [pc, #72]	; (80001bc <CAN_TX+0x70>)
 8000172:	f000 fc2a 	bl	80009ca <HAL_CAN_GetTxMailboxesFreeLevel>
 8000176:	4603      	mov	r3, r0
 8000178:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (numberFree_TxMailBox)
 800017c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000180:	2b00      	cmp	r3, #0
 8000182:	d016      	beq.n	80001b2 <CAN_TX+0x66>
	{
		if(HAL_CAN_AddTxMessage(&hcan, &pHeader, payload, &pTxMailbox) != HAL_OK)
 8000184:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000188:	f107 0114 	add.w	r1, r7, #20
 800018c:	687a      	ldr	r2, [r7, #4]
 800018e:	480b      	ldr	r0, [pc, #44]	; (80001bc <CAN_TX+0x70>)
 8000190:	f000 fb41 	bl	8000816 <HAL_CAN_AddTxMessage>
 8000194:	4603      	mov	r3, r0
 8000196:	2b00      	cmp	r3, #0
 8000198:	d001      	beq.n	800019e <CAN_TX+0x52>
		{
			Error_Handler();
 800019a:	f000 f8c1 	bl	8000320 <Error_Handler>
		}


		//wait until Tx Mailbox is transmitted (polling Mechanism)
		while(HAL_CAN_IsTxMessagePending(&hcan, pTxMailbox));
 800019e:	bf00      	nop
 80001a0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80001a4:	4619      	mov	r1, r3
 80001a6:	4805      	ldr	r0, [pc, #20]	; (80001bc <CAN_TX+0x70>)
 80001a8:	f000 fc43 	bl	8000a32 <HAL_CAN_IsTxMessagePending>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d1f6      	bne.n	80001a0 <CAN_TX+0x54>



	}

}
 80001b2:	bf00      	nop
 80001b4:	3730      	adds	r7, #48	; 0x30
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	20000028 	.word	0x20000028

080001c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b084      	sub	sp, #16
 80001c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001c6:	f000 f985 	bl	80004d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ca:	f000 f821 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ce:	f000 f891 	bl	80002f4 <MX_GPIO_Init>
  MX_CAN_Init();
 80001d2:	f000 f859 	bl	8000288 <MX_CAN_Init>

  //Start bxCAN --> Running state
  if(HAL_CAN_Start(&hcan)!= HAL_OK);
 80001d6:	480c      	ldr	r0, [pc, #48]	; (8000208 <main+0x48>)
 80001d8:	f000 fad9 	bl	800078e <HAL_CAN_Start>
  {
	  Error_Handler();
 80001dc:	f000 f8a0 	bl	8000320 <Error_Handler>
  }

  uint8_t Tx_DATA[8] = {'C','A','N',' ','N','O',':',' '};
 80001e0:	4a0a      	ldr	r2, [pc, #40]	; (800020c <main+0x4c>)
 80001e2:	1d3b      	adds	r3, r7, #4
 80001e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001e8:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t FrameNO = 0;
 80001ec:	2300      	movs	r3, #0
 80001ee:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Tx_DATA[7] = FrameNO++;
 80001f0:	7bfb      	ldrb	r3, [r7, #15]
 80001f2:	1c5a      	adds	r2, r3, #1
 80001f4:	73fa      	strb	r2, [r7, #15]
 80001f6:	72fb      	strb	r3, [r7, #11]

	  CAN_TX(0x3FF, 8, Tx_DATA); // wait until Tx is Done
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	461a      	mov	r2, r3
 80001fc:	2108      	movs	r1, #8
 80001fe:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8000202:	f7ff ffa3 	bl	800014c <CAN_TX>
	  Tx_DATA[7] = FrameNO++;
 8000206:	e7f3      	b.n	80001f0 <main+0x30>
 8000208:	20000028 	.word	0x20000028
 800020c:	08001738 	.word	0x08001738

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b090      	sub	sp, #64	; 0x40
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0318 	add.w	r3, r7, #24
 800021a:	2228      	movs	r2, #40	; 0x28
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f001 fa76 	bl	8001710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
 8000230:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000232:	2302      	movs	r3, #2
 8000234:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000236:	2301      	movs	r3, #1
 8000238:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800023a:	2310      	movs	r3, #16
 800023c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800023e:	2300      	movs	r3, #0
 8000240:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000242:	f107 0318 	add.w	r3, r7, #24
 8000246:	4618      	mov	r0, r3
 8000248:	f000 fe54 	bl	8000ef4 <HAL_RCC_OscConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000252:	f000 f865 	bl	8000320 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000256:	230f      	movs	r3, #15
 8000258:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800025a:	2300      	movs	r3, #0
 800025c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f001 f8c0 	bl	80013f4 <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800027a:	f000 f851 	bl	8000320 <Error_Handler>
  }
}
 800027e:	bf00      	nop
 8000280:	3740      	adds	r7, #64	; 0x40
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
	...

08000288 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800028c:	4b17      	ldr	r3, [pc, #92]	; (80002ec <MX_CAN_Init+0x64>)
 800028e:	4a18      	ldr	r2, [pc, #96]	; (80002f0 <MX_CAN_Init+0x68>)
 8000290:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 8000292:	4b16      	ldr	r3, [pc, #88]	; (80002ec <MX_CAN_Init+0x64>)
 8000294:	2201      	movs	r2, #1
 8000296:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8000298:	4b14      	ldr	r3, [pc, #80]	; (80002ec <MX_CAN_Init+0x64>)
 800029a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800029e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002a0:	4b12      	ldr	r3, [pc, #72]	; (80002ec <MX_CAN_Init+0x64>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 80002a6:	4b11      	ldr	r3, [pc, #68]	; (80002ec <MX_CAN_Init+0x64>)
 80002a8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80002ac:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80002ae:	4b0f      	ldr	r3, [pc, #60]	; (80002ec <MX_CAN_Init+0x64>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002b4:	4b0d      	ldr	r3, [pc, #52]	; (80002ec <MX_CAN_Init+0x64>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002ba:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <MX_CAN_Init+0x64>)
 80002bc:	2200      	movs	r2, #0
 80002be:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002c0:	4b0a      	ldr	r3, [pc, #40]	; (80002ec <MX_CAN_Init+0x64>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80002c6:	4b09      	ldr	r3, [pc, #36]	; (80002ec <MX_CAN_Init+0x64>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002cc:	4b07      	ldr	r3, [pc, #28]	; (80002ec <MX_CAN_Init+0x64>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80002d2:	4b06      	ldr	r3, [pc, #24]	; (80002ec <MX_CAN_Init+0x64>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <MX_CAN_Init+0x64>)
 80002da:	f000 f95d 	bl	8000598 <HAL_CAN_Init>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80002e4:	f000 f81c 	bl	8000320 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	20000028 	.word	0x20000028
 80002f0:	40006400 	.word	0x40006400

080002f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fa:	4b08      	ldr	r3, [pc, #32]	; (800031c <MX_GPIO_Init+0x28>)
 80002fc:	699b      	ldr	r3, [r3, #24]
 80002fe:	4a07      	ldr	r2, [pc, #28]	; (800031c <MX_GPIO_Init+0x28>)
 8000300:	f043 0304 	orr.w	r3, r3, #4
 8000304:	6193      	str	r3, [r2, #24]
 8000306:	4b05      	ldr	r3, [pc, #20]	; (800031c <MX_GPIO_Init+0x28>)
 8000308:	699b      	ldr	r3, [r3, #24]
 800030a:	f003 0304 	and.w	r3, r3, #4
 800030e:	607b      	str	r3, [r7, #4]
 8000310:	687b      	ldr	r3, [r7, #4]

}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	40021000 	.word	0x40021000

08000320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr

0800032c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <HAL_MspInit+0x5c>)
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	4a14      	ldr	r2, [pc, #80]	; (8000388 <HAL_MspInit+0x5c>)
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	6193      	str	r3, [r2, #24]
 800033e:	4b12      	ldr	r3, [pc, #72]	; (8000388 <HAL_MspInit+0x5c>)
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	60bb      	str	r3, [r7, #8]
 8000348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800034a:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <HAL_MspInit+0x5c>)
 800034c:	69db      	ldr	r3, [r3, #28]
 800034e:	4a0e      	ldr	r2, [pc, #56]	; (8000388 <HAL_MspInit+0x5c>)
 8000350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000354:	61d3      	str	r3, [r2, #28]
 8000356:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <HAL_MspInit+0x5c>)
 8000358:	69db      	ldr	r3, [r3, #28]
 800035a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000362:	4b0a      	ldr	r3, [pc, #40]	; (800038c <HAL_MspInit+0x60>)
 8000364:	685b      	ldr	r3, [r3, #4]
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800036e:	60fb      	str	r3, [r7, #12]
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000376:	60fb      	str	r3, [r7, #12]
 8000378:	4a04      	ldr	r2, [pc, #16]	; (800038c <HAL_MspInit+0x60>)
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800037e:	bf00      	nop
 8000380:	3714      	adds	r7, #20
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr
 8000388:	40021000 	.word	0x40021000
 800038c:	40010000 	.word	0x40010000

08000390 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000398:	f107 0310 	add.w	r3, r7, #16
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	609a      	str	r2, [r3, #8]
 80003a4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a1c      	ldr	r2, [pc, #112]	; (800041c <HAL_CAN_MspInit+0x8c>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d131      	bne.n	8000414 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80003b0:	4b1b      	ldr	r3, [pc, #108]	; (8000420 <HAL_CAN_MspInit+0x90>)
 80003b2:	69db      	ldr	r3, [r3, #28]
 80003b4:	4a1a      	ldr	r2, [pc, #104]	; (8000420 <HAL_CAN_MspInit+0x90>)
 80003b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003ba:	61d3      	str	r3, [r2, #28]
 80003bc:	4b18      	ldr	r3, [pc, #96]	; (8000420 <HAL_CAN_MspInit+0x90>)
 80003be:	69db      	ldr	r3, [r3, #28]
 80003c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003c4:	60fb      	str	r3, [r7, #12]
 80003c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c8:	4b15      	ldr	r3, [pc, #84]	; (8000420 <HAL_CAN_MspInit+0x90>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a14      	ldr	r2, [pc, #80]	; (8000420 <HAL_CAN_MspInit+0x90>)
 80003ce:	f043 0304 	orr.w	r3, r3, #4
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b12      	ldr	r3, [pc, #72]	; (8000420 <HAL_CAN_MspInit+0x90>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0304 	and.w	r3, r3, #4
 80003dc:	60bb      	str	r3, [r7, #8]
 80003de:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80003e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80003e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003e6:	2300      	movs	r3, #0
 80003e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ea:	2300      	movs	r3, #0
 80003ec:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ee:	f107 0310 	add.w	r3, r7, #16
 80003f2:	4619      	mov	r1, r3
 80003f4:	480b      	ldr	r0, [pc, #44]	; (8000424 <HAL_CAN_MspInit+0x94>)
 80003f6:	f000 fc23 	bl	8000c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80003fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000400:	2302      	movs	r3, #2
 8000402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000404:	2303      	movs	r3, #3
 8000406:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000408:	f107 0310 	add.w	r3, r7, #16
 800040c:	4619      	mov	r1, r3
 800040e:	4805      	ldr	r0, [pc, #20]	; (8000424 <HAL_CAN_MspInit+0x94>)
 8000410:	f000 fc16 	bl	8000c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000414:	bf00      	nop
 8000416:	3720      	adds	r7, #32
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40006400 	.word	0x40006400
 8000420:	40021000 	.word	0x40021000
 8000424:	40010800 	.word	0x40010800

08000428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr

08000434 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000438:	e7fe      	b.n	8000438 <HardFault_Handler+0x4>

0800043a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800043e:	e7fe      	b.n	800043e <MemManage_Handler+0x4>

08000440 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000444:	e7fe      	b.n	8000444 <BusFault_Handler+0x4>

08000446 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800044a:	e7fe      	b.n	800044a <UsageFault_Handler+0x4>

0800044c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr

08000458 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr

08000464 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr

08000470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000474:	f000 f874 	bl	8000560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}

0800047c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000488:	480c      	ldr	r0, [pc, #48]	; (80004bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800048a:	490d      	ldr	r1, [pc, #52]	; (80004c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800048c:	4a0d      	ldr	r2, [pc, #52]	; (80004c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800048e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000490:	e002      	b.n	8000498 <LoopCopyDataInit>

08000492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000496:	3304      	adds	r3, #4

08000498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800049a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800049c:	d3f9      	bcc.n	8000492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800049e:	4a0a      	ldr	r2, [pc, #40]	; (80004c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004a0:	4c0a      	ldr	r4, [pc, #40]	; (80004cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80004a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a4:	e001      	b.n	80004aa <LoopFillZerobss>

080004a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a8:	3204      	adds	r2, #4

080004aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004ac:	d3fb      	bcc.n	80004a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004ae:	f7ff ffe5 	bl	800047c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004b2:	f001 f909 	bl	80016c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004b6:	f7ff fe83 	bl	80001c0 <main>
  bx lr
 80004ba:	4770      	bx	lr
  ldr r0, =_sdata
 80004bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004c4:	0800176c 	.word	0x0800176c
  ldr r2, =_sbss
 80004c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004cc:	20000054 	.word	0x20000054

080004d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004d0:	e7fe      	b.n	80004d0 <ADC1_2_IRQHandler>
	...

080004d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <HAL_Init+0x28>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a07      	ldr	r2, [pc, #28]	; (80004fc <HAL_Init+0x28>)
 80004de:	f043 0310 	orr.w	r3, r3, #16
 80004e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004e4:	2003      	movs	r0, #3
 80004e6:	f000 fb77 	bl	8000bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004ea:	2000      	movs	r0, #0
 80004ec:	f000 f808 	bl	8000500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004f0:	f7ff ff1c 	bl	800032c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004f4:	2300      	movs	r3, #0
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40022000 	.word	0x40022000

08000500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000508:	4b12      	ldr	r3, [pc, #72]	; (8000554 <HAL_InitTick+0x54>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <HAL_InitTick+0x58>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	4619      	mov	r1, r3
 8000512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000516:	fbb3 f3f1 	udiv	r3, r3, r1
 800051a:	fbb2 f3f3 	udiv	r3, r2, r3
 800051e:	4618      	mov	r0, r3
 8000520:	f000 fb81 	bl	8000c26 <HAL_SYSTICK_Config>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800052a:	2301      	movs	r3, #1
 800052c:	e00e      	b.n	800054c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2b0f      	cmp	r3, #15
 8000532:	d80a      	bhi.n	800054a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000534:	2200      	movs	r2, #0
 8000536:	6879      	ldr	r1, [r7, #4]
 8000538:	f04f 30ff 	mov.w	r0, #4294967295
 800053c:	f000 fb57 	bl	8000bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000540:	4a06      	ldr	r2, [pc, #24]	; (800055c <HAL_InitTick+0x5c>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000546:	2300      	movs	r3, #0
 8000548:	e000      	b.n	800054c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800054a:	2301      	movs	r3, #1
}
 800054c:	4618      	mov	r0, r3
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000000 	.word	0x20000000
 8000558:	20000008 	.word	0x20000008
 800055c:	20000004 	.word	0x20000004

08000560 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <HAL_IncTick+0x1c>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	461a      	mov	r2, r3
 800056a:	4b05      	ldr	r3, [pc, #20]	; (8000580 <HAL_IncTick+0x20>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4413      	add	r3, r2
 8000570:	4a03      	ldr	r2, [pc, #12]	; (8000580 <HAL_IncTick+0x20>)
 8000572:	6013      	str	r3, [r2, #0]
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	20000008 	.word	0x20000008
 8000580:	20000050 	.word	0x20000050

08000584 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  return uwTick;
 8000588:	4b02      	ldr	r3, [pc, #8]	; (8000594 <HAL_GetTick+0x10>)
 800058a:	681b      	ldr	r3, [r3, #0]
}
 800058c:	4618      	mov	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	20000050 	.word	0x20000050

08000598 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d101      	bne.n	80005aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80005a6:	2301      	movs	r3, #1
 80005a8:	e0ed      	b.n	8000786 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d102      	bne.n	80005bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f7ff feea 	bl	8000390 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f042 0201 	orr.w	r2, r2, #1
 80005ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80005cc:	f7ff ffda 	bl	8000584 <HAL_GetTick>
 80005d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80005d2:	e012      	b.n	80005fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80005d4:	f7ff ffd6 	bl	8000584 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	2b0a      	cmp	r3, #10
 80005e0:	d90b      	bls.n	80005fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2205      	movs	r2, #5
 80005f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80005f6:	2301      	movs	r3, #1
 80005f8:	e0c5      	b.n	8000786 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	f003 0301 	and.w	r3, r3, #1
 8000604:	2b00      	cmp	r3, #0
 8000606:	d0e5      	beq.n	80005d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f022 0202 	bic.w	r2, r2, #2
 8000616:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000618:	f7ff ffb4 	bl	8000584 <HAL_GetTick>
 800061c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800061e:	e012      	b.n	8000646 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000620:	f7ff ffb0 	bl	8000584 <HAL_GetTick>
 8000624:	4602      	mov	r2, r0
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	2b0a      	cmp	r3, #10
 800062c:	d90b      	bls.n	8000646 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000632:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2205      	movs	r2, #5
 800063e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000642:	2301      	movs	r3, #1
 8000644:	e09f      	b.n	8000786 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	f003 0302 	and.w	r3, r3, #2
 8000650:	2b00      	cmp	r3, #0
 8000652:	d1e5      	bne.n	8000620 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	7e1b      	ldrb	r3, [r3, #24]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d108      	bne.n	800066e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	e007      	b.n	800067e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800067c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	7e5b      	ldrb	r3, [r3, #25]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d108      	bne.n	8000698 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	e007      	b.n	80006a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80006a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	7e9b      	ldrb	r3, [r3, #26]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d108      	bne.n	80006c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f042 0220 	orr.w	r2, r2, #32
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	e007      	b.n	80006d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f022 0220 	bic.w	r2, r2, #32
 80006d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	7edb      	ldrb	r3, [r3, #27]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d108      	bne.n	80006ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f022 0210 	bic.w	r2, r2, #16
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	e007      	b.n	80006fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f042 0210 	orr.w	r2, r2, #16
 80006fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	7f1b      	ldrb	r3, [r3, #28]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d108      	bne.n	8000716 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f042 0208 	orr.w	r2, r2, #8
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	e007      	b.n	8000726 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f022 0208 	bic.w	r2, r2, #8
 8000724:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	7f5b      	ldrb	r3, [r3, #29]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d108      	bne.n	8000740 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f042 0204 	orr.w	r2, r2, #4
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	e007      	b.n	8000750 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f022 0204 	bic.w	r2, r2, #4
 800074e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	689a      	ldr	r2, [r3, #8]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	431a      	orrs	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	691b      	ldr	r3, [r3, #16]
 800075e:	431a      	orrs	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	695b      	ldr	r3, [r3, #20]
 8000764:	ea42 0103 	orr.w	r1, r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	1e5a      	subs	r2, r3, #1
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	430a      	orrs	r2, r1
 8000774:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2200      	movs	r2, #0
 800077a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b084      	sub	sp, #16
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	f893 3020 	ldrb.w	r3, [r3, #32]
 800079c:	b2db      	uxtb	r3, r3
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d12e      	bne.n	8000800 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2202      	movs	r2, #2
 80007a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f022 0201 	bic.w	r2, r2, #1
 80007b8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80007ba:	f7ff fee3 	bl	8000584 <HAL_GetTick>
 80007be:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80007c0:	e012      	b.n	80007e8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007c2:	f7ff fedf 	bl	8000584 <HAL_GetTick>
 80007c6:	4602      	mov	r2, r0
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	1ad3      	subs	r3, r2, r3
 80007cc:	2b0a      	cmp	r3, #10
 80007ce:	d90b      	bls.n	80007e8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007d4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2205      	movs	r2, #5
 80007e0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80007e4:	2301      	movs	r3, #1
 80007e6:	e012      	b.n	800080e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d1e5      	bne.n	80007c2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2200      	movs	r2, #0
 80007fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80007fc:	2300      	movs	r3, #0
 80007fe:	e006      	b.n	800080e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000804:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800080c:	2301      	movs	r3, #1
  }
}
 800080e:	4618      	mov	r0, r3
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000816:	b480      	push	{r7}
 8000818:	b089      	sub	sp, #36	; 0x24
 800081a:	af00      	add	r7, sp, #0
 800081c:	60f8      	str	r0, [r7, #12]
 800081e:	60b9      	str	r1, [r7, #8]
 8000820:	607a      	str	r2, [r7, #4]
 8000822:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f893 3020 	ldrb.w	r3, [r3, #32]
 800082a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000834:	7ffb      	ldrb	r3, [r7, #31]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d003      	beq.n	8000842 <HAL_CAN_AddTxMessage+0x2c>
 800083a:	7ffb      	ldrb	r3, [r7, #31]
 800083c:	2b02      	cmp	r3, #2
 800083e:	f040 80b8 	bne.w	80009b2 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000842:	69bb      	ldr	r3, [r7, #24]
 8000844:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000848:	2b00      	cmp	r3, #0
 800084a:	d10a      	bne.n	8000862 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000852:	2b00      	cmp	r3, #0
 8000854:	d105      	bne.n	8000862 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000856:	69bb      	ldr	r3, [r7, #24]
 8000858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800085c:	2b00      	cmp	r3, #0
 800085e:	f000 80a0 	beq.w	80009a2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000862:	69bb      	ldr	r3, [r7, #24]
 8000864:	0e1b      	lsrs	r3, r3, #24
 8000866:	f003 0303 	and.w	r3, r3, #3
 800086a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	2b02      	cmp	r3, #2
 8000870:	d907      	bls.n	8000882 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000876:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800087e:	2301      	movs	r3, #1
 8000880:	e09e      	b.n	80009c0 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000882:	2201      	movs	r2, #1
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	409a      	lsls	r2, r3
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d10d      	bne.n	80008b0 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800089e:	68f9      	ldr	r1, [r7, #12]
 80008a0:	6809      	ldr	r1, [r1, #0]
 80008a2:	431a      	orrs	r2, r3
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	3318      	adds	r3, #24
 80008a8:	011b      	lsls	r3, r3, #4
 80008aa:	440b      	add	r3, r1
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	e00f      	b.n	80008d0 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80008ba:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80008c0:	68f9      	ldr	r1, [r7, #12]
 80008c2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80008c4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	3318      	adds	r3, #24
 80008ca:	011b      	lsls	r3, r3, #4
 80008cc:	440b      	add	r3, r1
 80008ce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	6819      	ldr	r1, [r3, #0]
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	691a      	ldr	r2, [r3, #16]
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	3318      	adds	r3, #24
 80008dc:	011b      	lsls	r3, r3, #4
 80008de:	440b      	add	r3, r1
 80008e0:	3304      	adds	r3, #4
 80008e2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	7d1b      	ldrb	r3, [r3, #20]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d111      	bne.n	8000910 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	3318      	adds	r3, #24
 80008f4:	011b      	lsls	r3, r3, #4
 80008f6:	4413      	add	r3, r2
 80008f8:	3304      	adds	r3, #4
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	68fa      	ldr	r2, [r7, #12]
 80008fe:	6811      	ldr	r1, [r2, #0]
 8000900:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	3318      	adds	r3, #24
 8000908:	011b      	lsls	r3, r3, #4
 800090a:	440b      	add	r3, r1
 800090c:	3304      	adds	r3, #4
 800090e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3307      	adds	r3, #7
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	061a      	lsls	r2, r3, #24
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3306      	adds	r3, #6
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	041b      	lsls	r3, r3, #16
 8000920:	431a      	orrs	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	3305      	adds	r3, #5
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	021b      	lsls	r3, r3, #8
 800092a:	4313      	orrs	r3, r2
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	3204      	adds	r2, #4
 8000930:	7812      	ldrb	r2, [r2, #0]
 8000932:	4610      	mov	r0, r2
 8000934:	68fa      	ldr	r2, [r7, #12]
 8000936:	6811      	ldr	r1, [r2, #0]
 8000938:	ea43 0200 	orr.w	r2, r3, r0
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	011b      	lsls	r3, r3, #4
 8000940:	440b      	add	r3, r1
 8000942:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000946:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3303      	adds	r3, #3
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	061a      	lsls	r2, r3, #24
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3302      	adds	r3, #2
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	041b      	lsls	r3, r3, #16
 8000958:	431a      	orrs	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	3301      	adds	r3, #1
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	021b      	lsls	r3, r3, #8
 8000962:	4313      	orrs	r3, r2
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	7812      	ldrb	r2, [r2, #0]
 8000968:	4610      	mov	r0, r2
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	6811      	ldr	r1, [r2, #0]
 800096e:	ea43 0200 	orr.w	r2, r3, r0
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	011b      	lsls	r3, r3, #4
 8000976:	440b      	add	r3, r1
 8000978:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800097c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	3318      	adds	r3, #24
 8000986:	011b      	lsls	r3, r3, #4
 8000988:	4413      	add	r3, r2
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	68fa      	ldr	r2, [r7, #12]
 800098e:	6811      	ldr	r1, [r2, #0]
 8000990:	f043 0201 	orr.w	r2, r3, #1
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	3318      	adds	r3, #24
 8000998:	011b      	lsls	r3, r3, #4
 800099a:	440b      	add	r3, r1
 800099c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800099e:	2300      	movs	r3, #0
 80009a0:	e00e      	b.n	80009c0 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
 80009b0:	e006      	b.n	80009c0 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
  }
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3724      	adds	r7, #36	; 0x24
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr

080009ca <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80009ca:	b480      	push	{r7}
 80009cc:	b085      	sub	sp, #20
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009dc:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80009de:	7afb      	ldrb	r3, [r7, #11]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d002      	beq.n	80009ea <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80009e4:	7afb      	ldrb	r3, [r7, #11]
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	d11d      	bne.n	8000a26 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d002      	beq.n	80009fe <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	3301      	adds	r3, #1
 80009fc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d002      	beq.n	8000a12 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d002      	beq.n	8000a26 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	3301      	adds	r3, #1
 8000a24:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8000a26:	68fb      	ldr	r3, [r7, #12]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr

08000a32 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b085      	sub	sp, #20
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
 8000a3a:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a46:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8000a48:	7afb      	ldrb	r3, [r7, #11]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d002      	beq.n	8000a54 <HAL_CAN_IsTxMessagePending+0x22>
 8000a4e:	7afb      	ldrb	r3, [r7, #11]
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d10b      	bne.n	8000a6c <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	689a      	ldr	r2, [r3, #8]
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	069b      	lsls	r3, r3, #26
 8000a5e:	401a      	ands	r2, r3
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	069b      	lsls	r3, r3, #26
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d001      	beq.n	8000a6c <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3714      	adds	r7, #20
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr

08000a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a94:	4013      	ands	r3, r2
 8000a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aaa:	4a04      	ldr	r2, [pc, #16]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	60d3      	str	r3, [r2, #12]
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	0a1b      	lsrs	r3, r3, #8
 8000aca:	f003 0307 	and.w	r3, r3, #7
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	db0a      	blt.n	8000b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	490c      	ldr	r1, [pc, #48]	; (8000b28 <__NVIC_SetPriority+0x4c>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	0112      	lsls	r2, r2, #4
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	440b      	add	r3, r1
 8000b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b04:	e00a      	b.n	8000b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4908      	ldr	r1, [pc, #32]	; (8000b2c <__NVIC_SetPriority+0x50>)
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	3b04      	subs	r3, #4
 8000b14:	0112      	lsls	r2, r2, #4
 8000b16:	b2d2      	uxtb	r2, r2
 8000b18:	440b      	add	r3, r1
 8000b1a:	761a      	strb	r2, [r3, #24]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000e100 	.word	0xe000e100
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b089      	sub	sp, #36	; 0x24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	f1c3 0307 	rsb	r3, r3, #7
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	bf28      	it	cs
 8000b4e:	2304      	movcs	r3, #4
 8000b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3304      	adds	r3, #4
 8000b56:	2b06      	cmp	r3, #6
 8000b58:	d902      	bls.n	8000b60 <NVIC_EncodePriority+0x30>
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3b03      	subs	r3, #3
 8000b5e:	e000      	b.n	8000b62 <NVIC_EncodePriority+0x32>
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	f04f 32ff 	mov.w	r2, #4294967295
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43da      	mvns	r2, r3
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	401a      	ands	r2, r3
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b78:	f04f 31ff 	mov.w	r1, #4294967295
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b82:	43d9      	mvns	r1, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	4313      	orrs	r3, r2
         );
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3724      	adds	r7, #36	; 0x24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ba4:	d301      	bcc.n	8000baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00f      	b.n	8000bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <SysTick_Config+0x40>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bb2:	210f      	movs	r1, #15
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f7ff ff90 	bl	8000adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <SysTick_Config+0x40>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bc2:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <SysTick_Config+0x40>)
 8000bc4:	2207      	movs	r2, #7
 8000bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	e000e010 	.word	0xe000e010

08000bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ff49 	bl	8000a78 <__NVIC_SetPriorityGrouping>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b086      	sub	sp, #24
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
 8000bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c00:	f7ff ff5e 	bl	8000ac0 <__NVIC_GetPriorityGrouping>
 8000c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	68b9      	ldr	r1, [r7, #8]
 8000c0a:	6978      	ldr	r0, [r7, #20]
 8000c0c:	f7ff ff90 	bl	8000b30 <NVIC_EncodePriority>
 8000c10:	4602      	mov	r2, r0
 8000c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff5f 	bl	8000adc <__NVIC_SetPriority>
}
 8000c1e:	bf00      	nop
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff ffb0 	bl	8000b94 <SysTick_Config>
 8000c34:	4603      	mov	r3, r0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b08b      	sub	sp, #44	; 0x2c
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c52:	e127      	b.n	8000ea4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c54:	2201      	movs	r2, #1
 8000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	69fa      	ldr	r2, [r7, #28]
 8000c64:	4013      	ands	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	f040 8116 	bne.w	8000e9e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	2b12      	cmp	r3, #18
 8000c78:	d034      	beq.n	8000ce4 <HAL_GPIO_Init+0xa4>
 8000c7a:	2b12      	cmp	r3, #18
 8000c7c:	d80d      	bhi.n	8000c9a <HAL_GPIO_Init+0x5a>
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d02b      	beq.n	8000cda <HAL_GPIO_Init+0x9a>
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d804      	bhi.n	8000c90 <HAL_GPIO_Init+0x50>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d031      	beq.n	8000cee <HAL_GPIO_Init+0xae>
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d01c      	beq.n	8000cc8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c8e:	e048      	b.n	8000d22 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c90:	2b03      	cmp	r3, #3
 8000c92:	d043      	beq.n	8000d1c <HAL_GPIO_Init+0xdc>
 8000c94:	2b11      	cmp	r3, #17
 8000c96:	d01b      	beq.n	8000cd0 <HAL_GPIO_Init+0x90>
          break;
 8000c98:	e043      	b.n	8000d22 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c9a:	4a89      	ldr	r2, [pc, #548]	; (8000ec0 <HAL_GPIO_Init+0x280>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d026      	beq.n	8000cee <HAL_GPIO_Init+0xae>
 8000ca0:	4a87      	ldr	r2, [pc, #540]	; (8000ec0 <HAL_GPIO_Init+0x280>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d806      	bhi.n	8000cb4 <HAL_GPIO_Init+0x74>
 8000ca6:	4a87      	ldr	r2, [pc, #540]	; (8000ec4 <HAL_GPIO_Init+0x284>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d020      	beq.n	8000cee <HAL_GPIO_Init+0xae>
 8000cac:	4a86      	ldr	r2, [pc, #536]	; (8000ec8 <HAL_GPIO_Init+0x288>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d01d      	beq.n	8000cee <HAL_GPIO_Init+0xae>
          break;
 8000cb2:	e036      	b.n	8000d22 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000cb4:	4a85      	ldr	r2, [pc, #532]	; (8000ecc <HAL_GPIO_Init+0x28c>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d019      	beq.n	8000cee <HAL_GPIO_Init+0xae>
 8000cba:	4a85      	ldr	r2, [pc, #532]	; (8000ed0 <HAL_GPIO_Init+0x290>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d016      	beq.n	8000cee <HAL_GPIO_Init+0xae>
 8000cc0:	4a84      	ldr	r2, [pc, #528]	; (8000ed4 <HAL_GPIO_Init+0x294>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d013      	beq.n	8000cee <HAL_GPIO_Init+0xae>
          break;
 8000cc6:	e02c      	b.n	8000d22 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	623b      	str	r3, [r7, #32]
          break;
 8000cce:	e028      	b.n	8000d22 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	623b      	str	r3, [r7, #32]
          break;
 8000cd8:	e023      	b.n	8000d22 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	3308      	adds	r3, #8
 8000ce0:	623b      	str	r3, [r7, #32]
          break;
 8000ce2:	e01e      	b.n	8000d22 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	330c      	adds	r3, #12
 8000cea:	623b      	str	r3, [r7, #32]
          break;
 8000cec:	e019      	b.n	8000d22 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d102      	bne.n	8000cfc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	623b      	str	r3, [r7, #32]
          break;
 8000cfa:	e012      	b.n	8000d22 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d105      	bne.n	8000d10 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d04:	2308      	movs	r3, #8
 8000d06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	69fa      	ldr	r2, [r7, #28]
 8000d0c:	611a      	str	r2, [r3, #16]
          break;
 8000d0e:	e008      	b.n	8000d22 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d10:	2308      	movs	r3, #8
 8000d12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	69fa      	ldr	r2, [r7, #28]
 8000d18:	615a      	str	r2, [r3, #20]
          break;
 8000d1a:	e002      	b.n	8000d22 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
          break;
 8000d20:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	2bff      	cmp	r3, #255	; 0xff
 8000d26:	d801      	bhi.n	8000d2c <HAL_GPIO_Init+0xec>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	e001      	b.n	8000d30 <HAL_GPIO_Init+0xf0>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3304      	adds	r3, #4
 8000d30:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	2bff      	cmp	r3, #255	; 0xff
 8000d36:	d802      	bhi.n	8000d3e <HAL_GPIO_Init+0xfe>
 8000d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	e002      	b.n	8000d44 <HAL_GPIO_Init+0x104>
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	3b08      	subs	r3, #8
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	210f      	movs	r1, #15
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	401a      	ands	r2, r3
 8000d56:	6a39      	ldr	r1, [r7, #32]
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	431a      	orrs	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	f000 8096 	beq.w	8000e9e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d72:	4b59      	ldr	r3, [pc, #356]	; (8000ed8 <HAL_GPIO_Init+0x298>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	4a58      	ldr	r2, [pc, #352]	; (8000ed8 <HAL_GPIO_Init+0x298>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6193      	str	r3, [r2, #24]
 8000d7e:	4b56      	ldr	r3, [pc, #344]	; (8000ed8 <HAL_GPIO_Init+0x298>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d8a:	4a54      	ldr	r2, [pc, #336]	; (8000edc <HAL_GPIO_Init+0x29c>)
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	089b      	lsrs	r3, r3, #2
 8000d90:	3302      	adds	r3, #2
 8000d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d96:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9a:	f003 0303 	and.w	r3, r3, #3
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	220f      	movs	r2, #15
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	68fa      	ldr	r2, [r7, #12]
 8000daa:	4013      	ands	r3, r2
 8000dac:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a4b      	ldr	r2, [pc, #300]	; (8000ee0 <HAL_GPIO_Init+0x2a0>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d013      	beq.n	8000dde <HAL_GPIO_Init+0x19e>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a4a      	ldr	r2, [pc, #296]	; (8000ee4 <HAL_GPIO_Init+0x2a4>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d00d      	beq.n	8000dda <HAL_GPIO_Init+0x19a>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a49      	ldr	r2, [pc, #292]	; (8000ee8 <HAL_GPIO_Init+0x2a8>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d007      	beq.n	8000dd6 <HAL_GPIO_Init+0x196>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a48      	ldr	r2, [pc, #288]	; (8000eec <HAL_GPIO_Init+0x2ac>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d101      	bne.n	8000dd2 <HAL_GPIO_Init+0x192>
 8000dce:	2303      	movs	r3, #3
 8000dd0:	e006      	b.n	8000de0 <HAL_GPIO_Init+0x1a0>
 8000dd2:	2304      	movs	r3, #4
 8000dd4:	e004      	b.n	8000de0 <HAL_GPIO_Init+0x1a0>
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	e002      	b.n	8000de0 <HAL_GPIO_Init+0x1a0>
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e000      	b.n	8000de0 <HAL_GPIO_Init+0x1a0>
 8000dde:	2300      	movs	r3, #0
 8000de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000de2:	f002 0203 	and.w	r2, r2, #3
 8000de6:	0092      	lsls	r2, r2, #2
 8000de8:	4093      	lsls	r3, r2
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000df0:	493a      	ldr	r1, [pc, #232]	; (8000edc <HAL_GPIO_Init+0x29c>)
 8000df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df4:	089b      	lsrs	r3, r3, #2
 8000df6:	3302      	adds	r3, #2
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d006      	beq.n	8000e18 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e0a:	4b39      	ldr	r3, [pc, #228]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	4938      	ldr	r1, [pc, #224]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	600b      	str	r3, [r1, #0]
 8000e16:	e006      	b.n	8000e26 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e18:	4b35      	ldr	r3, [pc, #212]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	4933      	ldr	r1, [pc, #204]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e22:	4013      	ands	r3, r2
 8000e24:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d006      	beq.n	8000e40 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e32:	4b2f      	ldr	r3, [pc, #188]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	492e      	ldr	r1, [pc, #184]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	604b      	str	r3, [r1, #4]
 8000e3e:	e006      	b.n	8000e4e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e40:	4b2b      	ldr	r3, [pc, #172]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	43db      	mvns	r3, r3
 8000e48:	4929      	ldr	r1, [pc, #164]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d006      	beq.n	8000e68 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e5a:	4b25      	ldr	r3, [pc, #148]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e5c:	689a      	ldr	r2, [r3, #8]
 8000e5e:	4924      	ldr	r1, [pc, #144]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	608b      	str	r3, [r1, #8]
 8000e66:	e006      	b.n	8000e76 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e68:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e6a:	689a      	ldr	r2, [r3, #8]
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	491f      	ldr	r1, [pc, #124]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e72:	4013      	ands	r3, r2
 8000e74:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d006      	beq.n	8000e90 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e82:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e84:	68da      	ldr	r2, [r3, #12]
 8000e86:	491a      	ldr	r1, [pc, #104]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	60cb      	str	r3, [r1, #12]
 8000e8e:	e006      	b.n	8000e9e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e90:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e92:	68da      	ldr	r2, [r3, #12]
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	43db      	mvns	r3, r3
 8000e98:	4915      	ldr	r1, [pc, #84]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f47f aed0 	bne.w	8000c54 <HAL_GPIO_Init+0x14>
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	372c      	adds	r7, #44	; 0x2c
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	10210000 	.word	0x10210000
 8000ec4:	10110000 	.word	0x10110000
 8000ec8:	10120000 	.word	0x10120000
 8000ecc:	10310000 	.word	0x10310000
 8000ed0:	10320000 	.word	0x10320000
 8000ed4:	10220000 	.word	0x10220000
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40010000 	.word	0x40010000
 8000ee0:	40010800 	.word	0x40010800
 8000ee4:	40010c00 	.word	0x40010c00
 8000ee8:	40011000 	.word	0x40011000
 8000eec:	40011400 	.word	0x40011400
 8000ef0:	40010400 	.word	0x40010400

08000ef4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e26c      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f000 8087 	beq.w	8001022 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f14:	4b92      	ldr	r3, [pc, #584]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 030c 	and.w	r3, r3, #12
 8000f1c:	2b04      	cmp	r3, #4
 8000f1e:	d00c      	beq.n	8000f3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f20:	4b8f      	ldr	r3, [pc, #572]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 030c 	and.w	r3, r3, #12
 8000f28:	2b08      	cmp	r3, #8
 8000f2a:	d112      	bne.n	8000f52 <HAL_RCC_OscConfig+0x5e>
 8000f2c:	4b8c      	ldr	r3, [pc, #560]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f38:	d10b      	bne.n	8000f52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3a:	4b89      	ldr	r3, [pc, #548]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d06c      	beq.n	8001020 <HAL_RCC_OscConfig+0x12c>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d168      	bne.n	8001020 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e246      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f5a:	d106      	bne.n	8000f6a <HAL_RCC_OscConfig+0x76>
 8000f5c:	4b80      	ldr	r3, [pc, #512]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a7f      	ldr	r2, [pc, #508]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	e02e      	b.n	8000fc8 <HAL_RCC_OscConfig+0xd4>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10c      	bne.n	8000f8c <HAL_RCC_OscConfig+0x98>
 8000f72:	4b7b      	ldr	r3, [pc, #492]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a7a      	ldr	r2, [pc, #488]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	4b78      	ldr	r3, [pc, #480]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a77      	ldr	r2, [pc, #476]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	e01d      	b.n	8000fc8 <HAL_RCC_OscConfig+0xd4>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f94:	d10c      	bne.n	8000fb0 <HAL_RCC_OscConfig+0xbc>
 8000f96:	4b72      	ldr	r3, [pc, #456]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a71      	ldr	r2, [pc, #452]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	4b6f      	ldr	r3, [pc, #444]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a6e      	ldr	r2, [pc, #440]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	e00b      	b.n	8000fc8 <HAL_RCC_OscConfig+0xd4>
 8000fb0:	4b6b      	ldr	r3, [pc, #428]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a6a      	ldr	r2, [pc, #424]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	4b68      	ldr	r3, [pc, #416]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a67      	ldr	r2, [pc, #412]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d013      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fad8 	bl	8000584 <HAL_GetTick>
 8000fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd6:	e008      	b.n	8000fea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fd8:	f7ff fad4 	bl	8000584 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b64      	cmp	r3, #100	; 0x64
 8000fe4:	d901      	bls.n	8000fea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e1fa      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fea:	4b5d      	ldr	r3, [pc, #372]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d0f0      	beq.n	8000fd8 <HAL_RCC_OscConfig+0xe4>
 8000ff6:	e014      	b.n	8001022 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff8:	f7ff fac4 	bl	8000584 <HAL_GetTick>
 8000ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001000:	f7ff fac0 	bl	8000584 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b64      	cmp	r3, #100	; 0x64
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e1e6      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001012:	4b53      	ldr	r3, [pc, #332]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1f0      	bne.n	8001000 <HAL_RCC_OscConfig+0x10c>
 800101e:	e000      	b.n	8001022 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d063      	beq.n	80010f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800102e:	4b4c      	ldr	r3, [pc, #304]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 030c 	and.w	r3, r3, #12
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00b      	beq.n	8001052 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800103a:	4b49      	ldr	r3, [pc, #292]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f003 030c 	and.w	r3, r3, #12
 8001042:	2b08      	cmp	r3, #8
 8001044:	d11c      	bne.n	8001080 <HAL_RCC_OscConfig+0x18c>
 8001046:	4b46      	ldr	r3, [pc, #280]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d116      	bne.n	8001080 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001052:	4b43      	ldr	r3, [pc, #268]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d005      	beq.n	800106a <HAL_RCC_OscConfig+0x176>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	691b      	ldr	r3, [r3, #16]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d001      	beq.n	800106a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e1ba      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106a:	4b3d      	ldr	r3, [pc, #244]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	4939      	ldr	r1, [pc, #228]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 800107a:	4313      	orrs	r3, r2
 800107c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800107e:	e03a      	b.n	80010f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d020      	beq.n	80010ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001088:	4b36      	ldr	r3, [pc, #216]	; (8001164 <HAL_RCC_OscConfig+0x270>)
 800108a:	2201      	movs	r2, #1
 800108c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108e:	f7ff fa79 	bl	8000584 <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001094:	e008      	b.n	80010a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001096:	f7ff fa75 	bl	8000584 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e19b      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a8:	4b2d      	ldr	r3, [pc, #180]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f0      	beq.n	8001096 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b4:	4b2a      	ldr	r3, [pc, #168]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	4927      	ldr	r1, [pc, #156]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	4313      	orrs	r3, r2
 80010c6:	600b      	str	r3, [r1, #0]
 80010c8:	e015      	b.n	80010f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ca:	4b26      	ldr	r3, [pc, #152]	; (8001164 <HAL_RCC_OscConfig+0x270>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fa58 	bl	8000584 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010d8:	f7ff fa54 	bl	8000584 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e17a      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f0      	bne.n	80010d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d03a      	beq.n	8001178 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d019      	beq.n	800113e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <HAL_RCC_OscConfig+0x274>)
 800110c:	2201      	movs	r2, #1
 800110e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001110:	f7ff fa38 	bl	8000584 <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001118:	f7ff fa34 	bl	8000584 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e15a      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 800112c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d0f0      	beq.n	8001118 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001136:	2001      	movs	r0, #1
 8001138:	f000 faa8 	bl	800168c <RCC_Delay>
 800113c:	e01c      	b.n	8001178 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_RCC_OscConfig+0x274>)
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001144:	f7ff fa1e 	bl	8000584 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800114a:	e00f      	b.n	800116c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800114c:	f7ff fa1a 	bl	8000584 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d908      	bls.n	800116c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e140      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
 800115e:	bf00      	nop
 8001160:	40021000 	.word	0x40021000
 8001164:	42420000 	.word	0x42420000
 8001168:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800116c:	4b9e      	ldr	r3, [pc, #632]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 800116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1e9      	bne.n	800114c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 80a6 	beq.w	80012d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800118a:	4b97      	ldr	r3, [pc, #604]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d10d      	bne.n	80011b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	4b94      	ldr	r3, [pc, #592]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	4a93      	ldr	r2, [pc, #588]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 800119c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a0:	61d3      	str	r3, [r2, #28]
 80011a2:	4b91      	ldr	r3, [pc, #580]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011ae:	2301      	movs	r3, #1
 80011b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b2:	4b8e      	ldr	r3, [pc, #568]	; (80013ec <HAL_RCC_OscConfig+0x4f8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d118      	bne.n	80011f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011be:	4b8b      	ldr	r3, [pc, #556]	; (80013ec <HAL_RCC_OscConfig+0x4f8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a8a      	ldr	r2, [pc, #552]	; (80013ec <HAL_RCC_OscConfig+0x4f8>)
 80011c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ca:	f7ff f9db 	bl	8000584 <HAL_GetTick>
 80011ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011d2:	f7ff f9d7 	bl	8000584 <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b64      	cmp	r3, #100	; 0x64
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e0fd      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e4:	4b81      	ldr	r3, [pc, #516]	; (80013ec <HAL_RCC_OscConfig+0x4f8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f0      	beq.n	80011d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d106      	bne.n	8001206 <HAL_RCC_OscConfig+0x312>
 80011f8:	4b7b      	ldr	r3, [pc, #492]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	4a7a      	ldr	r2, [pc, #488]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6213      	str	r3, [r2, #32]
 8001204:	e02d      	b.n	8001262 <HAL_RCC_OscConfig+0x36e>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10c      	bne.n	8001228 <HAL_RCC_OscConfig+0x334>
 800120e:	4b76      	ldr	r3, [pc, #472]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 8001210:	6a1b      	ldr	r3, [r3, #32]
 8001212:	4a75      	ldr	r2, [pc, #468]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 8001214:	f023 0301 	bic.w	r3, r3, #1
 8001218:	6213      	str	r3, [r2, #32]
 800121a:	4b73      	ldr	r3, [pc, #460]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 800121c:	6a1b      	ldr	r3, [r3, #32]
 800121e:	4a72      	ldr	r2, [pc, #456]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 8001220:	f023 0304 	bic.w	r3, r3, #4
 8001224:	6213      	str	r3, [r2, #32]
 8001226:	e01c      	b.n	8001262 <HAL_RCC_OscConfig+0x36e>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	2b05      	cmp	r3, #5
 800122e:	d10c      	bne.n	800124a <HAL_RCC_OscConfig+0x356>
 8001230:	4b6d      	ldr	r3, [pc, #436]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	4a6c      	ldr	r2, [pc, #432]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 8001236:	f043 0304 	orr.w	r3, r3, #4
 800123a:	6213      	str	r3, [r2, #32]
 800123c:	4b6a      	ldr	r3, [pc, #424]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	4a69      	ldr	r2, [pc, #420]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	6213      	str	r3, [r2, #32]
 8001248:	e00b      	b.n	8001262 <HAL_RCC_OscConfig+0x36e>
 800124a:	4b67      	ldr	r3, [pc, #412]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 800124c:	6a1b      	ldr	r3, [r3, #32]
 800124e:	4a66      	ldr	r2, [pc, #408]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 8001250:	f023 0301 	bic.w	r3, r3, #1
 8001254:	6213      	str	r3, [r2, #32]
 8001256:	4b64      	ldr	r3, [pc, #400]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	4a63      	ldr	r2, [pc, #396]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 800125c:	f023 0304 	bic.w	r3, r3, #4
 8001260:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d015      	beq.n	8001296 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126a:	f7ff f98b 	bl	8000584 <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001270:	e00a      	b.n	8001288 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001272:	f7ff f987 	bl	8000584 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001280:	4293      	cmp	r3, r2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e0ab      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001288:	4b57      	ldr	r3, [pc, #348]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0ee      	beq.n	8001272 <HAL_RCC_OscConfig+0x37e>
 8001294:	e014      	b.n	80012c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001296:	f7ff f975 	bl	8000584 <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800129c:	e00a      	b.n	80012b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800129e:	f7ff f971 	bl	8000584 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e095      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b4:	4b4c      	ldr	r3, [pc, #304]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1ee      	bne.n	800129e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012c0:	7dfb      	ldrb	r3, [r7, #23]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d105      	bne.n	80012d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012c6:	4b48      	ldr	r3, [pc, #288]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	4a47      	ldr	r2, [pc, #284]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 80012cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 8081 	beq.w	80013de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012dc:	4b42      	ldr	r3, [pc, #264]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 030c 	and.w	r3, r3, #12
 80012e4:	2b08      	cmp	r3, #8
 80012e6:	d061      	beq.n	80013ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69db      	ldr	r3, [r3, #28]
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d146      	bne.n	800137e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f0:	4b3f      	ldr	r3, [pc, #252]	; (80013f0 <HAL_RCC_OscConfig+0x4fc>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f6:	f7ff f945 	bl	8000584 <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012fe:	f7ff f941 	bl	8000584 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e067      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001310:	4b35      	ldr	r3, [pc, #212]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1f0      	bne.n	80012fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001324:	d108      	bne.n	8001338 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001326:	4b30      	ldr	r3, [pc, #192]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	492d      	ldr	r1, [pc, #180]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001338:	4b2b      	ldr	r3, [pc, #172]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a19      	ldr	r1, [r3, #32]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001348:	430b      	orrs	r3, r1
 800134a:	4927      	ldr	r1, [pc, #156]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 800134c:	4313      	orrs	r3, r2
 800134e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001350:	4b27      	ldr	r3, [pc, #156]	; (80013f0 <HAL_RCC_OscConfig+0x4fc>)
 8001352:	2201      	movs	r2, #1
 8001354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001356:	f7ff f915 	bl	8000584 <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800135e:	f7ff f911 	bl	8000584 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e037      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001370:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f0      	beq.n	800135e <HAL_RCC_OscConfig+0x46a>
 800137c:	e02f      	b.n	80013de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <HAL_RCC_OscConfig+0x4fc>)
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff f8fe 	bl	8000584 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800138c:	f7ff f8fa 	bl	8000584 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e020      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0x498>
 80013aa:	e018      	b.n	80013de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69db      	ldr	r3, [r3, #28]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d101      	bne.n	80013b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e013      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d106      	bne.n	80013da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d001      	beq.n	80013de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e000      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40007000 	.word	0x40007000
 80013f0:	42420060 	.word	0x42420060

080013f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e0d0      	b.n	80015aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001408:	4b6a      	ldr	r3, [pc, #424]	; (80015b4 <HAL_RCC_ClockConfig+0x1c0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0307 	and.w	r3, r3, #7
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	429a      	cmp	r2, r3
 8001414:	d910      	bls.n	8001438 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001416:	4b67      	ldr	r3, [pc, #412]	; (80015b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f023 0207 	bic.w	r2, r3, #7
 800141e:	4965      	ldr	r1, [pc, #404]	; (80015b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	4313      	orrs	r3, r2
 8001424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001426:	4b63      	ldr	r3, [pc, #396]	; (80015b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	429a      	cmp	r2, r3
 8001432:	d001      	beq.n	8001438 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e0b8      	b.n	80015aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d020      	beq.n	8001486 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001450:	4b59      	ldr	r3, [pc, #356]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	4a58      	ldr	r2, [pc, #352]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001456:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800145a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001468:	4b53      	ldr	r3, [pc, #332]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	4a52      	ldr	r2, [pc, #328]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 800146e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001472:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001474:	4b50      	ldr	r3, [pc, #320]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	494d      	ldr	r1, [pc, #308]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001482:	4313      	orrs	r3, r2
 8001484:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b00      	cmp	r3, #0
 8001490:	d040      	beq.n	8001514 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d107      	bne.n	80014aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149a:	4b47      	ldr	r3, [pc, #284]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d115      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e07f      	b.n	80015aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d107      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b2:	4b41      	ldr	r3, [pc, #260]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d109      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e073      	b.n	80015aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c2:	4b3d      	ldr	r3, [pc, #244]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e06b      	b.n	80015aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014d2:	4b39      	ldr	r3, [pc, #228]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f023 0203 	bic.w	r2, r3, #3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	4936      	ldr	r1, [pc, #216]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014e4:	f7ff f84e 	bl	8000584 <HAL_GetTick>
 80014e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ea:	e00a      	b.n	8001502 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ec:	f7ff f84a 	bl	8000584 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e053      	b.n	80015aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001502:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 020c 	and.w	r2, r3, #12
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	429a      	cmp	r2, r3
 8001512:	d1eb      	bne.n	80014ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001514:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0307 	and.w	r3, r3, #7
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	429a      	cmp	r2, r3
 8001520:	d210      	bcs.n	8001544 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001522:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f023 0207 	bic.w	r2, r3, #7
 800152a:	4922      	ldr	r1, [pc, #136]	; (80015b4 <HAL_RCC_ClockConfig+0x1c0>)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	4313      	orrs	r3, r2
 8001530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001532:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	429a      	cmp	r2, r3
 800153e:	d001      	beq.n	8001544 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e032      	b.n	80015aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b00      	cmp	r3, #0
 800154e:	d008      	beq.n	8001562 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	4916      	ldr	r1, [pc, #88]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 800155e:	4313      	orrs	r3, r2
 8001560:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	2b00      	cmp	r3, #0
 800156c:	d009      	beq.n	8001582 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	490e      	ldr	r1, [pc, #56]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 800157e:	4313      	orrs	r3, r2
 8001580:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001582:	f000 f821 	bl	80015c8 <HAL_RCC_GetSysClockFreq>
 8001586:	4601      	mov	r1, r0
 8001588:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <HAL_RCC_ClockConfig+0x1c8>)
 8001594:	5cd3      	ldrb	r3, [r2, r3]
 8001596:	fa21 f303 	lsr.w	r3, r1, r3
 800159a:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <HAL_RCC_ClockConfig+0x1cc>)
 800159c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_RCC_ClockConfig+0x1d0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe ffac 	bl	8000500 <HAL_InitTick>

  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40022000 	.word	0x40022000
 80015b8:	40021000 	.word	0x40021000
 80015bc:	08001754 	.word	0x08001754
 80015c0:	20000000 	.word	0x20000000
 80015c4:	20000004 	.word	0x20000004

080015c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015c8:	b490      	push	{r4, r7}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015ce:	4b2a      	ldr	r3, [pc, #168]	; (8001678 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015d0:	1d3c      	adds	r4, r7, #4
 80015d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015d8:	4b28      	ldr	r3, [pc, #160]	; (800167c <HAL_RCC_GetSysClockFreq+0xb4>)
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
 80015e2:	2300      	movs	r3, #0
 80015e4:	61bb      	str	r3, [r7, #24]
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015f2:	4b23      	ldr	r3, [pc, #140]	; (8001680 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	2b04      	cmp	r3, #4
 8001600:	d002      	beq.n	8001608 <HAL_RCC_GetSysClockFreq+0x40>
 8001602:	2b08      	cmp	r3, #8
 8001604:	d003      	beq.n	800160e <HAL_RCC_GetSysClockFreq+0x46>
 8001606:	e02d      	b.n	8001664 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001608:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <HAL_RCC_GetSysClockFreq+0xbc>)
 800160a:	623b      	str	r3, [r7, #32]
      break;
 800160c:	e02d      	b.n	800166a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	0c9b      	lsrs	r3, r3, #18
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800161a:	4413      	add	r3, r2
 800161c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001620:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d013      	beq.n	8001654 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800162c:	4b14      	ldr	r3, [pc, #80]	; (8001680 <HAL_RCC_GetSysClockFreq+0xb8>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	0c5b      	lsrs	r3, r3, #17
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800163a:	4413      	add	r3, r2
 800163c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001640:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001646:	fb02 f203 	mul.w	r2, r2, r3
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
 8001652:	e004      	b.n	800165e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	4a0c      	ldr	r2, [pc, #48]	; (8001688 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001658:	fb02 f303 	mul.w	r3, r2, r3
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	623b      	str	r3, [r7, #32]
      break;
 8001662:	e002      	b.n	800166a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001664:	4b07      	ldr	r3, [pc, #28]	; (8001684 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001666:	623b      	str	r3, [r7, #32]
      break;
 8001668:	bf00      	nop
    }
  }
  return sysclockfreq;
 800166a:	6a3b      	ldr	r3, [r7, #32]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3728      	adds	r7, #40	; 0x28
 8001670:	46bd      	mov	sp, r7
 8001672:	bc90      	pop	{r4, r7}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	08001740 	.word	0x08001740
 800167c:	08001750 	.word	0x08001750
 8001680:	40021000 	.word	0x40021000
 8001684:	007a1200 	.word	0x007a1200
 8001688:	003d0900 	.word	0x003d0900

0800168c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <RCC_Delay+0x34>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <RCC_Delay+0x38>)
 800169a:	fba2 2303 	umull	r2, r3, r2, r3
 800169e:	0a5b      	lsrs	r3, r3, #9
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	fb02 f303 	mul.w	r3, r2, r3
 80016a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016a8:	bf00      	nop
  }
  while (Delay --);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	1e5a      	subs	r2, r3, #1
 80016ae:	60fa      	str	r2, [r7, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f9      	bne.n	80016a8 <RCC_Delay+0x1c>
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000000 	.word	0x20000000
 80016c4:	10624dd3 	.word	0x10624dd3

080016c8 <__libc_init_array>:
 80016c8:	b570      	push	{r4, r5, r6, lr}
 80016ca:	2500      	movs	r5, #0
 80016cc:	4e0c      	ldr	r6, [pc, #48]	; (8001700 <__libc_init_array+0x38>)
 80016ce:	4c0d      	ldr	r4, [pc, #52]	; (8001704 <__libc_init_array+0x3c>)
 80016d0:	1ba4      	subs	r4, r4, r6
 80016d2:	10a4      	asrs	r4, r4, #2
 80016d4:	42a5      	cmp	r5, r4
 80016d6:	d109      	bne.n	80016ec <__libc_init_array+0x24>
 80016d8:	f000 f822 	bl	8001720 <_init>
 80016dc:	2500      	movs	r5, #0
 80016de:	4e0a      	ldr	r6, [pc, #40]	; (8001708 <__libc_init_array+0x40>)
 80016e0:	4c0a      	ldr	r4, [pc, #40]	; (800170c <__libc_init_array+0x44>)
 80016e2:	1ba4      	subs	r4, r4, r6
 80016e4:	10a4      	asrs	r4, r4, #2
 80016e6:	42a5      	cmp	r5, r4
 80016e8:	d105      	bne.n	80016f6 <__libc_init_array+0x2e>
 80016ea:	bd70      	pop	{r4, r5, r6, pc}
 80016ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016f0:	4798      	blx	r3
 80016f2:	3501      	adds	r5, #1
 80016f4:	e7ee      	b.n	80016d4 <__libc_init_array+0xc>
 80016f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016fa:	4798      	blx	r3
 80016fc:	3501      	adds	r5, #1
 80016fe:	e7f2      	b.n	80016e6 <__libc_init_array+0x1e>
 8001700:	08001764 	.word	0x08001764
 8001704:	08001764 	.word	0x08001764
 8001708:	08001764 	.word	0x08001764
 800170c:	08001768 	.word	0x08001768

08001710 <memset>:
 8001710:	4603      	mov	r3, r0
 8001712:	4402      	add	r2, r0
 8001714:	4293      	cmp	r3, r2
 8001716:	d100      	bne.n	800171a <memset+0xa>
 8001718:	4770      	bx	lr
 800171a:	f803 1b01 	strb.w	r1, [r3], #1
 800171e:	e7f9      	b.n	8001714 <memset+0x4>

08001720 <_init>:
 8001720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001722:	bf00      	nop
 8001724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001726:	bc08      	pop	{r3}
 8001728:	469e      	mov	lr, r3
 800172a:	4770      	bx	lr

0800172c <_fini>:
 800172c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800172e:	bf00      	nop
 8001730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001732:	bc08      	pop	{r3}
 8001734:	469e      	mov	lr, r3
 8001736:	4770      	bx	lr
