
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cb4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000de4  08000de4  00010de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e14  08000e14  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000e14  08000e14  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e14  08000e14  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e14  08000e14  00010e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e18  08000e18  00010e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000020  08000e3c  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000e3c  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000307c  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007cc  00000000  00000000  000230c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000006c4  00000000  00000000  00023891  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000140  00000000  00000000  00023f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000f8  00000000  00000000  00024098  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001f12  00000000  00000000  00024190  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000024a3  00000000  00000000  000260a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007ab5  00000000  00000000  00028545  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002fffa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003a0  00000000  00000000  00030078  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000dcc 	.word	0x08000dcc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000dcc 	.word	0x08000dcc

08000170 <Get_CRLH_Position>:
 */
#include "STM32F103C6_GPIO_Driver.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b80      	cmp	r3, #128	; 0x80
 800017e:	d042      	beq.n	8000206 <Get_CRLH_Position+0x96>
 8000180:	2b80      	cmp	r3, #128	; 0x80
 8000182:	dc11      	bgt.n	80001a8 <Get_CRLH_Position+0x38>
 8000184:	2b08      	cmp	r3, #8
 8000186:	d036      	beq.n	80001f6 <Get_CRLH_Position+0x86>
 8000188:	2b08      	cmp	r3, #8
 800018a:	dc06      	bgt.n	800019a <Get_CRLH_Position+0x2a>
 800018c:	2b02      	cmp	r3, #2
 800018e:	d02e      	beq.n	80001ee <Get_CRLH_Position+0x7e>
 8000190:	2b04      	cmp	r3, #4
 8000192:	d02e      	beq.n	80001f2 <Get_CRLH_Position+0x82>
 8000194:	2b01      	cmp	r3, #1
 8000196:	d028      	beq.n	80001ea <Get_CRLH_Position+0x7a>
 8000198:	e047      	b.n	800022a <Get_CRLH_Position+0xba>
 800019a:	2b20      	cmp	r3, #32
 800019c:	d02f      	beq.n	80001fe <Get_CRLH_Position+0x8e>
 800019e:	2b40      	cmp	r3, #64	; 0x40
 80001a0:	d02f      	beq.n	8000202 <Get_CRLH_Position+0x92>
 80001a2:	2b10      	cmp	r3, #16
 80001a4:	d029      	beq.n	80001fa <Get_CRLH_Position+0x8a>
 80001a6:	e040      	b.n	800022a <Get_CRLH_Position+0xba>
 80001a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001ac:	d033      	beq.n	8000216 <Get_CRLH_Position+0xa6>
 80001ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001b2:	dc09      	bgt.n	80001c8 <Get_CRLH_Position+0x58>
 80001b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001b8:	d029      	beq.n	800020e <Get_CRLH_Position+0x9e>
 80001ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001be:	d028      	beq.n	8000212 <Get_CRLH_Position+0xa2>
 80001c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001c4:	d021      	beq.n	800020a <Get_CRLH_Position+0x9a>
 80001c6:	e030      	b.n	800022a <Get_CRLH_Position+0xba>
 80001c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001cc:	d027      	beq.n	800021e <Get_CRLH_Position+0xae>
 80001ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001d2:	dc03      	bgt.n	80001dc <Get_CRLH_Position+0x6c>
 80001d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001d8:	d01f      	beq.n	800021a <Get_CRLH_Position+0xaa>
 80001da:	e026      	b.n	800022a <Get_CRLH_Position+0xba>
 80001dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80001e0:	d01f      	beq.n	8000222 <Get_CRLH_Position+0xb2>
 80001e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001e6:	d01e      	beq.n	8000226 <Get_CRLH_Position+0xb6>
 80001e8:	e01f      	b.n	800022a <Get_CRLH_Position+0xba>
	{
	//CRL
	case GPIO_PIN_0:
		return 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	e01e      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 80001ee:	2304      	movs	r3, #4
 80001f0:	e01c      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 80001f2:	2308      	movs	r3, #8
 80001f4:	e01a      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 80001f6:	230c      	movs	r3, #12
 80001f8:	e018      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 80001fa:	2310      	movs	r3, #16
 80001fc:	e016      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 80001fe:	2314      	movs	r3, #20
 8000200:	e014      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000202:	2318      	movs	r3, #24
 8000204:	e012      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000206:	231c      	movs	r3, #28
 8000208:	e010      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;

	//CRH
	case GPIO_PIN_8:
		return 0;
 800020a:	2300      	movs	r3, #0
 800020c:	e00e      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 800020e:	2304      	movs	r3, #4
 8000210:	e00c      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000212:	2308      	movs	r3, #8
 8000214:	e00a      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000216:	230c      	movs	r3, #12
 8000218:	e008      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 800021a:	2310      	movs	r3, #16
 800021c:	e006      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 800021e:	2314      	movs	r3, #20
 8000220:	e004      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000222:	2318      	movs	r3, #24
 8000224:	e002      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8000226:	231c      	movs	r3, #28
 8000228:	e000      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 800022a:	2300      	movs	r3, #0
}
 800022c:	4618      	mov	r0, r3
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr

08000236 <MCAL_GPIO_Init>:
 * Note 		-STM32F103C6 MCU has GPIO A,B,C,D,E
 * 				 but LQFP48 Package has A,B ,Part of C&D and no E
 */

void MCAL_GPIO_Init (GPIO_TypeDef* GPIOx,GPIO_PinConfig_t* PinConfig)
{
 8000236:	b590      	push	{r4, r7, lr}
 8000238:	b085      	sub	sp, #20
 800023a:	af00      	add	r7, sp, #0
 800023c:	6078      	str	r0, [r7, #4]
 800023e:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) config pins 0 -> 7
	//Port configuration register high (GPIOx_CRH)  config pins 8 -> 15
	volatile uint32_t* configReg = NULL ;
 8000240:	2300      	movs	r3, #0
 8000242:	60fb      	str	r3, [r7, #12]
	volatile uint8_t PIN = 0;
 8000244:	2300      	movs	r3, #0
 8000246:	72fb      	strb	r3, [r7, #11]
	configReg = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH ;
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	2bff      	cmp	r3, #255	; 0xff
 800024e:	d801      	bhi.n	8000254 <MCAL_GPIO_Init+0x1e>
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	e001      	b.n	8000258 <MCAL_GPIO_Init+0x22>
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	3304      	adds	r3, #4
 8000258:	60fb      	str	r3, [r7, #12]

	// clear CNF[1:0] & MODE[1:0]
	(*configReg) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	881b      	ldrh	r3, [r3, #0]
 800025e:	4618      	mov	r0, r3
 8000260:	f7ff ff86 	bl	8000170 <Get_CRLH_Position>
 8000264:	4603      	mov	r3, r0
 8000266:	461a      	mov	r2, r3
 8000268:	230f      	movs	r3, #15
 800026a:	4093      	lsls	r3, r2
 800026c:	43da      	mvns	r2, r3
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	401a      	ands	r2, r3
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	601a      	str	r2, [r3, #0]

	//if pin is OUTPUT
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD ) | (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ) | (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD ) | (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	789b      	ldrb	r3, [r3, #2]
 800027c:	2b07      	cmp	r3, #7
 800027e:	bf0c      	ite	eq
 8000280:	2301      	moveq	r3, #1
 8000282:	2300      	movne	r3, #0
 8000284:	b2da      	uxtb	r2, r3
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	789b      	ldrb	r3, [r3, #2]
 800028a:	2b06      	cmp	r3, #6
 800028c:	bf0c      	ite	eq
 800028e:	2301      	moveq	r3, #1
 8000290:	2300      	movne	r3, #0
 8000292:	b2db      	uxtb	r3, r3
 8000294:	4313      	orrs	r3, r2
 8000296:	b2db      	uxtb	r3, r3
 8000298:	461a      	mov	r2, r3
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	789b      	ldrb	r3, [r3, #2]
 800029e:	2b05      	cmp	r3, #5
 80002a0:	bf0c      	ite	eq
 80002a2:	2301      	moveq	r3, #1
 80002a4:	2300      	movne	r3, #0
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	4313      	orrs	r3, r2
 80002aa:	683a      	ldr	r2, [r7, #0]
 80002ac:	7892      	ldrb	r2, [r2, #2]
 80002ae:	2a04      	cmp	r2, #4
 80002b0:	bf0c      	ite	eq
 80002b2:	2201      	moveq	r2, #1
 80002b4:	2200      	movne	r2, #0
 80002b6:	b2d2      	uxtb	r2, r2
 80002b8:	4313      	orrs	r3, r2
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d00f      	beq.n	80002de <MCAL_GPIO_Init+0xa8>
	{
		//Set CNF[1:0] & MODE[1:0]
		PIN = (((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0F ;
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	789b      	ldrb	r3, [r3, #2]
 80002c2:	3b04      	subs	r3, #4
 80002c4:	009b      	lsls	r3, r3, #2
 80002c6:	b25a      	sxtb	r2, r3
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	78db      	ldrb	r3, [r3, #3]
 80002cc:	b25b      	sxtb	r3, r3
 80002ce:	4313      	orrs	r3, r2
 80002d0:	b25b      	sxtb	r3, r3
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	f003 030f 	and.w	r3, r3, #15
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	72fb      	strb	r3, [r7, #11]
 80002dc:	e037      	b.n	800034e <MCAL_GPIO_Init+0x118>

	}
	//if pin is INPUT
	else //MODE = 00 input mode (reset state)
	{
		if ( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FO) | (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG))
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	789b      	ldrb	r3, [r3, #2]
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	bf0c      	ite	eq
 80002e6:	2301      	moveq	r3, #1
 80002e8:	2300      	movne	r3, #0
 80002ea:	b2da      	uxtb	r2, r3
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	789b      	ldrb	r3, [r3, #2]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	bf0c      	ite	eq
 80002f4:	2301      	moveq	r3, #1
 80002f6:	2300      	movne	r3, #0
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	4313      	orrs	r3, r2
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d008      	beq.n	8000314 <MCAL_GPIO_Init+0xde>
		{
			PIN = (((PinConfig->GPIO_MODE ) << 2) | (0x0)) & 0x0F ;
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	789b      	ldrb	r3, [r3, #2]
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	b2db      	uxtb	r3, r3
 800030a:	f003 030f 	and.w	r3, r3, #15
 800030e:	b2db      	uxtb	r3, r3
 8000310:	72fb      	strb	r3, [r7, #11]
 8000312:	e01c      	b.n	800034e <MCAL_GPIO_Init+0x118>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)//considered as INPUT Floating
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	789b      	ldrb	r3, [r3, #2]
 8000318:	2b08      	cmp	r3, #8
 800031a:	d102      	bne.n	8000322 <MCAL_GPIO_Init+0xec>
		{
			PIN = (((GPIO_MODE_INPUT_FO) << 2) | (0x0)) & 0x0F ;
 800031c:	2304      	movs	r3, #4
 800031e:	72fb      	strb	r3, [r7, #11]
 8000320:	e015      	b.n	800034e <MCAL_GPIO_Init+0x118>
		}
		else // PU PD INPUT
		{
			PIN = (((GPIO_MODE_INPUT_PU) << 2) | (0x0)) & 0x0F ;
 8000322:	2308      	movs	r3, #8
 8000324:	72fb      	strb	r3, [r7, #11]
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	789b      	ldrb	r3, [r3, #2]
 800032a:	2b02      	cmp	r3, #2
 800032c:	d107      	bne.n	800033e <MCAL_GPIO_Init+0x108>
			{
				//ODR = 1 INPUT Pull Up :Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	68db      	ldr	r3, [r3, #12]
 8000332:	683a      	ldr	r2, [r7, #0]
 8000334:	8812      	ldrh	r2, [r2, #0]
 8000336:	431a      	orrs	r2, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	60da      	str	r2, [r3, #12]
 800033c:	e007      	b.n	800034e <MCAL_GPIO_Init+0x118>
			}else
			{
				//ODR = 0 INPUT Pull Down :Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	68db      	ldr	r3, [r3, #12]
 8000342:	683a      	ldr	r2, [r7, #0]
 8000344:	8812      	ldrh	r2, [r2, #0]
 8000346:	43d2      	mvns	r2, r2
 8000348:	401a      	ands	r2, r3
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	60da      	str	r2, [r3, #12]
		}

	}

	//Write on CRL or CRH
	(*configReg) |= ( (PIN) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
 800034e:	7afb      	ldrb	r3, [r7, #11]
 8000350:	b2db      	uxtb	r3, r3
 8000352:	461c      	mov	r4, r3
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	881b      	ldrh	r3, [r3, #0]
 8000358:	4618      	mov	r0, r3
 800035a:	f7ff ff09 	bl	8000170 <Get_CRLH_Position>
 800035e:	4603      	mov	r3, r0
 8000360:	fa04 f203 	lsl.w	r2, r4, r3
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	431a      	orrs	r2, r3
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	601a      	str	r2, [r3, #0]

}
 800036e:	bf00      	nop
 8000370:	3714      	adds	r7, #20
 8000372:	46bd      	mov	sp, r7
 8000374:	bd90      	pop	{r4, r7, pc}

08000376 <MCAL_GPIO_ReadPin>:
 * @retval 		-The input Pin value (two values based on @ref GPIO_PIN_State)
 * Note 		-None
 */

uint8_t MCAL_GPIO_ReadPin (GPIO_TypeDef* GPIOx,uint16_t PinNumber)
{
 8000376:	b480      	push	{r7}
 8000378:	b085      	sub	sp, #20
 800037a:	af00      	add	r7, sp, #0
 800037c:	6078      	str	r0, [r7, #4]
 800037e:	460b      	mov	r3, r1
 8000380:	807b      	strh	r3, [r7, #2]
	uint8_t bitStatus;
	if (((GPIOx->IDR) & PinNumber) != (uint32_t)GPIO_PIN_RESET )
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	689a      	ldr	r2, [r3, #8]
 8000386:	887b      	ldrh	r3, [r7, #2]
 8000388:	4013      	ands	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	d002      	beq.n	8000394 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitStatus = GPIO_PIN_SET;
 800038e:	2301      	movs	r3, #1
 8000390:	73fb      	strb	r3, [r7, #15]
 8000392:	e001      	b.n	8000398 <MCAL_GPIO_ReadPin+0x22>
	}
	else
	{
		bitStatus = GPIO_PIN_RESET;
 8000394:	2300      	movs	r3, #0
 8000396:	73fb      	strb	r3, [r7, #15]
	}
	return bitStatus;
 8000398:	7bfb      	ldrb	r3, [r7, #15]
}
 800039a:	4618      	mov	r0, r3
 800039c:	3714      	adds	r7, #20
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr

080003a4 <MCAL_GPIO_WritePin>:
 * @retval 		-None
 * Note 		-None
 */

void MCAL_GPIO_WritePin (GPIO_TypeDef* GPIOx,uint16_t PinNumber,uint8_t Value)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	460b      	mov	r3, r1
 80003ae:	807b      	strh	r3, [r7, #2]
 80003b0:	4613      	mov	r3, r2
 80003b2:	707b      	strb	r3, [r7, #1]

	if (Value != GPIO_PIN_RESET )
 80003b4:	787b      	ldrb	r3, [r7, #1]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d003      	beq.n	80003c2 <MCAL_GPIO_WritePin+0x1e>
	{
		//Port bit set/reset register (GPIOx_BSRR)
		//BRy: Port x Reset bit y (y= 0 .. 15)
		//0: No action on the corresponding ODRx bit
		//1: Reset the corresponding ODRx bit
		GPIOx->BSRR =(uint32_t) PinNumber;
 80003ba:	887a      	ldrh	r2, [r7, #2]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	611a      	str	r2, [r3, #16]
		//0: No action on the corresponding ODRx bit
		//1: Reset the corresponding ODRx bit
		GPIOx->BRR =(uint32_t) PinNumber;
	}

}
 80003c0:	e002      	b.n	80003c8 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR =(uint32_t) PinNumber;
 80003c2:	887a      	ldrh	r2, [r7, #2]
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	615a      	str	r2, [r3, #20]
}
 80003c8:	bf00      	nop
 80003ca:	370c      	adds	r7, #12
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bc80      	pop	{r7}
 80003d0:	4770      	bx	lr

080003d2 <MCAL_GPIO_WritePort>:
 * Note 		-None
 */


void MCAL_GPIO_WritePort (GPIO_TypeDef* GPIOx,uint16_t Value)
{
 80003d2:	b480      	push	{r7}
 80003d4:	b083      	sub	sp, #12
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
 80003da:	460b      	mov	r3, r1
 80003dc:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR =(uint32_t) Value;
 80003de:	887a      	ldrh	r2, [r7, #2]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	60da      	str	r2, [r3, #12]
}
 80003e4:	bf00      	nop
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr
	...

080003f0 <KEYPAD_init>:

int KEYPAD_R[]={R0,R1,R2,R3};
int KEYPAD_C[]={C0,C1,C2,C3};

void KEYPAD_init()
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
//	DDIR_KEYPAD_PORT &= ~((1<<KEYPAD_R[0]) | (1<<KEYPAD_R[1]) | (1<<KEYPAD_R[2]) | (1<<KEYPAD_R[3]));
//	DDIR_KEYPAD_PORT |= ((1<<KEYPAD_C[0]) | (1<<KEYPAD_C[1]) | (1<<KEYPAD_C[2]) | (1<<KEYPAD_C[3]));


	PinCfg.GPIO_PinNumber = R0;
 80003f4:	4b37      	ldr	r3, [pc, #220]	; (80004d4 <KEYPAD_init+0xe4>)
 80003f6:	2201      	movs	r2, #1
 80003f8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 80003fa:	4b36      	ldr	r3, [pc, #216]	; (80004d4 <KEYPAD_init+0xe4>)
 80003fc:	2204      	movs	r2, #4
 80003fe:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 8000400:	4b34      	ldr	r3, [pc, #208]	; (80004d4 <KEYPAD_init+0xe4>)
 8000402:	2201      	movs	r2, #1
 8000404:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000406:	4933      	ldr	r1, [pc, #204]	; (80004d4 <KEYPAD_init+0xe4>)
 8000408:	4833      	ldr	r0, [pc, #204]	; (80004d8 <KEYPAD_init+0xe8>)
 800040a:	f7ff ff14 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R1;
 800040e:	4b31      	ldr	r3, [pc, #196]	; (80004d4 <KEYPAD_init+0xe4>)
 8000410:	2202      	movs	r2, #2
 8000412:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP  ;
 8000414:	4b2f      	ldr	r3, [pc, #188]	; (80004d4 <KEYPAD_init+0xe4>)
 8000416:	2204      	movs	r2, #4
 8000418:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 800041a:	4b2e      	ldr	r3, [pc, #184]	; (80004d4 <KEYPAD_init+0xe4>)
 800041c:	2201      	movs	r2, #1
 800041e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000420:	492c      	ldr	r1, [pc, #176]	; (80004d4 <KEYPAD_init+0xe4>)
 8000422:	482d      	ldr	r0, [pc, #180]	; (80004d8 <KEYPAD_init+0xe8>)
 8000424:	f7ff ff07 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R2;
 8000428:	4b2a      	ldr	r3, [pc, #168]	; (80004d4 <KEYPAD_init+0xe4>)
 800042a:	2208      	movs	r2, #8
 800042c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP  ;
 800042e:	4b29      	ldr	r3, [pc, #164]	; (80004d4 <KEYPAD_init+0xe4>)
 8000430:	2204      	movs	r2, #4
 8000432:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 8000434:	4b27      	ldr	r3, [pc, #156]	; (80004d4 <KEYPAD_init+0xe4>)
 8000436:	2201      	movs	r2, #1
 8000438:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 800043a:	4926      	ldr	r1, [pc, #152]	; (80004d4 <KEYPAD_init+0xe4>)
 800043c:	4826      	ldr	r0, [pc, #152]	; (80004d8 <KEYPAD_init+0xe8>)
 800043e:	f7ff fefa 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R3;
 8000442:	4b24      	ldr	r3, [pc, #144]	; (80004d4 <KEYPAD_init+0xe4>)
 8000444:	2210      	movs	r2, #16
 8000446:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP  ;
 8000448:	4b22      	ldr	r3, [pc, #136]	; (80004d4 <KEYPAD_init+0xe4>)
 800044a:	2204      	movs	r2, #4
 800044c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 800044e:	4b21      	ldr	r3, [pc, #132]	; (80004d4 <KEYPAD_init+0xe4>)
 8000450:	2201      	movs	r2, #1
 8000452:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000454:	491f      	ldr	r1, [pc, #124]	; (80004d4 <KEYPAD_init+0xe4>)
 8000456:	4820      	ldr	r0, [pc, #128]	; (80004d8 <KEYPAD_init+0xe8>)
 8000458:	f7ff feed 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C0;
 800045c:	4b1d      	ldr	r3, [pc, #116]	; (80004d4 <KEYPAD_init+0xe4>)
 800045e:	2220      	movs	r2, #32
 8000460:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP  ;
 8000462:	4b1c      	ldr	r3, [pc, #112]	; (80004d4 <KEYPAD_init+0xe4>)
 8000464:	2204      	movs	r2, #4
 8000466:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 8000468:	4b1a      	ldr	r3, [pc, #104]	; (80004d4 <KEYPAD_init+0xe4>)
 800046a:	2201      	movs	r2, #1
 800046c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 800046e:	4919      	ldr	r1, [pc, #100]	; (80004d4 <KEYPAD_init+0xe4>)
 8000470:	4819      	ldr	r0, [pc, #100]	; (80004d8 <KEYPAD_init+0xe8>)
 8000472:	f7ff fee0 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C1;
 8000476:	4b17      	ldr	r3, [pc, #92]	; (80004d4 <KEYPAD_init+0xe4>)
 8000478:	2240      	movs	r2, #64	; 0x40
 800047a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP  ;
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <KEYPAD_init+0xe4>)
 800047e:	2204      	movs	r2, #4
 8000480:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 8000482:	4b14      	ldr	r3, [pc, #80]	; (80004d4 <KEYPAD_init+0xe4>)
 8000484:	2201      	movs	r2, #1
 8000486:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000488:	4912      	ldr	r1, [pc, #72]	; (80004d4 <KEYPAD_init+0xe4>)
 800048a:	4813      	ldr	r0, [pc, #76]	; (80004d8 <KEYPAD_init+0xe8>)
 800048c:	f7ff fed3 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C2;
 8000490:	4b10      	ldr	r3, [pc, #64]	; (80004d4 <KEYPAD_init+0xe4>)
 8000492:	2280      	movs	r2, #128	; 0x80
 8000494:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP  ;
 8000496:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <KEYPAD_init+0xe4>)
 8000498:	2204      	movs	r2, #4
 800049a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 800049c:	4b0d      	ldr	r3, [pc, #52]	; (80004d4 <KEYPAD_init+0xe4>)
 800049e:	2201      	movs	r2, #1
 80004a0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80004a2:	490c      	ldr	r1, [pc, #48]	; (80004d4 <KEYPAD_init+0xe4>)
 80004a4:	480c      	ldr	r0, [pc, #48]	; (80004d8 <KEYPAD_init+0xe8>)
 80004a6:	f7ff fec6 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C3;
 80004aa:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <KEYPAD_init+0xe4>)
 80004ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004b0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP  ;
 80004b2:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <KEYPAD_init+0xe4>)
 80004b4:	2204      	movs	r2, #4
 80004b6:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 80004b8:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <KEYPAD_init+0xe4>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80004be:	4905      	ldr	r1, [pc, #20]	; (80004d4 <KEYPAD_init+0xe4>)
 80004c0:	4805      	ldr	r0, [pc, #20]	; (80004d8 <KEYPAD_init+0xe8>)
 80004c2:	f7ff feb8 	bl	8000236 <MCAL_GPIO_Init>





	MCAL_GPIO_WritePort(KEYPAD_PORT, 0xFF);
 80004c6:	21ff      	movs	r1, #255	; 0xff
 80004c8:	4803      	ldr	r0, [pc, #12]	; (80004d8 <KEYPAD_init+0xe8>)
 80004ca:	f7ff ff82 	bl	80003d2 <MCAL_GPIO_WritePort>
}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	2000003c 	.word	0x2000003c
 80004d8:	40010c00 	.word	0x40010c00

080004dc <KEYPAD_CHAR>:

char KEYPAD_CHAR()
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
	volatile int i, j;
	for (i=0;i<4;i++)
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	e0b4      	b.n	8000652 <KEYPAD_CHAR+0x176>
	{

		MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_C[0], GPIO_PIN_SET);
 80004e8:	4b5e      	ldr	r3, [pc, #376]	; (8000664 <KEYPAD_CHAR+0x188>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	b29b      	uxth	r3, r3
 80004ee:	2201      	movs	r2, #1
 80004f0:	4619      	mov	r1, r3
 80004f2:	485d      	ldr	r0, [pc, #372]	; (8000668 <KEYPAD_CHAR+0x18c>)
 80004f4:	f7ff ff56 	bl	80003a4 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_C[1], GPIO_PIN_SET);
 80004f8:	4b5a      	ldr	r3, [pc, #360]	; (8000664 <KEYPAD_CHAR+0x188>)
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	b29b      	uxth	r3, r3
 80004fe:	2201      	movs	r2, #1
 8000500:	4619      	mov	r1, r3
 8000502:	4859      	ldr	r0, [pc, #356]	; (8000668 <KEYPAD_CHAR+0x18c>)
 8000504:	f7ff ff4e 	bl	80003a4 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_C[2], GPIO_PIN_SET);
 8000508:	4b56      	ldr	r3, [pc, #344]	; (8000664 <KEYPAD_CHAR+0x188>)
 800050a:	689b      	ldr	r3, [r3, #8]
 800050c:	b29b      	uxth	r3, r3
 800050e:	2201      	movs	r2, #1
 8000510:	4619      	mov	r1, r3
 8000512:	4855      	ldr	r0, [pc, #340]	; (8000668 <KEYPAD_CHAR+0x18c>)
 8000514:	f7ff ff46 	bl	80003a4 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_C[3], GPIO_PIN_SET);
 8000518:	4b52      	ldr	r3, [pc, #328]	; (8000664 <KEYPAD_CHAR+0x188>)
 800051a:	68db      	ldr	r3, [r3, #12]
 800051c:	b29b      	uxth	r3, r3
 800051e:	2201      	movs	r2, #1
 8000520:	4619      	mov	r1, r3
 8000522:	4851      	ldr	r0, [pc, #324]	; (8000668 <KEYPAD_CHAR+0x18c>)
 8000524:	f7ff ff3e 	bl	80003a4 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_C[i], GPIO_PIN_RESET);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	4a4e      	ldr	r2, [pc, #312]	; (8000664 <KEYPAD_CHAR+0x188>)
 800052c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000530:	b29b      	uxth	r3, r3
 8000532:	2200      	movs	r2, #0
 8000534:	4619      	mov	r1, r3
 8000536:	484c      	ldr	r0, [pc, #304]	; (8000668 <KEYPAD_CHAR+0x18c>)
 8000538:	f7ff ff34 	bl	80003a4 <MCAL_GPIO_WritePin>

		for(j=0;j<4;j++)
 800053c:	2300      	movs	r3, #0
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	e080      	b.n	8000644 <KEYPAD_CHAR+0x168>
		{

			if((MCAL_GPIO_ReadPin(KEYPAD_PORT, KEYPAD_R[j]))==0)
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	4a49      	ldr	r2, [pc, #292]	; (800066c <KEYPAD_CHAR+0x190>)
 8000546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800054a:	b29b      	uxth	r3, r3
 800054c:	4619      	mov	r1, r3
 800054e:	4846      	ldr	r0, [pc, #280]	; (8000668 <KEYPAD_CHAR+0x18c>)
 8000550:	f7ff ff11 	bl	8000376 <MCAL_GPIO_ReadPin>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d171      	bne.n	800063e <KEYPAD_CHAR+0x162>
			{
				while((MCAL_GPIO_ReadPin(KEYPAD_PORT, KEYPAD_R[j]))==0);
 800055a:	bf00      	nop
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	4a43      	ldr	r2, [pc, #268]	; (800066c <KEYPAD_CHAR+0x190>)
 8000560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000564:	b29b      	uxth	r3, r3
 8000566:	4619      	mov	r1, r3
 8000568:	483f      	ldr	r0, [pc, #252]	; (8000668 <KEYPAD_CHAR+0x18c>)
 800056a:	f7ff ff04 	bl	8000376 <MCAL_GPIO_ReadPin>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d0f3      	beq.n	800055c <KEYPAD_CHAR+0x80>
				switch(i)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2b03      	cmp	r3, #3
 8000578:	d861      	bhi.n	800063e <KEYPAD_CHAR+0x162>
 800057a:	a201      	add	r2, pc, #4	; (adr r2, 8000580 <KEYPAD_CHAR+0xa4>)
 800057c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000580:	08000591 	.word	0x08000591
 8000584:	080005b9 	.word	0x080005b9
 8000588:	080005e1 	.word	0x080005e1
 800058c:	08000609 	.word	0x08000609
				{
				case 0:
				{
					if(j==0) return '7';
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d101      	bne.n	800059a <KEYPAD_CHAR+0xbe>
 8000596:	2337      	movs	r3, #55	; 0x37
 8000598:	e060      	b.n	800065c <KEYPAD_CHAR+0x180>
					else if (j==1) return '4';
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d101      	bne.n	80005a4 <KEYPAD_CHAR+0xc8>
 80005a0:	2334      	movs	r3, #52	; 0x34
 80005a2:	e05b      	b.n	800065c <KEYPAD_CHAR+0x180>
					else if (j==2) return '1';
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	2b02      	cmp	r3, #2
 80005a8:	d101      	bne.n	80005ae <KEYPAD_CHAR+0xd2>
 80005aa:	2331      	movs	r3, #49	; 0x31
 80005ac:	e056      	b.n	800065c <KEYPAD_CHAR+0x180>
					else if (j==3) return '!';
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	d13d      	bne.n	8000630 <KEYPAD_CHAR+0x154>
 80005b4:	2321      	movs	r3, #33	; 0x21
 80005b6:	e051      	b.n	800065c <KEYPAD_CHAR+0x180>
				}break;
				case 1:
				{
					if(j==0) return '8';
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d101      	bne.n	80005c2 <KEYPAD_CHAR+0xe6>
 80005be:	2338      	movs	r3, #56	; 0x38
 80005c0:	e04c      	b.n	800065c <KEYPAD_CHAR+0x180>
					else if (j==1) return '5';
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d101      	bne.n	80005cc <KEYPAD_CHAR+0xf0>
 80005c8:	2335      	movs	r3, #53	; 0x35
 80005ca:	e047      	b.n	800065c <KEYPAD_CHAR+0x180>
					else if (j==2) return '2';
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	2b02      	cmp	r3, #2
 80005d0:	d101      	bne.n	80005d6 <KEYPAD_CHAR+0xfa>
 80005d2:	2332      	movs	r3, #50	; 0x32
 80005d4:	e042      	b.n	800065c <KEYPAD_CHAR+0x180>
					else if (j==3) return '0';
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	2b03      	cmp	r3, #3
 80005da:	d12b      	bne.n	8000634 <KEYPAD_CHAR+0x158>
 80005dc:	2330      	movs	r3, #48	; 0x30
 80005de:	e03d      	b.n	800065c <KEYPAD_CHAR+0x180>
				}break;
				case 2:
				{
					if(j==0) return '9';
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d101      	bne.n	80005ea <KEYPAD_CHAR+0x10e>
 80005e6:	2339      	movs	r3, #57	; 0x39
 80005e8:	e038      	b.n	800065c <KEYPAD_CHAR+0x180>
					else if (j==1) return '6';
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d101      	bne.n	80005f4 <KEYPAD_CHAR+0x118>
 80005f0:	2336      	movs	r3, #54	; 0x36
 80005f2:	e033      	b.n	800065c <KEYPAD_CHAR+0x180>
					else if (j==2) return '3';
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	2b02      	cmp	r3, #2
 80005f8:	d101      	bne.n	80005fe <KEYPAD_CHAR+0x122>
 80005fa:	2333      	movs	r3, #51	; 0x33
 80005fc:	e02e      	b.n	800065c <KEYPAD_CHAR+0x180>
					else if (j==3) return '=';
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	2b03      	cmp	r3, #3
 8000602:	d119      	bne.n	8000638 <KEYPAD_CHAR+0x15c>
 8000604:	233d      	movs	r3, #61	; 0x3d
 8000606:	e029      	b.n	800065c <KEYPAD_CHAR+0x180>
				}break;
				case 3:
				{
					if(j==0) return '/';
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d101      	bne.n	8000612 <KEYPAD_CHAR+0x136>
 800060e:	232f      	movs	r3, #47	; 0x2f
 8000610:	e024      	b.n	800065c <KEYPAD_CHAR+0x180>
					else if (j==1) return '*';
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d101      	bne.n	800061c <KEYPAD_CHAR+0x140>
 8000618:	232a      	movs	r3, #42	; 0x2a
 800061a:	e01f      	b.n	800065c <KEYPAD_CHAR+0x180>
					else if (j==2) return '-';
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	2b02      	cmp	r3, #2
 8000620:	d101      	bne.n	8000626 <KEYPAD_CHAR+0x14a>
 8000622:	232d      	movs	r3, #45	; 0x2d
 8000624:	e01a      	b.n	800065c <KEYPAD_CHAR+0x180>
					else if (j==3) return '+';
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	2b03      	cmp	r3, #3
 800062a:	d107      	bne.n	800063c <KEYPAD_CHAR+0x160>
 800062c:	232b      	movs	r3, #43	; 0x2b
 800062e:	e015      	b.n	800065c <KEYPAD_CHAR+0x180>
				}break;
 8000630:	bf00      	nop
 8000632:	e004      	b.n	800063e <KEYPAD_CHAR+0x162>
				}break;
 8000634:	bf00      	nop
 8000636:	e002      	b.n	800063e <KEYPAD_CHAR+0x162>
				}break;
 8000638:	bf00      	nop
 800063a:	e000      	b.n	800063e <KEYPAD_CHAR+0x162>
				}break;
 800063c:	bf00      	nop
		for(j=0;j<4;j++)
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	3301      	adds	r3, #1
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	2b03      	cmp	r3, #3
 8000648:	f77f af7b 	ble.w	8000542 <KEYPAD_CHAR+0x66>
	for (i=0;i<4;i++)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	3301      	adds	r3, #1
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b03      	cmp	r3, #3
 8000656:	f77f af47 	ble.w	80004e8 <KEYPAD_CHAR+0xc>
				}
			}
		}

	}
	return 'N';
 800065a:	234e      	movs	r3, #78	; 0x4e
}
 800065c:	4618      	mov	r0, r3
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000010 	.word	0x20000010
 8000668:	40010c00 	.word	0x40010c00
 800066c:	20000000 	.word	0x20000000

08000670 <wait_ms>:

GPIO_PinConfig_t PinCfg;


void wait_ms(uint32_t time)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0;i<time;i++)
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	e00b      	b.n	8000696 <wait_ms+0x26>
		for(j=0;j<255;j++);
 800067e:	2300      	movs	r3, #0
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	e002      	b.n	800068a <wait_ms+0x1a>
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	3301      	adds	r3, #1
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	2bfe      	cmp	r3, #254	; 0xfe
 800068e:	d9f9      	bls.n	8000684 <wait_ms+0x14>
	for(i=0;i<time;i++)
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	3301      	adds	r3, #1
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	429a      	cmp	r2, r3
 800069c:	d3ef      	bcc.n	800067e <wait_ms+0xe>
}
 800069e:	bf00      	nop
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr

080006a8 <LCD_KICK>:


void LCD_KICK()
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_PORT, EN_SWITCH, GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b2:	4807      	ldr	r0, [pc, #28]	; (80006d0 <LCD_KICK+0x28>)
 80006b4:	f7ff fe76 	bl	80003a4 <MCAL_GPIO_WritePin>
	wait_ms(50);
 80006b8:	2032      	movs	r0, #50	; 0x32
 80006ba:	f7ff ffd9 	bl	8000670 <wait_ms>
	MCAL_GPIO_WritePin(LCD_PORT, EN_SWITCH, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c4:	4802      	ldr	r0, [pc, #8]	; (80006d0 <LCD_KICK+0x28>)
 80006c6:	f7ff fe6d 	bl	80003a4 <MCAL_GPIO_WritePin>
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40010800 	.word	0x40010800

080006d4 <LCD_CLEAR>:
void LCD_CLEAR()
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	LCD_WR_COMMAND(LCD_CLEAR_SCREEN);
 80006d8:	2001      	movs	r0, #1
 80006da:	f000 f993 	bl	8000a04 <LCD_WR_COMMAND>
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <LCD_isbusy>:
void LCD_isbusy()
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0

	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 80006e8:	4b63      	ldr	r3, [pc, #396]	; (8000878 <LCD_isbusy+0x194>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FO;
 80006ee:	4b62      	ldr	r3, [pc, #392]	; (8000878 <LCD_isbusy+0x194>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 80006f4:	4960      	ldr	r1, [pc, #384]	; (8000878 <LCD_isbusy+0x194>)
 80006f6:	4861      	ldr	r0, [pc, #388]	; (800087c <LCD_isbusy+0x198>)
 80006f8:	f7ff fd9d 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 80006fc:	4b5e      	ldr	r3, [pc, #376]	; (8000878 <LCD_isbusy+0x194>)
 80006fe:	2202      	movs	r2, #2
 8000700:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FO;
 8000702:	4b5d      	ldr	r3, [pc, #372]	; (8000878 <LCD_isbusy+0x194>)
 8000704:	2201      	movs	r2, #1
 8000706:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000708:	495b      	ldr	r1, [pc, #364]	; (8000878 <LCD_isbusy+0x194>)
 800070a:	485c      	ldr	r0, [pc, #368]	; (800087c <LCD_isbusy+0x198>)
 800070c:	f7ff fd93 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000710:	4b59      	ldr	r3, [pc, #356]	; (8000878 <LCD_isbusy+0x194>)
 8000712:	2204      	movs	r2, #4
 8000714:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FO;
 8000716:	4b58      	ldr	r3, [pc, #352]	; (8000878 <LCD_isbusy+0x194>)
 8000718:	2201      	movs	r2, #1
 800071a:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 800071c:	4956      	ldr	r1, [pc, #344]	; (8000878 <LCD_isbusy+0x194>)
 800071e:	4857      	ldr	r0, [pc, #348]	; (800087c <LCD_isbusy+0x198>)
 8000720:	f7ff fd89 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000724:	4b54      	ldr	r3, [pc, #336]	; (8000878 <LCD_isbusy+0x194>)
 8000726:	2208      	movs	r2, #8
 8000728:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FO;
 800072a:	4b53      	ldr	r3, [pc, #332]	; (8000878 <LCD_isbusy+0x194>)
 800072c:	2201      	movs	r2, #1
 800072e:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000730:	4951      	ldr	r1, [pc, #324]	; (8000878 <LCD_isbusy+0x194>)
 8000732:	4852      	ldr	r0, [pc, #328]	; (800087c <LCD_isbusy+0x198>)
 8000734:	f7ff fd7f 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000738:	4b4f      	ldr	r3, [pc, #316]	; (8000878 <LCD_isbusy+0x194>)
 800073a:	2210      	movs	r2, #16
 800073c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FO;
 800073e:	4b4e      	ldr	r3, [pc, #312]	; (8000878 <LCD_isbusy+0x194>)
 8000740:	2201      	movs	r2, #1
 8000742:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000744:	494c      	ldr	r1, [pc, #304]	; (8000878 <LCD_isbusy+0x194>)
 8000746:	484d      	ldr	r0, [pc, #308]	; (800087c <LCD_isbusy+0x198>)
 8000748:	f7ff fd75 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 800074c:	4b4a      	ldr	r3, [pc, #296]	; (8000878 <LCD_isbusy+0x194>)
 800074e:	2220      	movs	r2, #32
 8000750:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FO;
 8000752:	4b49      	ldr	r3, [pc, #292]	; (8000878 <LCD_isbusy+0x194>)
 8000754:	2201      	movs	r2, #1
 8000756:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000758:	4947      	ldr	r1, [pc, #284]	; (8000878 <LCD_isbusy+0x194>)
 800075a:	4848      	ldr	r0, [pc, #288]	; (800087c <LCD_isbusy+0x198>)
 800075c:	f7ff fd6b 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000760:	4b45      	ldr	r3, [pc, #276]	; (8000878 <LCD_isbusy+0x194>)
 8000762:	2240      	movs	r2, #64	; 0x40
 8000764:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FO;
 8000766:	4b44      	ldr	r3, [pc, #272]	; (8000878 <LCD_isbusy+0x194>)
 8000768:	2201      	movs	r2, #1
 800076a:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 800076c:	4942      	ldr	r1, [pc, #264]	; (8000878 <LCD_isbusy+0x194>)
 800076e:	4843      	ldr	r0, [pc, #268]	; (800087c <LCD_isbusy+0x198>)
 8000770:	f7ff fd61 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000774:	4b40      	ldr	r3, [pc, #256]	; (8000878 <LCD_isbusy+0x194>)
 8000776:	2280      	movs	r2, #128	; 0x80
 8000778:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FO;
 800077a:	4b3f      	ldr	r3, [pc, #252]	; (8000878 <LCD_isbusy+0x194>)
 800077c:	2201      	movs	r2, #1
 800077e:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000780:	493d      	ldr	r1, [pc, #244]	; (8000878 <LCD_isbusy+0x194>)
 8000782:	483e      	ldr	r0, [pc, #248]	; (800087c <LCD_isbusy+0x198>)
 8000784:	f7ff fd57 	bl	8000236 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(LCD_PORT, RW_SWITCH, GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800078e:	483b      	ldr	r0, [pc, #236]	; (800087c <LCD_isbusy+0x198>)
 8000790:	f7ff fe08 	bl	80003a4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, RS_SWITCH, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079a:	4838      	ldr	r0, [pc, #224]	; (800087c <LCD_isbusy+0x198>)
 800079c:	f7ff fe02 	bl	80003a4 <MCAL_GPIO_WritePin>

	LCD_KICK();
 80007a0:	f7ff ff82 	bl	80006a8 <LCD_KICK>



	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 80007a4:	4b34      	ldr	r3, [pc, #208]	; (8000878 <LCD_isbusy+0x194>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80007aa:	4b33      	ldr	r3, [pc, #204]	; (8000878 <LCD_isbusy+0x194>)
 80007ac:	2204      	movs	r2, #4
 80007ae:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 80007b0:	4b31      	ldr	r3, [pc, #196]	; (8000878 <LCD_isbusy+0x194>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 80007b6:	4930      	ldr	r1, [pc, #192]	; (8000878 <LCD_isbusy+0x194>)
 80007b8:	4830      	ldr	r0, [pc, #192]	; (800087c <LCD_isbusy+0x198>)
 80007ba:	f7ff fd3c 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 80007be:	4b2e      	ldr	r3, [pc, #184]	; (8000878 <LCD_isbusy+0x194>)
 80007c0:	2202      	movs	r2, #2
 80007c2:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80007c4:	4b2c      	ldr	r3, [pc, #176]	; (8000878 <LCD_isbusy+0x194>)
 80007c6:	2204      	movs	r2, #4
 80007c8:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 80007ca:	4b2b      	ldr	r3, [pc, #172]	; (8000878 <LCD_isbusy+0x194>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 80007d0:	4929      	ldr	r1, [pc, #164]	; (8000878 <LCD_isbusy+0x194>)
 80007d2:	482a      	ldr	r0, [pc, #168]	; (800087c <LCD_isbusy+0x198>)
 80007d4:	f7ff fd2f 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 80007d8:	4b27      	ldr	r3, [pc, #156]	; (8000878 <LCD_isbusy+0x194>)
 80007da:	2204      	movs	r2, #4
 80007dc:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80007de:	4b26      	ldr	r3, [pc, #152]	; (8000878 <LCD_isbusy+0x194>)
 80007e0:	2204      	movs	r2, #4
 80007e2:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 80007e4:	4b24      	ldr	r3, [pc, #144]	; (8000878 <LCD_isbusy+0x194>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 80007ea:	4923      	ldr	r1, [pc, #140]	; (8000878 <LCD_isbusy+0x194>)
 80007ec:	4823      	ldr	r0, [pc, #140]	; (800087c <LCD_isbusy+0x198>)
 80007ee:	f7ff fd22 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 80007f2:	4b21      	ldr	r3, [pc, #132]	; (8000878 <LCD_isbusy+0x194>)
 80007f4:	2208      	movs	r2, #8
 80007f6:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80007f8:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <LCD_isbusy+0x194>)
 80007fa:	2204      	movs	r2, #4
 80007fc:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 80007fe:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <LCD_isbusy+0x194>)
 8000800:	2201      	movs	r2, #1
 8000802:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000804:	491c      	ldr	r1, [pc, #112]	; (8000878 <LCD_isbusy+0x194>)
 8000806:	481d      	ldr	r0, [pc, #116]	; (800087c <LCD_isbusy+0x198>)
 8000808:	f7ff fd15 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 800080c:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <LCD_isbusy+0x194>)
 800080e:	2210      	movs	r2, #16
 8000810:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000812:	4b19      	ldr	r3, [pc, #100]	; (8000878 <LCD_isbusy+0x194>)
 8000814:	2204      	movs	r2, #4
 8000816:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000818:	4b17      	ldr	r3, [pc, #92]	; (8000878 <LCD_isbusy+0x194>)
 800081a:	2201      	movs	r2, #1
 800081c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 800081e:	4916      	ldr	r1, [pc, #88]	; (8000878 <LCD_isbusy+0x194>)
 8000820:	4816      	ldr	r0, [pc, #88]	; (800087c <LCD_isbusy+0x198>)
 8000822:	f7ff fd08 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <LCD_isbusy+0x194>)
 8000828:	2220      	movs	r2, #32
 800082a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <LCD_isbusy+0x194>)
 800082e:	2204      	movs	r2, #4
 8000830:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <LCD_isbusy+0x194>)
 8000834:	2201      	movs	r2, #1
 8000836:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000838:	490f      	ldr	r1, [pc, #60]	; (8000878 <LCD_isbusy+0x194>)
 800083a:	4810      	ldr	r0, [pc, #64]	; (800087c <LCD_isbusy+0x198>)
 800083c:	f7ff fcfb 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000840:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <LCD_isbusy+0x194>)
 8000842:	2240      	movs	r2, #64	; 0x40
 8000844:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <LCD_isbusy+0x194>)
 8000848:	2204      	movs	r2, #4
 800084a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 800084c:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <LCD_isbusy+0x194>)
 800084e:	2201      	movs	r2, #1
 8000850:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000852:	4909      	ldr	r1, [pc, #36]	; (8000878 <LCD_isbusy+0x194>)
 8000854:	4809      	ldr	r0, [pc, #36]	; (800087c <LCD_isbusy+0x198>)
 8000856:	f7ff fcee 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 800085a:	4b07      	ldr	r3, [pc, #28]	; (8000878 <LCD_isbusy+0x194>)
 800085c:	2280      	movs	r2, #128	; 0x80
 800085e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <LCD_isbusy+0x194>)
 8000862:	2204      	movs	r2, #4
 8000864:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000866:	4b04      	ldr	r3, [pc, #16]	; (8000878 <LCD_isbusy+0x194>)
 8000868:	2201      	movs	r2, #1
 800086a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 800086c:	4902      	ldr	r1, [pc, #8]	; (8000878 <LCD_isbusy+0x194>)
 800086e:	4803      	ldr	r0, [pc, #12]	; (800087c <LCD_isbusy+0x198>)
 8000870:	f7ff fce1 	bl	8000236 <MCAL_GPIO_Init>


}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	2000003c 	.word	0x2000003c
 800087c:	40010800 	.word	0x40010800

08000880 <LCD_INIT>:

void LCD_INIT(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	wait_ms(20);
 8000884:	2014      	movs	r0, #20
 8000886:	f7ff fef3 	bl	8000670 <wait_ms>

	PinCfg.GPIO_PinNumber = RS_SWITCH;
 800088a:	4b5c      	ldr	r3, [pc, #368]	; (80009fc <LCD_INIT+0x17c>)
 800088c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000890:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000892:	4b5a      	ldr	r3, [pc, #360]	; (80009fc <LCD_INIT+0x17c>)
 8000894:	2204      	movs	r2, #4
 8000896:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 8000898:	4b58      	ldr	r3, [pc, #352]	; (80009fc <LCD_INIT+0x17c>)
 800089a:	2201      	movs	r2, #1
 800089c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 800089e:	4957      	ldr	r1, [pc, #348]	; (80009fc <LCD_INIT+0x17c>)
 80008a0:	4857      	ldr	r0, [pc, #348]	; (8000a00 <LCD_INIT+0x180>)
 80008a2:	f7ff fcc8 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_SWITCH;
 80008a6:	4b55      	ldr	r3, [pc, #340]	; (80009fc <LCD_INIT+0x17c>)
 80008a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ac:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80008ae:	4b53      	ldr	r3, [pc, #332]	; (80009fc <LCD_INIT+0x17c>)
 80008b0:	2204      	movs	r2, #4
 80008b2:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 80008b4:	4b51      	ldr	r3, [pc, #324]	; (80009fc <LCD_INIT+0x17c>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 80008ba:	4950      	ldr	r1, [pc, #320]	; (80009fc <LCD_INIT+0x17c>)
 80008bc:	4850      	ldr	r0, [pc, #320]	; (8000a00 <LCD_INIT+0x180>)
 80008be:	f7ff fcba 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = EN_SWITCH;
 80008c2:	4b4e      	ldr	r3, [pc, #312]	; (80009fc <LCD_INIT+0x17c>)
 80008c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008c8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80008ca:	4b4c      	ldr	r3, [pc, #304]	; (80009fc <LCD_INIT+0x17c>)
 80008cc:	2204      	movs	r2, #4
 80008ce:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 80008d0:	4b4a      	ldr	r3, [pc, #296]	; (80009fc <LCD_INIT+0x17c>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 80008d6:	4949      	ldr	r1, [pc, #292]	; (80009fc <LCD_INIT+0x17c>)
 80008d8:	4849      	ldr	r0, [pc, #292]	; (8000a00 <LCD_INIT+0x180>)
 80008da:	f7ff fcac 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 80008de:	4b47      	ldr	r3, [pc, #284]	; (80009fc <LCD_INIT+0x17c>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80008e4:	4b45      	ldr	r3, [pc, #276]	; (80009fc <LCD_INIT+0x17c>)
 80008e6:	2204      	movs	r2, #4
 80008e8:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 80008ea:	4b44      	ldr	r3, [pc, #272]	; (80009fc <LCD_INIT+0x17c>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 80008f0:	4942      	ldr	r1, [pc, #264]	; (80009fc <LCD_INIT+0x17c>)
 80008f2:	4843      	ldr	r0, [pc, #268]	; (8000a00 <LCD_INIT+0x180>)
 80008f4:	f7ff fc9f 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 80008f8:	4b40      	ldr	r3, [pc, #256]	; (80009fc <LCD_INIT+0x17c>)
 80008fa:	2202      	movs	r2, #2
 80008fc:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80008fe:	4b3f      	ldr	r3, [pc, #252]	; (80009fc <LCD_INIT+0x17c>)
 8000900:	2204      	movs	r2, #4
 8000902:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000904:	4b3d      	ldr	r3, [pc, #244]	; (80009fc <LCD_INIT+0x17c>)
 8000906:	2201      	movs	r2, #1
 8000908:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 800090a:	493c      	ldr	r1, [pc, #240]	; (80009fc <LCD_INIT+0x17c>)
 800090c:	483c      	ldr	r0, [pc, #240]	; (8000a00 <LCD_INIT+0x180>)
 800090e:	f7ff fc92 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000912:	4b3a      	ldr	r3, [pc, #232]	; (80009fc <LCD_INIT+0x17c>)
 8000914:	2204      	movs	r2, #4
 8000916:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000918:	4b38      	ldr	r3, [pc, #224]	; (80009fc <LCD_INIT+0x17c>)
 800091a:	2204      	movs	r2, #4
 800091c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 800091e:	4b37      	ldr	r3, [pc, #220]	; (80009fc <LCD_INIT+0x17c>)
 8000920:	2201      	movs	r2, #1
 8000922:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000924:	4935      	ldr	r1, [pc, #212]	; (80009fc <LCD_INIT+0x17c>)
 8000926:	4836      	ldr	r0, [pc, #216]	; (8000a00 <LCD_INIT+0x180>)
 8000928:	f7ff fc85 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 800092c:	4b33      	ldr	r3, [pc, #204]	; (80009fc <LCD_INIT+0x17c>)
 800092e:	2208      	movs	r2, #8
 8000930:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000932:	4b32      	ldr	r3, [pc, #200]	; (80009fc <LCD_INIT+0x17c>)
 8000934:	2204      	movs	r2, #4
 8000936:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000938:	4b30      	ldr	r3, [pc, #192]	; (80009fc <LCD_INIT+0x17c>)
 800093a:	2201      	movs	r2, #1
 800093c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 800093e:	492f      	ldr	r1, [pc, #188]	; (80009fc <LCD_INIT+0x17c>)
 8000940:	482f      	ldr	r0, [pc, #188]	; (8000a00 <LCD_INIT+0x180>)
 8000942:	f7ff fc78 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000946:	4b2d      	ldr	r3, [pc, #180]	; (80009fc <LCD_INIT+0x17c>)
 8000948:	2210      	movs	r2, #16
 800094a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800094c:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <LCD_INIT+0x17c>)
 800094e:	2204      	movs	r2, #4
 8000950:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000952:	4b2a      	ldr	r3, [pc, #168]	; (80009fc <LCD_INIT+0x17c>)
 8000954:	2201      	movs	r2, #1
 8000956:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000958:	4928      	ldr	r1, [pc, #160]	; (80009fc <LCD_INIT+0x17c>)
 800095a:	4829      	ldr	r0, [pc, #164]	; (8000a00 <LCD_INIT+0x180>)
 800095c:	f7ff fc6b 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000960:	4b26      	ldr	r3, [pc, #152]	; (80009fc <LCD_INIT+0x17c>)
 8000962:	2220      	movs	r2, #32
 8000964:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000966:	4b25      	ldr	r3, [pc, #148]	; (80009fc <LCD_INIT+0x17c>)
 8000968:	2204      	movs	r2, #4
 800096a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 800096c:	4b23      	ldr	r3, [pc, #140]	; (80009fc <LCD_INIT+0x17c>)
 800096e:	2201      	movs	r2, #1
 8000970:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000972:	4922      	ldr	r1, [pc, #136]	; (80009fc <LCD_INIT+0x17c>)
 8000974:	4822      	ldr	r0, [pc, #136]	; (8000a00 <LCD_INIT+0x180>)
 8000976:	f7ff fc5e 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 800097a:	4b20      	ldr	r3, [pc, #128]	; (80009fc <LCD_INIT+0x17c>)
 800097c:	2240      	movs	r2, #64	; 0x40
 800097e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000980:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <LCD_INIT+0x17c>)
 8000982:	2204      	movs	r2, #4
 8000984:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000986:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <LCD_INIT+0x17c>)
 8000988:	2201      	movs	r2, #1
 800098a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 800098c:	491b      	ldr	r1, [pc, #108]	; (80009fc <LCD_INIT+0x17c>)
 800098e:	481c      	ldr	r0, [pc, #112]	; (8000a00 <LCD_INIT+0x180>)
 8000990:	f7ff fc51 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000994:	4b19      	ldr	r3, [pc, #100]	; (80009fc <LCD_INIT+0x17c>)
 8000996:	2280      	movs	r2, #128	; 0x80
 8000998:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <LCD_INIT+0x17c>)
 800099c:	2204      	movs	r2, #4
 800099e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <LCD_INIT+0x17c>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 80009a6:	4915      	ldr	r1, [pc, #84]	; (80009fc <LCD_INIT+0x17c>)
 80009a8:	4815      	ldr	r0, [pc, #84]	; (8000a00 <LCD_INIT+0x180>)
 80009aa:	f7ff fc44 	bl	8000236 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b4:	4812      	ldr	r0, [pc, #72]	; (8000a00 <LCD_INIT+0x180>)
 80009b6:	f7ff fcf5 	bl	80003a4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c0:	480f      	ldr	r0, [pc, #60]	; (8000a00 <LCD_INIT+0x180>)
 80009c2:	f7ff fcef 	bl	80003a4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009cc:	480c      	ldr	r0, [pc, #48]	; (8000a00 <LCD_INIT+0x180>)
 80009ce:	f7ff fce9 	bl	80003a4 <MCAL_GPIO_WritePin>

	wait_ms(15);
 80009d2:	200f      	movs	r0, #15
 80009d4:	f7ff fe4c 	bl	8000670 <wait_ms>
	LCD_isbusy();
 80009d8:	f7ff fe84 	bl	80006e4 <LCD_isbusy>
	LCD_CLEAR();
 80009dc:	f7ff fe7a 	bl	80006d4 <LCD_CLEAR>
	LCD_WR_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 80009e0:	2038      	movs	r0, #56	; 0x38
 80009e2:	f000 f80f 	bl	8000a04 <LCD_WR_COMMAND>
	LCD_WR_COMMAND(LCD_ENTRY_MODE);
 80009e6:	2006      	movs	r0, #6
 80009e8:	f000 f80c 	bl	8000a04 <LCD_WR_COMMAND>
	LCD_WR_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 80009ec:	2080      	movs	r0, #128	; 0x80
 80009ee:	f000 f809 	bl	8000a04 <LCD_WR_COMMAND>
	LCD_WR_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 80009f2:	200f      	movs	r0, #15
 80009f4:	f000 f806 	bl	8000a04 <LCD_WR_COMMAND>

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	2000003c 	.word	0x2000003c
 8000a00:	40010800 	.word	0x40010800

08000a04 <LCD_WR_COMMAND>:
void LCD_WR_COMMAND(unsigned char COMMAND)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
	LCD_isbusy();
 8000a0e:	f7ff fe69 	bl	80006e4 <LCD_isbusy>
	MCAL_GPIO_WritePort(LCD_PORT, COMMAND);
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	4619      	mov	r1, r3
 8000a18:	480b      	ldr	r0, [pc, #44]	; (8000a48 <LCD_WR_COMMAND+0x44>)
 8000a1a:	f7ff fcda 	bl	80003d2 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_PORT, RW_SWITCH, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a24:	4808      	ldr	r0, [pc, #32]	; (8000a48 <LCD_WR_COMMAND+0x44>)
 8000a26:	f7ff fcbd 	bl	80003a4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, RS_SWITCH, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a30:	4805      	ldr	r0, [pc, #20]	; (8000a48 <LCD_WR_COMMAND+0x44>)
 8000a32:	f7ff fcb7 	bl	80003a4 <MCAL_GPIO_WritePin>
	wait_ms(1);
 8000a36:	2001      	movs	r0, #1
 8000a38:	f7ff fe1a 	bl	8000670 <wait_ms>
	LCD_KICK();
 8000a3c:	f7ff fe34 	bl	80006a8 <LCD_KICK>


}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40010800 	.word	0x40010800

08000a4c <LCD_WR_CHAR>:
void LCD_WR_CHAR(unsigned char DATA)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
	LCD_isbusy();
 8000a56:	f7ff fe45 	bl	80006e4 <LCD_isbusy>
	MCAL_GPIO_WritePort(LCD_PORT, DATA);
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	4619      	mov	r1, r3
 8000a60:	480b      	ldr	r0, [pc, #44]	; (8000a90 <LCD_WR_CHAR+0x44>)
 8000a62:	f7ff fcb6 	bl	80003d2 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_PORT, RW_SWITCH, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a6c:	4808      	ldr	r0, [pc, #32]	; (8000a90 <LCD_WR_CHAR+0x44>)
 8000a6e:	f7ff fc99 	bl	80003a4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, RS_SWITCH, GPIO_PIN_SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <LCD_WR_CHAR+0x44>)
 8000a7a:	f7ff fc93 	bl	80003a4 <MCAL_GPIO_WritePin>
	wait_ms(1);
 8000a7e:	2001      	movs	r0, #1
 8000a80:	f7ff fdf6 	bl	8000670 <wait_ms>
	LCD_KICK();
 8000a84:	f7ff fe10 	bl	80006a8 <LCD_KICK>

}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40010800 	.word	0x40010800

08000a94 <LCD_LINE>:
void LCD_LINE(int LINE, int POSITION)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
	if(LINE==1)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d10d      	bne.n	8000ac0 <LCD_LINE+0x2c>
	{
		if(POSITION <16 && POSITION >=0)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	2b0f      	cmp	r3, #15
 8000aa8:	dc1a      	bgt.n	8000ae0 <LCD_LINE+0x4c>
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	db17      	blt.n	8000ae0 <LCD_LINE+0x4c>
			LCD_WR_COMMAND(LCD_BEGIN_AT_FIRST_ROW+POSITION);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	3b80      	subs	r3, #128	; 0x80
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ffa3 	bl	8000a04 <LCD_WR_COMMAND>
	}
	else if (LINE==2)
		if(POSITION <16 && POSITION >=0)
			LCD_WR_COMMAND(LCD_BEGIN_AT_SECOND_ROW+POSITION);
}
 8000abe:	e00f      	b.n	8000ae0 <LCD_LINE+0x4c>
	else if (LINE==2)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	d10c      	bne.n	8000ae0 <LCD_LINE+0x4c>
		if(POSITION <16 && POSITION >=0)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	2b0f      	cmp	r3, #15
 8000aca:	dc09      	bgt.n	8000ae0 <LCD_LINE+0x4c>
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	db06      	blt.n	8000ae0 <LCD_LINE+0x4c>
			LCD_WR_COMMAND(LCD_BEGIN_AT_SECOND_ROW+POSITION);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	3b40      	subs	r3, #64	; 0x40
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff ff92 	bl	8000a04 <LCD_WR_COMMAND>
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <LCD_WR_STR>:
void LCD_WR_STR(char* data)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	volatile int count = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]

	while (*data > 0)
 8000af4:	e01c      	b.n	8000b30 <LCD_WR_STR+0x48>
	{
		LCD_WR_CHAR(*data++);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	1c5a      	adds	r2, r3, #1
 8000afa:	607a      	str	r2, [r7, #4]
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff ffa4 	bl	8000a4c <LCD_WR_CHAR>
		count++;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	3301      	adds	r3, #1
 8000b08:	60fb      	str	r3, [r7, #12]
		if(count == 16)
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	2b10      	cmp	r3, #16
 8000b0e:	d104      	bne.n	8000b1a <LCD_WR_STR+0x32>
		{
			LCD_LINE(2,0);
 8000b10:	2100      	movs	r1, #0
 8000b12:	2002      	movs	r0, #2
 8000b14:	f7ff ffbe 	bl	8000a94 <LCD_LINE>
 8000b18:	e00a      	b.n	8000b30 <LCD_WR_STR+0x48>
		}
		else if (count == 32)
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	2b20      	cmp	r3, #32
 8000b1e:	d107      	bne.n	8000b30 <LCD_WR_STR+0x48>
		{
			LCD_CLEAR();
 8000b20:	f7ff fdd8 	bl	80006d4 <LCD_CLEAR>
			LCD_LINE(1,0);
 8000b24:	2100      	movs	r1, #0
 8000b26:	2001      	movs	r0, #1
 8000b28:	f7ff ffb4 	bl	8000a94 <LCD_LINE>
			count=0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
	while (*data > 0)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1de      	bne.n	8000af6 <LCD_WR_STR+0xe>
		}
	}

}
 8000b38:	bf00      	nop
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <clock_init>:
#define NINE 0x10



void clock_init()
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
	//Enable GPIO A clock
	RCC_GPIOA_CLK_EN();
 8000b44:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <clock_init+0x24>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	4a06      	ldr	r2, [pc, #24]	; (8000b64 <clock_init+0x24>)
 8000b4a:	f043 0304 	orr.w	r3, r3, #4
 8000b4e:	6193      	str	r3, [r2, #24]
	//Enable GPIO B clock
	RCC_GPIOB_CLK_EN();
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <clock_init+0x24>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a03      	ldr	r2, [pc, #12]	; (8000b64 <clock_init+0x24>)
 8000b56:	f043 0308 	orr.w	r3, r3, #8
 8000b5a:	6193      	str	r3, [r2, #24]

}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr
 8000b64:	40021000 	.word	0x40021000

08000b68 <GPIO_init>:

void GPIO_init()
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0

	GPIO_PinConfig_t PinCfg;

	//INPUT
	//PORT A1 Floating Input
	PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8000b6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b72:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000b74:	2304      	movs	r3, #4
 8000b76:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4827      	ldr	r0, [pc, #156]	; (8000c20 <GPIO_init+0xb8>)
 8000b82:	f7ff fb58 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b8a:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 8000b90:	2301      	movs	r3, #1
 8000b92:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	4619      	mov	r1, r3
 8000b98:	4821      	ldr	r0, [pc, #132]	; (8000c20 <GPIO_init+0xb8>)
 8000b9a:	f7ff fb4c 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000b9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ba2:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	4619      	mov	r1, r3
 8000bb0:	481b      	ldr	r0, [pc, #108]	; (8000c20 <GPIO_init+0xb8>)
 8000bb2:	f7ff fb40 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 8000bb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bba:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4815      	ldr	r0, [pc, #84]	; (8000c20 <GPIO_init+0xb8>)
 8000bca:	f7ff fb34 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 8000bce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd2:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	4619      	mov	r1, r3
 8000be0:	480f      	ldr	r0, [pc, #60]	; (8000c20 <GPIO_init+0xb8>)
 8000be2:	f7ff fb28 	bl	8000236 <MCAL_GPIO_Init>

	//PA13 input HighZ Floating input (reset state)
	PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 8000be6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bea:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000bec:	2304      	movs	r3, #4
 8000bee:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4809      	ldr	r0, [pc, #36]	; (8000c20 <GPIO_init+0xb8>)
 8000bfa:	f7ff fb1c 	bl	8000236 <MCAL_GPIO_Init>

	//PB13 (output PUSH pull Mode)
	PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 8000bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c02:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000c04:	2304      	movs	r3, #4
 8000c06:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4803      	ldr	r0, [pc, #12]	; (8000c20 <GPIO_init+0xb8>)
 8000c12:	f7ff fb10 	bl	8000236 <MCAL_GPIO_Init>



}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40010c00 	.word	0x40010c00

08000c24 <main>:



int main(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0
	clock_init();
 8000c2a:	f7ff ff89 	bl	8000b40 <clock_init>
	LCD_INIT();
 8000c2e:	f7ff fe27 	bl	8000880 <LCD_INIT>
	LCD_WR_STR("HEY...");
 8000c32:	483a      	ldr	r0, [pc, #232]	; (8000d1c <main+0xf8>)
 8000c34:	f7ff ff58 	bl	8000ae8 <LCD_WR_STR>
	wait_ms(300);
 8000c38:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c3c:	f7ff fd18 	bl	8000670 <wait_ms>
	LCD_CLEAR();
 8000c40:	f7ff fd48 	bl	80006d4 <LCD_CLEAR>
	GPIO_init();
 8000c44:	f7ff ff90 	bl	8000b68 <GPIO_init>
	unsigned char LCD_DISPLAY [11] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'};
 8000c48:	4a35      	ldr	r2, [pc, #212]	; (8000d20 <main+0xfc>)
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c50:	c303      	stmia	r3!, {r0, r1}
 8000c52:	801a      	strh	r2, [r3, #0]
 8000c54:	3302      	adds	r3, #2
 8000c56:	0c12      	lsrs	r2, r2, #16
 8000c58:	701a      	strb	r2, [r3, #0]
	unsigned char DISPLAY [11] = {ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, ZERO};
 8000c5a:	4a32      	ldr	r2, [pc, #200]	; (8000d24 <main+0x100>)
 8000c5c:	f107 0308 	add.w	r3, r7, #8
 8000c60:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c62:	c303      	stmia	r3!, {r0, r1}
 8000c64:	801a      	strh	r2, [r3, #0]
 8000c66:	3302      	adds	r3, #2
 8000c68:	0c12      	lsrs	r2, r2, #16
 8000c6a:	701a      	strb	r2, [r3, #0]
	for (unsigned char i = 0; i < 11; i++) {
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	77fb      	strb	r3, [r7, #31]
 8000c70:	e01c      	b.n	8000cac <main+0x88>
		LCD_WR_CHAR(LCD_DISPLAY[i]);
 8000c72:	7ffb      	ldrb	r3, [r7, #31]
 8000c74:	f107 0220 	add.w	r2, r7, #32
 8000c78:	4413      	add	r3, r2
 8000c7a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fee4 	bl	8000a4c <LCD_WR_CHAR>
		MCAL_GPIO_WritePort(GPIOB, DISPLAY[i] << 9);
 8000c84:	7ffb      	ldrb	r3, [r7, #31]
 8000c86:	f107 0220 	add.w	r2, r7, #32
 8000c8a:	4413      	add	r3, r2
 8000c8c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	025b      	lsls	r3, r3, #9
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	4619      	mov	r1, r3
 8000c98:	4823      	ldr	r0, [pc, #140]	; (8000d28 <main+0x104>)
 8000c9a:	f7ff fb9a 	bl	80003d2 <MCAL_GPIO_WritePort>
		wait_ms(1000);
 8000c9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca2:	f7ff fce5 	bl	8000670 <wait_ms>
	for (unsigned char i = 0; i < 11; i++) {
 8000ca6:	7ffb      	ldrb	r3, [r7, #31]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	77fb      	strb	r3, [r7, #31]
 8000cac:	7ffb      	ldrb	r3, [r7, #31]
 8000cae:	2b0a      	cmp	r3, #10
 8000cb0:	d9df      	bls.n	8000c72 <main+0x4e>
	}
	LCD_CLEAR();
 8000cb2:	f7ff fd0f 	bl	80006d4 <LCD_CLEAR>
	KEYPAD_init();
 8000cb6:	f7ff fb9b 	bl	80003f0 <KEYPAD_init>
	LCD_WR_STR("Keypad is ready");
 8000cba:	481c      	ldr	r0, [pc, #112]	; (8000d2c <main+0x108>)
 8000cbc:	f7ff ff14 	bl	8000ae8 <LCD_WR_STR>
	wait_ms(50);
 8000cc0:	2032      	movs	r0, #50	; 0x32
 8000cc2:	f7ff fcd5 	bl	8000670 <wait_ms>
	LCD_CLEAR();
 8000cc6:	f7ff fd05 	bl	80006d4 <LCD_CLEAR>

    volatile char KEY;
    volatile int count=0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	603b      	str	r3, [r7, #0]
	while(1)
	{
    	KEY=KEYPAD_CHAR();
 8000cce:	f7ff fc05 	bl	80004dc <KEYPAD_CHAR>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
    	switch(KEY)
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	2b21      	cmp	r3, #33	; 0x21
 8000cdc:	d002      	beq.n	8000ce4 <main+0xc0>
 8000cde:	2b4e      	cmp	r3, #78	; 0x4e
 8000ce0:	d019      	beq.n	8000d16 <main+0xf2>
 8000ce2:	e002      	b.n	8000cea <main+0xc6>
    	{
    	case'!':LCD_CLEAR();break;
 8000ce4:	f7ff fcf6 	bl	80006d4 <LCD_CLEAR>
 8000ce8:	e016      	b.n	8000d18 <main+0xf4>
    	case'N':break;
    	default:
    		if(count<16){
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	2b0f      	cmp	r3, #15
 8000cee:	dc08      	bgt.n	8000d02 <main+0xde>
    		LCD_WR_CHAR(KEY);
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fea9 	bl	8000a4c <LCD_WR_CHAR>
    		count++;
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	603b      	str	r3, [r7, #0]
    		{
    			count=0;
    			LCD_CLEAR();
    			LCD_WR_CHAR(KEY);
    		}
    		break;
 8000d00:	e00a      	b.n	8000d18 <main+0xf4>
    			count=0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
    			LCD_CLEAR();
 8000d06:	f7ff fce5 	bl	80006d4 <LCD_CLEAR>
    			LCD_WR_CHAR(KEY);
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fe9c 	bl	8000a4c <LCD_WR_CHAR>
    		break;
 8000d14:	e000      	b.n	8000d18 <main+0xf4>
    	case'N':break;
 8000d16:	bf00      	nop
    	KEY=KEYPAD_CHAR();
 8000d18:	e7d9      	b.n	8000cce <main+0xaa>
 8000d1a:	bf00      	nop
 8000d1c:	08000de4 	.word	0x08000de4
 8000d20:	08000dfc 	.word	0x08000dfc
 8000d24:	08000e08 	.word	0x08000e08
 8000d28:	40010c00 	.word	0x40010c00
 8000d2c:	08000dec 	.word	0x08000dec

08000d30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d30:	480d      	ldr	r0, [pc, #52]	; (8000d68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d32:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d34:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d38:	480c      	ldr	r0, [pc, #48]	; (8000d6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d3a:	490d      	ldr	r1, [pc, #52]	; (8000d70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d3c:	4a0d      	ldr	r2, [pc, #52]	; (8000d74 <LoopForever+0xe>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d40:	e002      	b.n	8000d48 <LoopCopyDataInit>

08000d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d46:	3304      	adds	r3, #4

08000d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d4c:	d3f9      	bcc.n	8000d42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d50:	4c0a      	ldr	r4, [pc, #40]	; (8000d7c <LoopForever+0x16>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d54:	e001      	b.n	8000d5a <LoopFillZerobss>

08000d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d58:	3204      	adds	r2, #4

08000d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d5c:	d3fb      	bcc.n	8000d56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d5e:	f000 f811 	bl	8000d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d62:	f7ff ff5f 	bl	8000c24 <main>

08000d66 <LoopForever>:

LoopForever:
    b LoopForever
 8000d66:	e7fe      	b.n	8000d66 <LoopForever>
  ldr   r0, =_estack
 8000d68:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d70:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000d74:	08000e1c 	.word	0x08000e1c
  ldr r2, =_sbss
 8000d78:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000d7c:	20000040 	.word	0x20000040

08000d80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC1_2_IRQHandler>
	...

08000d84 <__libc_init_array>:
 8000d84:	b570      	push	{r4, r5, r6, lr}
 8000d86:	2500      	movs	r5, #0
 8000d88:	4e0c      	ldr	r6, [pc, #48]	; (8000dbc <__libc_init_array+0x38>)
 8000d8a:	4c0d      	ldr	r4, [pc, #52]	; (8000dc0 <__libc_init_array+0x3c>)
 8000d8c:	1ba4      	subs	r4, r4, r6
 8000d8e:	10a4      	asrs	r4, r4, #2
 8000d90:	42a5      	cmp	r5, r4
 8000d92:	d109      	bne.n	8000da8 <__libc_init_array+0x24>
 8000d94:	f000 f81a 	bl	8000dcc <_init>
 8000d98:	2500      	movs	r5, #0
 8000d9a:	4e0a      	ldr	r6, [pc, #40]	; (8000dc4 <__libc_init_array+0x40>)
 8000d9c:	4c0a      	ldr	r4, [pc, #40]	; (8000dc8 <__libc_init_array+0x44>)
 8000d9e:	1ba4      	subs	r4, r4, r6
 8000da0:	10a4      	asrs	r4, r4, #2
 8000da2:	42a5      	cmp	r5, r4
 8000da4:	d105      	bne.n	8000db2 <__libc_init_array+0x2e>
 8000da6:	bd70      	pop	{r4, r5, r6, pc}
 8000da8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dac:	4798      	blx	r3
 8000dae:	3501      	adds	r5, #1
 8000db0:	e7ee      	b.n	8000d90 <__libc_init_array+0xc>
 8000db2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000db6:	4798      	blx	r3
 8000db8:	3501      	adds	r5, #1
 8000dba:	e7f2      	b.n	8000da2 <__libc_init_array+0x1e>
 8000dbc:	08000e14 	.word	0x08000e14
 8000dc0:	08000e14 	.word	0x08000e14
 8000dc4:	08000e14 	.word	0x08000e14
 8000dc8:	08000e18 	.word	0x08000e18

08000dcc <_init>:
 8000dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dce:	bf00      	nop
 8000dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dd2:	bc08      	pop	{r3}
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	4770      	bx	lr

08000dd8 <_fini>:
 8000dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dda:	bf00      	nop
 8000ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dde:	bc08      	pop	{r3}
 8000de0:	469e      	mov	lr, r3
 8000de2:	4770      	bx	lr
