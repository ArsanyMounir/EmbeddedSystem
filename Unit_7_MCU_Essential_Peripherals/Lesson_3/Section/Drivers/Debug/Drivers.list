
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000990  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000ac0  08000ac0  00010ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ad0  08000ad0  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000ad0  08000ad0  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ad0  08000ad0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ad0  08000ad0  00010ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ad4  08000ad4  00010ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000020  08000af8  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08000af8  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002f75  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000828  00000000  00000000  00022fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000768  00000000  00000000  000237e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000148  00000000  00000000  00023f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000100  00000000  00000000  00024098  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001fcd  00000000  00000000  00024198  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001a60  00000000  00000000  00026165  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007adf  00000000  00000000  00027bc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002f6a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003d8  00000000  00000000  0002f720  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000aa8 	.word	0x08000aa8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000aa8 	.word	0x08000aa8

08000170 <HAL_KEYPAD_Init>:

//========================================================
//			APIs Supported by "HAL KEYPAD DRIVER"
//========================================================
void HAL_KEYPAD_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0

	GPIO_PinConfig_t PinConfig;

	PinConfig.GPIO_PinNumber = R0;
 8000176:	2301      	movs	r3, #1
 8000178:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800017a:	2304      	movs	r3, #4
 800017c:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 800017e:	2301      	movs	r3, #1
 8000180:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinConfig);
 8000182:	1d3b      	adds	r3, r7, #4
 8000184:	4619      	mov	r1, r3
 8000186:	4828      	ldr	r0, [pc, #160]	; (8000228 <HAL_KEYPAD_Init+0xb8>)
 8000188:	f000 faf4 	bl	8000774 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = R1;
 800018c:	2302      	movs	r3, #2
 800018e:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000190:	2304      	movs	r3, #4
 8000192:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000194:	2301      	movs	r3, #1
 8000196:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinConfig);
 8000198:	1d3b      	adds	r3, r7, #4
 800019a:	4619      	mov	r1, r3
 800019c:	4822      	ldr	r0, [pc, #136]	; (8000228 <HAL_KEYPAD_Init+0xb8>)
 800019e:	f000 fae9 	bl	8000774 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = R2;
 80001a2:	2308      	movs	r3, #8
 80001a4:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001a6:	2304      	movs	r3, #4
 80001a8:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 80001aa:	2301      	movs	r3, #1
 80001ac:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinConfig);
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	4619      	mov	r1, r3
 80001b2:	481d      	ldr	r0, [pc, #116]	; (8000228 <HAL_KEYPAD_Init+0xb8>)
 80001b4:	f000 fade 	bl	8000774 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = R3;
 80001b8:	2310      	movs	r3, #16
 80001ba:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001bc:	2304      	movs	r3, #4
 80001be:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 80001c0:	2301      	movs	r3, #1
 80001c2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinConfig);
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	4619      	mov	r1, r3
 80001c8:	4817      	ldr	r0, [pc, #92]	; (8000228 <HAL_KEYPAD_Init+0xb8>)
 80001ca:	f000 fad3 	bl	8000774 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = C0;
 80001ce:	2320      	movs	r3, #32
 80001d0:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_PU;
 80001d2:	2302      	movs	r3, #2
 80001d4:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinConfig);
 80001d6:	1d3b      	adds	r3, r7, #4
 80001d8:	4619      	mov	r1, r3
 80001da:	4813      	ldr	r0, [pc, #76]	; (8000228 <HAL_KEYPAD_Init+0xb8>)
 80001dc:	f000 faca 	bl	8000774 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = C1;
 80001e0:	2340      	movs	r3, #64	; 0x40
 80001e2:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_PU;
 80001e4:	2302      	movs	r3, #2
 80001e6:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinConfig);
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	4619      	mov	r1, r3
 80001ec:	480e      	ldr	r0, [pc, #56]	; (8000228 <HAL_KEYPAD_Init+0xb8>)
 80001ee:	f000 fac1 	bl	8000774 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = C2;
 80001f2:	2380      	movs	r3, #128	; 0x80
 80001f4:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_PU;
 80001f6:	2302      	movs	r3, #2
 80001f8:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinConfig);
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4619      	mov	r1, r3
 80001fe:	480a      	ldr	r0, [pc, #40]	; (8000228 <HAL_KEYPAD_Init+0xb8>)
 8000200:	f000 fab8 	bl	8000774 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = C3;
 8000204:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000208:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_PU;
 800020a:	2302      	movs	r3, #2
 800020c:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinConfig);
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	4619      	mov	r1, r3
 8000212:	4805      	ldr	r0, [pc, #20]	; (8000228 <HAL_KEYPAD_Init+0xb8>)
 8000214:	f000 faae 	bl	8000774 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePort(KEYPAD_PORT, 0xFF);
 8000218:	21ff      	movs	r1, #255	; 0xff
 800021a:	4803      	ldr	r0, [pc, #12]	; (8000228 <HAL_KEYPAD_Init+0xb8>)
 800021c:	f000 fb6e 	bl	80008fc <MCAL_GPIO_WritePort>

}
 8000220:	bf00      	nop
 8000222:	3708      	adds	r7, #8
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	40010c00 	.word	0x40010c00

0800022c <HAL_KEYPAD_GetChar>:


char HAL_KEYPAD_GetChar(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
	volatile int i ,j;
	for (i=0;i<4;i++)
 8000232:	2300      	movs	r3, #0
 8000234:	607b      	str	r3, [r7, #4]
 8000236:	e0a8      	b.n	800038a <HAL_KEYPAD_GetChar+0x15e>
	{
		MCAL_GPIO_WritePin(KEYPAD_PORT, R0, GPIO_PIN_RESET);
 8000238:	2200      	movs	r2, #0
 800023a:	2101      	movs	r1, #1
 800023c:	4857      	ldr	r0, [pc, #348]	; (800039c <HAL_KEYPAD_GetChar+0x170>)
 800023e:	f000 fb46 	bl	80008ce <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, R1, GPIO_PIN_RESET);
 8000242:	2200      	movs	r2, #0
 8000244:	2102      	movs	r1, #2
 8000246:	4855      	ldr	r0, [pc, #340]	; (800039c <HAL_KEYPAD_GetChar+0x170>)
 8000248:	f000 fb41 	bl	80008ce <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, R2, GPIO_PIN_RESET);
 800024c:	2200      	movs	r2, #0
 800024e:	2108      	movs	r1, #8
 8000250:	4852      	ldr	r0, [pc, #328]	; (800039c <HAL_KEYPAD_GetChar+0x170>)
 8000252:	f000 fb3c 	bl	80008ce <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, R3, GPIO_PIN_RESET);
 8000256:	2200      	movs	r2, #0
 8000258:	2110      	movs	r1, #16
 800025a:	4850      	ldr	r0, [pc, #320]	; (800039c <HAL_KEYPAD_GetChar+0x170>)
 800025c:	f000 fb37 	bl	80008ce <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_Rows[i], GPIO_PIN_SET);
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	4a4f      	ldr	r2, [pc, #316]	; (80003a0 <HAL_KEYPAD_GetChar+0x174>)
 8000264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000268:	b29b      	uxth	r3, r3
 800026a:	2201      	movs	r2, #1
 800026c:	4619      	mov	r1, r3
 800026e:	484b      	ldr	r0, [pc, #300]	; (800039c <HAL_KEYPAD_GetChar+0x170>)
 8000270:	f000 fb2d 	bl	80008ce <MCAL_GPIO_WritePin>
		for(j=0;j<4;j++)
 8000274:	2300      	movs	r3, #0
 8000276:	603b      	str	r3, [r7, #0]
 8000278:	e080      	b.n	800037c <HAL_KEYPAD_GetChar+0x150>
		{
			if(MCAL_GPIO_ReadPin(KEYPAD_PORT, KEYPAD_Cols[j]))
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	4a49      	ldr	r2, [pc, #292]	; (80003a4 <HAL_KEYPAD_GetChar+0x178>)
 800027e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000282:	b29b      	uxth	r3, r3
 8000284:	4619      	mov	r1, r3
 8000286:	4845      	ldr	r0, [pc, #276]	; (800039c <HAL_KEYPAD_GetChar+0x170>)
 8000288:	f000 fb0a 	bl	80008a0 <MCAL_GPIO_ReadPin>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d071      	beq.n	8000376 <HAL_KEYPAD_GetChar+0x14a>
			{
				while(MCAL_GPIO_ReadPin(KEYPAD_PORT, KEYPAD_Cols[j]));
 8000292:	bf00      	nop
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	4a43      	ldr	r2, [pc, #268]	; (80003a4 <HAL_KEYPAD_GetChar+0x178>)
 8000298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800029c:	b29b      	uxth	r3, r3
 800029e:	4619      	mov	r1, r3
 80002a0:	483e      	ldr	r0, [pc, #248]	; (800039c <HAL_KEYPAD_GetChar+0x170>)
 80002a2:	f000 fafd 	bl	80008a0 <MCAL_GPIO_ReadPin>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d1f3      	bne.n	8000294 <HAL_KEYPAD_GetChar+0x68>
				switch(i)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b03      	cmp	r3, #3
 80002b0:	d861      	bhi.n	8000376 <HAL_KEYPAD_GetChar+0x14a>
 80002b2:	a201      	add	r2, pc, #4	; (adr r2, 80002b8 <HAL_KEYPAD_GetChar+0x8c>)
 80002b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002b8:	080002c9 	.word	0x080002c9
 80002bc:	080002f1 	.word	0x080002f1
 80002c0:	08000319 	.word	0x08000319
 80002c4:	08000341 	.word	0x08000341
				{
				case 0:

					if(j==0){return '7';}
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d101      	bne.n	80002d2 <HAL_KEYPAD_GetChar+0xa6>
 80002ce:	2337      	movs	r3, #55	; 0x37
 80002d0:	e060      	b.n	8000394 <HAL_KEYPAD_GetChar+0x168>
					else if (j==1) {return '8';}
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d101      	bne.n	80002dc <HAL_KEYPAD_GetChar+0xb0>
 80002d8:	2338      	movs	r3, #56	; 0x38
 80002da:	e05b      	b.n	8000394 <HAL_KEYPAD_GetChar+0x168>
					else if (j==2) {return '9';}
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	2b02      	cmp	r3, #2
 80002e0:	d101      	bne.n	80002e6 <HAL_KEYPAD_GetChar+0xba>
 80002e2:	2339      	movs	r3, #57	; 0x39
 80002e4:	e056      	b.n	8000394 <HAL_KEYPAD_GetChar+0x168>
					else if (j==3) {return '/';}
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	2b03      	cmp	r3, #3
 80002ea:	d13d      	bne.n	8000368 <HAL_KEYPAD_GetChar+0x13c>
 80002ec:	232f      	movs	r3, #47	; 0x2f
 80002ee:	e051      	b.n	8000394 <HAL_KEYPAD_GetChar+0x168>
					break;

				case 1:

					if(j==0){return '4';}
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d101      	bne.n	80002fa <HAL_KEYPAD_GetChar+0xce>
 80002f6:	2334      	movs	r3, #52	; 0x34
 80002f8:	e04c      	b.n	8000394 <HAL_KEYPAD_GetChar+0x168>
					else if (j==1) {return '5';}
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d101      	bne.n	8000304 <HAL_KEYPAD_GetChar+0xd8>
 8000300:	2335      	movs	r3, #53	; 0x35
 8000302:	e047      	b.n	8000394 <HAL_KEYPAD_GetChar+0x168>
					else if (j==2) {return '6';}
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	2b02      	cmp	r3, #2
 8000308:	d101      	bne.n	800030e <HAL_KEYPAD_GetChar+0xe2>
 800030a:	2336      	movs	r3, #54	; 0x36
 800030c:	e042      	b.n	8000394 <HAL_KEYPAD_GetChar+0x168>
					else if (j==3) {return '*';}
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	2b03      	cmp	r3, #3
 8000312:	d12b      	bne.n	800036c <HAL_KEYPAD_GetChar+0x140>
 8000314:	232a      	movs	r3, #42	; 0x2a
 8000316:	e03d      	b.n	8000394 <HAL_KEYPAD_GetChar+0x168>
					break;

				case 2:

					if(j==0){return '1';}
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d101      	bne.n	8000322 <HAL_KEYPAD_GetChar+0xf6>
 800031e:	2331      	movs	r3, #49	; 0x31
 8000320:	e038      	b.n	8000394 <HAL_KEYPAD_GetChar+0x168>
					else if (j==1) {return '2';}
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d101      	bne.n	800032c <HAL_KEYPAD_GetChar+0x100>
 8000328:	2332      	movs	r3, #50	; 0x32
 800032a:	e033      	b.n	8000394 <HAL_KEYPAD_GetChar+0x168>
					else if (j==2) {return '3';}
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	2b02      	cmp	r3, #2
 8000330:	d101      	bne.n	8000336 <HAL_KEYPAD_GetChar+0x10a>
 8000332:	2333      	movs	r3, #51	; 0x33
 8000334:	e02e      	b.n	8000394 <HAL_KEYPAD_GetChar+0x168>
					else if (j==3) {return '-';}
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	2b03      	cmp	r3, #3
 800033a:	d119      	bne.n	8000370 <HAL_KEYPAD_GetChar+0x144>
 800033c:	232d      	movs	r3, #45	; 0x2d
 800033e:	e029      	b.n	8000394 <HAL_KEYPAD_GetChar+0x168>
					break;

				case 3:

					if(j==0){return '!';}
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d101      	bne.n	800034a <HAL_KEYPAD_GetChar+0x11e>
 8000346:	2321      	movs	r3, #33	; 0x21
 8000348:	e024      	b.n	8000394 <HAL_KEYPAD_GetChar+0x168>
					else if (j==1) {return '0';}
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	2b01      	cmp	r3, #1
 800034e:	d101      	bne.n	8000354 <HAL_KEYPAD_GetChar+0x128>
 8000350:	2330      	movs	r3, #48	; 0x30
 8000352:	e01f      	b.n	8000394 <HAL_KEYPAD_GetChar+0x168>
					else if (j==2) {return '=';}
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	2b02      	cmp	r3, #2
 8000358:	d101      	bne.n	800035e <HAL_KEYPAD_GetChar+0x132>
 800035a:	233d      	movs	r3, #61	; 0x3d
 800035c:	e01a      	b.n	8000394 <HAL_KEYPAD_GetChar+0x168>
					else if (j==3) {return '+';}
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	2b03      	cmp	r3, #3
 8000362:	d107      	bne.n	8000374 <HAL_KEYPAD_GetChar+0x148>
 8000364:	232b      	movs	r3, #43	; 0x2b
 8000366:	e015      	b.n	8000394 <HAL_KEYPAD_GetChar+0x168>
					break;
 8000368:	bf00      	nop
 800036a:	e004      	b.n	8000376 <HAL_KEYPAD_GetChar+0x14a>
					break;
 800036c:	bf00      	nop
 800036e:	e002      	b.n	8000376 <HAL_KEYPAD_GetChar+0x14a>
					break;
 8000370:	bf00      	nop
 8000372:	e000      	b.n	8000376 <HAL_KEYPAD_GetChar+0x14a>
					break;
 8000374:	bf00      	nop
		for(j=0;j<4;j++)
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	3301      	adds	r3, #1
 800037a:	603b      	str	r3, [r7, #0]
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	2b03      	cmp	r3, #3
 8000380:	f77f af7b 	ble.w	800027a <HAL_KEYPAD_GetChar+0x4e>
	for (i=0;i<4;i++)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3301      	adds	r3, #1
 8000388:	607b      	str	r3, [r7, #4]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2b03      	cmp	r3, #3
 800038e:	f77f af53 	ble.w	8000238 <HAL_KEYPAD_GetChar+0xc>

				}
			}
		}
	}
	return 'N';
 8000392:	234e      	movs	r3, #78	; 0x4e
}
 8000394:	4618      	mov	r0, r3
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	40010c00 	.word	0x40010c00
 80003a0:	20000000 	.word	0x20000000
 80003a4:	20000010 	.word	0x20000010

080003a8 <LCD_kick>:
 * @param [in] 	-None
 * @retval 		-None
 * Note 		-None
 */
void LCD_kick(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003b2:	4807      	ldr	r0, [pc, #28]	; (80003d0 <LCD_kick+0x28>)
 80003b4:	f000 fa8b 	bl	80008ce <MCAL_GPIO_WritePin>
	wait_ms(50);
 80003b8:	2032      	movs	r0, #50	; 0x32
 80003ba:	f000 f80b 	bl	80003d4 <wait_ms>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80003be:	2200      	movs	r2, #0
 80003c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003c4:	4802      	ldr	r0, [pc, #8]	; (80003d0 <LCD_kick+0x28>)
 80003c6:	f000 fa82 	bl	80008ce <MCAL_GPIO_WritePin>
}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40010800 	.word	0x40010800

080003d4 <wait_ms>:
 * @param [in] 	-time : Variable for amount of loops needed
 * @retval 		-None
 * Note 		-None
 */
void wait_ms(uint32_t time)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0;i<time;i++)
 80003dc:	2300      	movs	r3, #0
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	e00c      	b.n	80003fc <wait_ms+0x28>
		for(j=0;j<time;j++);
 80003e2:	2300      	movs	r3, #0
 80003e4:	60bb      	str	r3, [r7, #8]
 80003e6:	e002      	b.n	80003ee <wait_ms+0x1a>
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	3301      	adds	r3, #1
 80003ec:	60bb      	str	r3, [r7, #8]
 80003ee:	68ba      	ldr	r2, [r7, #8]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	429a      	cmp	r2, r3
 80003f4:	d3f8      	bcc.n	80003e8 <wait_ms+0x14>
	for(i=0;i<time;i++)
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	3301      	adds	r3, #1
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	68fa      	ldr	r2, [r7, #12]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	429a      	cmp	r2, r3
 8000402:	d3ee      	bcc.n	80003e2 <wait_ms+0xe>
}
 8000404:	bf00      	nop
 8000406:	3714      	adds	r7, #20
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr
	...

08000410 <LCD_GPIO_Init>:
 * @retval 		-None
 * Note 		-None
 */

void LCD_GPIO_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t PinConfig ;
	//Set RS_SWITCH As Push-Pull Output with Speed 10MHz
	PinConfig.GPIO_PinNumber = RS_SWITCH;
 8000416:	f44f 7380 	mov.w	r3, #256	; 0x100
 800041a:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800041c:	2304      	movs	r3, #4
 800041e:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000420:	2301      	movs	r3, #1
 8000422:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	4619      	mov	r1, r3
 8000428:	4844      	ldr	r0, [pc, #272]	; (800053c <LCD_GPIO_Init+0x12c>)
 800042a:	f000 f9a3 	bl	8000774 <MCAL_GPIO_Init>


	//Set RW_SWITCH As Push-Pull Output with Speed 10MHz
	PinConfig.GPIO_PinNumber = RW_SWITCH;
 800042e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000432:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000434:	2304      	movs	r3, #4
 8000436:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000438:	2301      	movs	r3, #1
 800043a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	4619      	mov	r1, r3
 8000440:	483e      	ldr	r0, [pc, #248]	; (800053c <LCD_GPIO_Init+0x12c>)
 8000442:	f000 f997 	bl	8000774 <MCAL_GPIO_Init>

	//Set EN_SWITCH As Push-Pull Output with Speed 10MHz
	PinConfig.GPIO_PinNumber = EN_SWITCH;
 8000446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800044a:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800044c:	2304      	movs	r3, #4
 800044e:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000450:	2301      	movs	r3, #1
 8000452:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	4619      	mov	r1, r3
 8000458:	4838      	ldr	r0, [pc, #224]	; (800053c <LCD_GPIO_Init+0x12c>)
 800045a:	f000 f98b 	bl	8000774 <MCAL_GPIO_Init>

	//Set the LCD 8 PINS as Output
	PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 800045e:	2301      	movs	r3, #1
 8000460:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000462:	2304      	movs	r3, #4
 8000464:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000466:	2301      	movs	r3, #1
 8000468:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	4619      	mov	r1, r3
 800046e:	4833      	ldr	r0, [pc, #204]	; (800053c <LCD_GPIO_Init+0x12c>)
 8000470:	f000 f980 	bl	8000774 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 8000474:	2302      	movs	r3, #2
 8000476:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000478:	2304      	movs	r3, #4
 800047a:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 800047c:	2301      	movs	r3, #1
 800047e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	4619      	mov	r1, r3
 8000484:	482d      	ldr	r0, [pc, #180]	; (800053c <LCD_GPIO_Init+0x12c>)
 8000486:	f000 f975 	bl	8000774 <MCAL_GPIO_Init>


	PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 800048a:	2304      	movs	r3, #4
 800048c:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800048e:	2304      	movs	r3, #4
 8000490:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000492:	2301      	movs	r3, #1
 8000494:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	4619      	mov	r1, r3
 800049a:	4828      	ldr	r0, [pc, #160]	; (800053c <LCD_GPIO_Init+0x12c>)
 800049c:	f000 f96a 	bl	8000774 <MCAL_GPIO_Init>


	PinConfig.GPIO_PinNumber = GPIO_PIN_3;
 80004a0:	2308      	movs	r3, #8
 80004a2:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004a4:	2304      	movs	r3, #4
 80004a6:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 80004a8:	2301      	movs	r3, #1
 80004aa:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	4619      	mov	r1, r3
 80004b0:	4822      	ldr	r0, [pc, #136]	; (800053c <LCD_GPIO_Init+0x12c>)
 80004b2:	f000 f95f 	bl	8000774 <MCAL_GPIO_Init>


	PinConfig.GPIO_PinNumber = GPIO_PIN_4;
 80004b6:	2310      	movs	r3, #16
 80004b8:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004ba:	2304      	movs	r3, #4
 80004bc:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 80004be:	2301      	movs	r3, #1
 80004c0:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	4619      	mov	r1, r3
 80004c6:	481d      	ldr	r0, [pc, #116]	; (800053c <LCD_GPIO_Init+0x12c>)
 80004c8:	f000 f954 	bl	8000774 <MCAL_GPIO_Init>


	PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 80004cc:	2320      	movs	r3, #32
 80004ce:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004d0:	2304      	movs	r3, #4
 80004d2:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 80004d4:	2301      	movs	r3, #1
 80004d6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	4619      	mov	r1, r3
 80004dc:	4817      	ldr	r0, [pc, #92]	; (800053c <LCD_GPIO_Init+0x12c>)
 80004de:	f000 f949 	bl	8000774 <MCAL_GPIO_Init>


	PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 80004e2:	2340      	movs	r3, #64	; 0x40
 80004e4:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004e6:	2304      	movs	r3, #4
 80004e8:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 80004ea:	2301      	movs	r3, #1
 80004ec:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	4619      	mov	r1, r3
 80004f2:	4812      	ldr	r0, [pc, #72]	; (800053c <LCD_GPIO_Init+0x12c>)
 80004f4:	f000 f93e 	bl	8000774 <MCAL_GPIO_Init>


	PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004fc:	2304      	movs	r3, #4
 80004fe:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000500:	2301      	movs	r3, #1
 8000502:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	4619      	mov	r1, r3
 8000508:	480c      	ldr	r0, [pc, #48]	; (800053c <LCD_GPIO_Init+0x12c>)
 800050a:	f000 f933 	bl	8000774 <MCAL_GPIO_Init>

	//Reset EN Switch Pin
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 800050e:	2200      	movs	r2, #0
 8000510:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000514:	4809      	ldr	r0, [pc, #36]	; (800053c <LCD_GPIO_Init+0x12c>)
 8000516:	f000 f9da 	bl	80008ce <MCAL_GPIO_WritePin>
	//Reset RS Switch Pin
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000520:	4806      	ldr	r0, [pc, #24]	; (800053c <LCD_GPIO_Init+0x12c>)
 8000522:	f000 f9d4 	bl	80008ce <MCAL_GPIO_WritePin>
	//Reset RW Switch Pin
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	f44f 7100 	mov.w	r1, #512	; 0x200
 800052c:	4803      	ldr	r0, [pc, #12]	; (800053c <LCD_GPIO_Init+0x12c>)
 800052e:	f000 f9ce 	bl	80008ce <MCAL_GPIO_WritePin>


}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40010800 	.word	0x40010800

08000540 <HAL_LCD_Init>:
 * @retval 		-None
 * Note 		-None
 */

void HAL_LCD_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	wait_ms(20);
 8000544:	2014      	movs	r0, #20
 8000546:	f7ff ff45 	bl	80003d4 <wait_ms>
	LCD_GPIO_Init();
 800054a:	f7ff ff61 	bl	8000410 <LCD_GPIO_Init>
	wait_ms(15);
 800054e:	200f      	movs	r0, #15
 8000550:	f7ff ff40 	bl	80003d4 <wait_ms>
	HAL_LCD_CLEAR();
 8000554:	f000 f87a 	bl	800064c <HAL_LCD_CLEAR>
#ifdef EIGHT_BIT_MODE
	HAL_LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000558:	2038      	movs	r0, #56	; 0x38
 800055a:	f000 f80b 	bl	8000574 <HAL_LCD_WRITE_COMMAND>

	HAL_LCD_WRITE_COMMAND(0x02);
	HAL_LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);

#endif
	HAL_LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 800055e:	2006      	movs	r0, #6
 8000560:	f000 f808 	bl	8000574 <HAL_LCD_WRITE_COMMAND>
	HAL_LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 8000564:	2080      	movs	r0, #128	; 0x80
 8000566:	f000 f805 	bl	8000574 <HAL_LCD_WRITE_COMMAND>
	HAL_LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 800056a:	200f      	movs	r0, #15
 800056c:	f000 f802 	bl	8000574 <HAL_LCD_WRITE_COMMAND>
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}

08000574 <HAL_LCD_WRITE_COMMAND>:
 * @retval 		-None
 * Note 		-None
 */

void HAL_LCD_WRITE_COMMAND(uint8_t command)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]

#ifdef EIGHT_BIT_MODE
	//HAL_LCD_isbusy();
	MCAL_GPIO_WritePort(LCD_CTRL, command);
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	b29b      	uxth	r3, r3
 8000582:	4619      	mov	r1, r3
 8000584:	480a      	ldr	r0, [pc, #40]	; (80005b0 <HAL_LCD_WRITE_COMMAND+0x3c>)
 8000586:	f000 f9b9 	bl	80008fc <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000590:	4807      	ldr	r0, [pc, #28]	; (80005b0 <HAL_LCD_WRITE_COMMAND+0x3c>)
 8000592:	f000 f99c 	bl	80008ce <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 7180 	mov.w	r1, #256	; 0x100
 800059c:	4804      	ldr	r0, [pc, #16]	; (80005b0 <HAL_LCD_WRITE_COMMAND+0x3c>)
 800059e:	f000 f996 	bl	80008ce <MCAL_GPIO_WritePin>
	LCD_kick();
 80005a2:	f7ff ff01 	bl	80003a8 <LCD_kick>
	wait_ms(10);
	LCD_kick();

#endif

}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40010800 	.word	0x40010800

080005b4 <HAL_LCD_WRITE_CHAR>:
 * @param [in] 	-data : takes a single character to be displayed
 * @retval 		-None
 * Note 		-None
 */
void HAL_LCD_WRITE_CHAR(char data)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
#ifdef EIGHT_BIT_MODE
	//HAL_LCD_isbusy();
	MCAL_GPIO_WritePort(LCD_CTRL, data);
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	4619      	mov	r1, r3
 80005c4:	480a      	ldr	r0, [pc, #40]	; (80005f0 <HAL_LCD_WRITE_CHAR+0x3c>)
 80005c6:	f000 f999 	bl	80008fc <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d0:	4807      	ldr	r0, [pc, #28]	; (80005f0 <HAL_LCD_WRITE_CHAR+0x3c>)
 80005d2:	f000 f97c 	bl	80008ce <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005dc:	4804      	ldr	r0, [pc, #16]	; (80005f0 <HAL_LCD_WRITE_CHAR+0x3c>)
 80005de:	f000 f976 	bl	80008ce <MCAL_GPIO_WritePin>
	LCD_kick();
 80005e2:	f7ff fee1 	bl	80003a8 <LCD_kick>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
	MCAL_GPIO_WritePort(LCD_CTRL, (command << 4));
	wait_ms(10);
	LCD_kick();
#endif
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40010800 	.word	0x40010800

080005f4 <HAL_LCD_WRITE_STR>:
 * @param [in] 	-data :takes a String of character to be displayed
 * @retval 		-None
 * Note 		-None
 */
void HAL_LCD_WRITE_STR(char* data)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	int i = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
	while(*data != '\0')
 8000600:	e01c      	b.n	800063c <HAL_LCD_WRITE_STR+0x48>
	{
		HAL_LCD_WRITE_CHAR(*data++);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	1c5a      	adds	r2, r3, #1
 8000606:	607a      	str	r2, [r7, #4]
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff ffd2 	bl	80005b4 <HAL_LCD_WRITE_CHAR>
		i++;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	3301      	adds	r3, #1
 8000614:	60fb      	str	r3, [r7, #12]
		if(i == 16)
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	2b10      	cmp	r3, #16
 800061a:	d104      	bne.n	8000626 <HAL_LCD_WRITE_STR+0x32>
		{
			HAL_LCD_GOTO_XY(2,0);
 800061c:	2100      	movs	r1, #0
 800061e:	2002      	movs	r0, #2
 8000620:	f000 f81b 	bl	800065a <HAL_LCD_GOTO_XY>
 8000624:	e00a      	b.n	800063c <HAL_LCD_WRITE_STR+0x48>
		}
		else if(i==32)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2b20      	cmp	r3, #32
 800062a:	d107      	bne.n	800063c <HAL_LCD_WRITE_STR+0x48>
		{
			HAL_LCD_CLEAR();
 800062c:	f000 f80e 	bl	800064c <HAL_LCD_CLEAR>
			HAL_LCD_GOTO_XY(1,0);
 8000630:	2100      	movs	r1, #0
 8000632:	2001      	movs	r0, #1
 8000634:	f000 f811 	bl	800065a <HAL_LCD_GOTO_XY>
			i =0;
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
	while(*data != '\0')
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d1de      	bne.n	8000602 <HAL_LCD_WRITE_STR+0xe>
		}
	}
}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <HAL_LCD_CLEAR>:
 * @param [in] 	-None
 * @retval 		-None
 * Note 		-None
 */
void HAL_LCD_CLEAR(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	HAL_LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000650:	2001      	movs	r0, #1
 8000652:	f7ff ff8f 	bl	8000574 <HAL_LCD_WRITE_COMMAND>

}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}

0800065a <HAL_LCD_GOTO_XY>:
 * @param [in] 	-Position : which Character position of the line chosen to move to , choose a value from 0->16
 * @retval 		-None
 * Note 		-None
 */
void HAL_LCD_GOTO_XY(int line , int position)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	b082      	sub	sp, #8
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
 8000662:	6039      	str	r1, [r7, #0]
	if (line == FIRST_LINE)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d10d      	bne.n	8000686 <HAL_LCD_GOTO_XY+0x2c>
	{
		if(position <16 && position>=0)
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	2b0f      	cmp	r3, #15
 800066e:	dc1a      	bgt.n	80006a6 <HAL_LCD_GOTO_XY+0x4c>
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	db17      	blt.n	80006a6 <HAL_LCD_GOTO_XY+0x4c>
		{
			HAL_LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	b2db      	uxtb	r3, r3
 800067a:	3b80      	subs	r3, #128	; 0x80
 800067c:	b2db      	uxtb	r3, r3
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ff78 	bl	8000574 <HAL_LCD_WRITE_COMMAND>
		{
			HAL_LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);

		}
	}
}
 8000684:	e00f      	b.n	80006a6 <HAL_LCD_GOTO_XY+0x4c>
	else if (line == SECOND_LINE)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2b02      	cmp	r3, #2
 800068a:	d10c      	bne.n	80006a6 <HAL_LCD_GOTO_XY+0x4c>
		if(position <16 && position>=0)
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	2b0f      	cmp	r3, #15
 8000690:	dc09      	bgt.n	80006a6 <HAL_LCD_GOTO_XY+0x4c>
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	db06      	blt.n	80006a6 <HAL_LCD_GOTO_XY+0x4c>
			HAL_LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	3b40      	subs	r3, #64	; 0x40
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ff67 	bl	8000574 <HAL_LCD_WRITE_COMMAND>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <Get_CRL_CRH_Position>:
 * @retval 		-The bit position
 * Note 		-None
 */

uint8_t Get_CRL_CRH_Position (uint16_t PinNumber)
{
 80006ae:	b480      	push	{r7}
 80006b0:	b083      	sub	sp, #12
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	4603      	mov	r3, r0
 80006b6:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	2b80      	cmp	r3, #128	; 0x80
 80006bc:	d042      	beq.n	8000744 <Get_CRL_CRH_Position+0x96>
 80006be:	2b80      	cmp	r3, #128	; 0x80
 80006c0:	dc11      	bgt.n	80006e6 <Get_CRL_CRH_Position+0x38>
 80006c2:	2b08      	cmp	r3, #8
 80006c4:	d036      	beq.n	8000734 <Get_CRL_CRH_Position+0x86>
 80006c6:	2b08      	cmp	r3, #8
 80006c8:	dc06      	bgt.n	80006d8 <Get_CRL_CRH_Position+0x2a>
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	d02e      	beq.n	800072c <Get_CRL_CRH_Position+0x7e>
 80006ce:	2b04      	cmp	r3, #4
 80006d0:	d02e      	beq.n	8000730 <Get_CRL_CRH_Position+0x82>
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d028      	beq.n	8000728 <Get_CRL_CRH_Position+0x7a>
 80006d6:	e047      	b.n	8000768 <Get_CRL_CRH_Position+0xba>
 80006d8:	2b20      	cmp	r3, #32
 80006da:	d02f      	beq.n	800073c <Get_CRL_CRH_Position+0x8e>
 80006dc:	2b40      	cmp	r3, #64	; 0x40
 80006de:	d02f      	beq.n	8000740 <Get_CRL_CRH_Position+0x92>
 80006e0:	2b10      	cmp	r3, #16
 80006e2:	d029      	beq.n	8000738 <Get_CRL_CRH_Position+0x8a>
 80006e4:	e040      	b.n	8000768 <Get_CRL_CRH_Position+0xba>
 80006e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006ea:	d033      	beq.n	8000754 <Get_CRL_CRH_Position+0xa6>
 80006ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006f0:	dc09      	bgt.n	8000706 <Get_CRL_CRH_Position+0x58>
 80006f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006f6:	d029      	beq.n	800074c <Get_CRL_CRH_Position+0x9e>
 80006f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006fc:	d028      	beq.n	8000750 <Get_CRL_CRH_Position+0xa2>
 80006fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000702:	d021      	beq.n	8000748 <Get_CRL_CRH_Position+0x9a>
 8000704:	e030      	b.n	8000768 <Get_CRL_CRH_Position+0xba>
 8000706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800070a:	d027      	beq.n	800075c <Get_CRL_CRH_Position+0xae>
 800070c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000710:	dc03      	bgt.n	800071a <Get_CRL_CRH_Position+0x6c>
 8000712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000716:	d01f      	beq.n	8000758 <Get_CRL_CRH_Position+0xaa>
 8000718:	e026      	b.n	8000768 <Get_CRL_CRH_Position+0xba>
 800071a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800071e:	d01f      	beq.n	8000760 <Get_CRL_CRH_Position+0xb2>
 8000720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000724:	d01e      	beq.n	8000764 <Get_CRL_CRH_Position+0xb6>
 8000726:	e01f      	b.n	8000768 <Get_CRL_CRH_Position+0xba>
	{
	//CRL
	case GPIO_PIN_0:
		return 0; break;
 8000728:	2300      	movs	r3, #0
 800072a:	e01e      	b.n	800076a <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_1:
			return 4; break;
 800072c:	2304      	movs	r3, #4
 800072e:	e01c      	b.n	800076a <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_2:
			return 8; break;
 8000730:	2308      	movs	r3, #8
 8000732:	e01a      	b.n	800076a <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_3:
			return 12; break;
 8000734:	230c      	movs	r3, #12
 8000736:	e018      	b.n	800076a <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_4:
			return 16; break;
 8000738:	2310      	movs	r3, #16
 800073a:	e016      	b.n	800076a <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_5:
			return 20; break;
 800073c:	2314      	movs	r3, #20
 800073e:	e014      	b.n	800076a <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_6:
			return 24; break;
 8000740:	2318      	movs	r3, #24
 8000742:	e012      	b.n	800076a <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_7:
			return 28; break;
 8000744:	231c      	movs	r3, #28
 8000746:	e010      	b.n	800076a <Get_CRL_CRH_Position+0xbc>
	//CRH
	case GPIO_PIN_8:
		return 0; break;
 8000748:	2300      	movs	r3, #0
 800074a:	e00e      	b.n	800076a <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_9:
			return 4; break;
 800074c:	2304      	movs	r3, #4
 800074e:	e00c      	b.n	800076a <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_10:
			return 8; break;
 8000750:	2308      	movs	r3, #8
 8000752:	e00a      	b.n	800076a <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_11:
			return 12; break;
 8000754:	230c      	movs	r3, #12
 8000756:	e008      	b.n	800076a <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_12:
			return 16; break;
 8000758:	2310      	movs	r3, #16
 800075a:	e006      	b.n	800076a <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_13:
			return 20; break;
 800075c:	2314      	movs	r3, #20
 800075e:	e004      	b.n	800076a <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_14:
			return 24; break;
 8000760:	2318      	movs	r3, #24
 8000762:	e002      	b.n	800076a <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_15:
			return 28; break;
 8000764:	231c      	movs	r3, #28
 8000766:	e000      	b.n	800076a <Get_CRL_CRH_Position+0xbc>
	}
	return 0;
 8000768:	2300      	movs	r3, #0
}
 800076a:	4618      	mov	r0, r3
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr

08000774 <MCAL_GPIO_Init>:
 * @retval 		-None
 * Note 		-STM32F103C6 MCU has GPIO A,B,C,D,E
 * 				 but LQFP48 Package has A,B ,Part of C&D and no E
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t* PinConfig )
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configures Pins from 0->7
	//Port configuration register high (GPIOx_CRH) Configures Pins from 8->15
	volatile uint32_t* configReg = NULL;
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
	volatile uint8_t CNFx_MODEx = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	72fb      	strb	r3, [r7, #11]
	//to configure CRL or CRH , check the pin number and work accordingly
	configReg = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	2bff      	cmp	r3, #255	; 0xff
 800078c:	d801      	bhi.n	8000792 <MCAL_GPIO_Init+0x1e>
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	e001      	b.n	8000796 <MCAL_GPIO_Init+0x22>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	3304      	adds	r3, #4
 8000796:	60fb      	str	r3, [r7, #12]

	//Clear CNFx[1:0] & MODEx[1:0]
	(*configReg) &= ~(0xF << Get_CRL_CRH_Position(PinConfig->GPIO_PinNumber));
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ff86 	bl	80006ae <Get_CRL_CRH_Position>
 80007a2:	4603      	mov	r3, r0
 80007a4:	461a      	mov	r2, r3
 80007a6:	230f      	movs	r3, #15
 80007a8:	4093      	lsls	r3, r2
 80007aa:	43da      	mvns	r2, r3
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	401a      	ands	r2, r3
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	601a      	str	r2, [r3, #0]

	//if the Pin is set as Output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)|(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)|(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)|(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	789b      	ldrb	r3, [r3, #2]
 80007ba:	2b07      	cmp	r3, #7
 80007bc:	bf0c      	ite	eq
 80007be:	2301      	moveq	r3, #1
 80007c0:	2300      	movne	r3, #0
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	789b      	ldrb	r3, [r3, #2]
 80007c8:	2b06      	cmp	r3, #6
 80007ca:	bf0c      	ite	eq
 80007cc:	2301      	moveq	r3, #1
 80007ce:	2300      	movne	r3, #0
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	4313      	orrs	r3, r2
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	461a      	mov	r2, r3
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	789b      	ldrb	r3, [r3, #2]
 80007dc:	2b05      	cmp	r3, #5
 80007de:	bf0c      	ite	eq
 80007e0:	2301      	moveq	r3, #1
 80007e2:	2300      	movne	r3, #0
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	4313      	orrs	r3, r2
 80007e8:	683a      	ldr	r2, [r7, #0]
 80007ea:	7892      	ldrb	r2, [r2, #2]
 80007ec:	2a04      	cmp	r2, #4
 80007ee:	bf0c      	ite	eq
 80007f0:	2201      	moveq	r2, #1
 80007f2:	2200      	movne	r2, #0
 80007f4:	b2d2      	uxtb	r2, r2
 80007f6:	4313      	orrs	r3, r2
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d00f      	beq.n	800081c <MCAL_GPIO_Init+0xa8>
	{
		// Set CNFx[1:0] & MODE[1:0]
		CNFx_MODEx = (((PinConfig->GPIO_MODE - 4)<<2)| (PinConfig->GPIO_Output_Speed)) & 0x0F;
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	789b      	ldrb	r3, [r3, #2]
 8000800:	3b04      	subs	r3, #4
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	b25a      	sxtb	r2, r3
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	78db      	ldrb	r3, [r3, #3]
 800080a:	b25b      	sxtb	r3, r3
 800080c:	4313      	orrs	r3, r2
 800080e:	b25b      	sxtb	r3, r3
 8000810:	b2db      	uxtb	r3, r3
 8000812:	f003 030f 	and.w	r3, r3, #15
 8000816:	b2db      	uxtb	r3, r3
 8000818:	72fb      	strb	r3, [r7, #11]
 800081a:	e02d      	b.n	8000878 <MCAL_GPIO_Init+0x104>
	}

	//if the Pin is set as Input , in that case MODE == 00 by default
	else
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG))
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	789b      	ldrb	r3, [r3, #2]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d003      	beq.n	800082c <MCAL_GPIO_Init+0xb8>
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	789b      	ldrb	r3, [r3, #2]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d108      	bne.n	800083e <MCAL_GPIO_Init+0xca>
		{
			// Set CNFx[1:0] & MODEx[1:0] = 0x00
			CNFx_MODEx = ((( (PinConfig->GPIO_MODE)<<2) | 0x0   ) & 0x0F);
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	789b      	ldrb	r3, [r3, #2]
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	b2db      	uxtb	r3, r3
 8000834:	f003 030f 	and.w	r3, r3, #15
 8000838:	b2db      	uxtb	r3, r3
 800083a:	72fb      	strb	r3, [r7, #11]
 800083c:	e01c      	b.n	8000878 <MCAL_GPIO_Init+0x104>
		}
		//Alternative function input is the same as input floating Based on the TRM definition
		else if ((PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT))
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	789b      	ldrb	r3, [r3, #2]
 8000842:	2b08      	cmp	r3, #8
 8000844:	d102      	bne.n	800084c <MCAL_GPIO_Init+0xd8>
		{
			// Set CNFx[1:0] & MODEx[1:0] = 0x00
			CNFx_MODEx = ((( (GPIO_MODE_INPUT_FLO)<<2) | 0x0   ) & 0x0F);
 8000846:	2304      	movs	r3, #4
 8000848:	72fb      	strb	r3, [r7, #11]
 800084a:	e015      	b.n	8000878 <MCAL_GPIO_Init+0x104>
		}
		else 		//This means it's either Pull-Up Input or Pull-Down Input
		{
			// Set CNFx[1:0] & MODEx[1:0] = 0x00
			// 10: Input with pull-up / pull-down
			CNFx_MODEx = ((( (GPIO_MODE_INPUT_PU)<<2) | 0x0   ) & 0x0F);
 800084c:	2308      	movs	r3, #8
 800084e:	72fb      	strb	r3, [r7, #11]
			if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU))
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	789b      	ldrb	r3, [r3, #2]
 8000854:	2b02      	cmp	r3, #2
 8000856:	d107      	bne.n	8000868 <MCAL_GPIO_Init+0xf4>
			{
				//Table 20. Port Bit configuration table
				//If Pull-Up input -> PxODR == 1
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	683a      	ldr	r2, [r7, #0]
 800085e:	8812      	ldrh	r2, [r2, #0]
 8000860:	431a      	orrs	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	e007      	b.n	8000878 <MCAL_GPIO_Init+0x104>
			}
			else
			{
				//Table 20. Port Bit configuration table
				//If Pull-Up input -> PxODR == 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	683a      	ldr	r2, [r7, #0]
 800086e:	8812      	ldrh	r2, [r2, #0]
 8000870:	43d2      	mvns	r2, r2
 8000872:	401a      	ands	r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	60da      	str	r2, [r3, #12]

		}

	}
	//Writing the configuration base on PinConfig on CNFx & MODEx
	(*configReg) |= ( (CNFx_MODEx)<<Get_CRL_CRH_Position(PinConfig->GPIO_PinNumber) );
 8000878:	7afb      	ldrb	r3, [r7, #11]
 800087a:	b2db      	uxtb	r3, r3
 800087c:	461c      	mov	r4, r3
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ff13 	bl	80006ae <Get_CRL_CRH_Position>
 8000888:	4603      	mov	r3, r0
 800088a:	fa04 f203 	lsl.w	r2, r4, r3
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	431a      	orrs	r2, r3
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	601a      	str	r2, [r3, #0]
}
 8000898:	bf00      	nop
 800089a:	3714      	adds	r7, #20
 800089c:	46bd      	mov	sp, r7
 800089e:	bd90      	pop	{r4, r7, pc}

080008a0 <MCAL_GPIO_ReadPin>:
 * @param [in]	-PinNumber : Pin number to be read from according to @ref GPIO_PINS_Define
 * @retval 		-The input Pin value (two values based on @ref GPIO_PIN_State)
 * Note 		-None
 */
uint8_t MCAL_GPIO_ReadPin (GPIO_TypeDef *GPIOx,uint16_t PinNumber)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	807b      	strh	r3, [r7, #2]
	uint8_t ReadStatus;
	if( ((GPIOx->IDR) & PinNumber) != (uint32_t) GPIO_PIN_RESET )
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	689a      	ldr	r2, [r3, #8]
 80008b0:	887b      	ldrh	r3, [r7, #2]
 80008b2:	4013      	ands	r3, r2
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d002      	beq.n	80008be <MCAL_GPIO_ReadPin+0x1e>
	{
		ReadStatus = GPIO_PIN_SET;
 80008b8:	2301      	movs	r3, #1
 80008ba:	73fb      	strb	r3, [r7, #15]
 80008bc:	e001      	b.n	80008c2 <MCAL_GPIO_ReadPin+0x22>
	}
	else
	{
		ReadStatus = GPIO_PIN_RESET;
 80008be:	2300      	movs	r3, #0
 80008c0:	73fb      	strb	r3, [r7, #15]
	}
	return ReadStatus;
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr

080008ce <MCAL_GPIO_WritePin>:
 * @param [in]	-Value : PIN value
 * @retval 		-None
 * Note 		-None
 */
void MCAL_GPIO_WritePin (GPIO_TypeDef *GPIOx ,uint16_t PinNumber , uint8_t Value)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b083      	sub	sp, #12
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
 80008d6:	460b      	mov	r3, r1
 80008d8:	807b      	strh	r3, [r7, #2]
 80008da:	4613      	mov	r3, r2
 80008dc:	707b      	strb	r3, [r7, #1]
	if( Value != GPIO_PIN_RESET )
 80008de:	787b      	ldrb	r3, [r7, #1]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d003      	beq.n	80008ec <MCAL_GPIO_WritePin+0x1e>
	{
		//using bit set/reset register (BSRR)
		//0: No action on the corresponding ODRx bit
		//1: Set the corresponding ODRx bit
		GPIOx->BSRR = PinNumber;
 80008e4:	887a      	ldrh	r2, [r7, #2]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	611a      	str	r2, [r3, #16]
		//using bit reset register (BRR)
		//0: No action on the corresponding ODRx bit
		//1: Reset the corresponding ODRx bit
		GPIOx->BRR = PinNumber;
	}
}
 80008ea:	e002      	b.n	80008f2 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = PinNumber;
 80008ec:	887a      	ldrh	r2, [r7, #2]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	615a      	str	r2, [r3, #20]
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr

080008fc <MCAL_GPIO_WritePort>:
 * @param [in]	-Value : Port value
 * @retval 		-None
 * Note 		-None
 */
void MCAL_GPIO_WritePort (GPIO_TypeDef *GPIOx , uint16_t Value)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	460b      	mov	r3, r1
 8000906:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint16_t)Value;
 8000908:	887a      	ldrh	r2, [r7, #2]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	60da      	str	r2, [r3, #12]
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <wait>:
#include "LCD.h"
#include "SevenSeg.h"


void wait(int x)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	int i,j;
	for (i=0;i<x;i++)
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	e00c      	b.n	8000940 <wait+0x28>
		for(j=0;j<x;j++);
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	e002      	b.n	8000932 <wait+0x1a>
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	3301      	adds	r3, #1
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	68ba      	ldr	r2, [r7, #8]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	429a      	cmp	r2, r3
 8000938:	dbf8      	blt.n	800092c <wait+0x14>
	for (i=0;i<x;i++)
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	3301      	adds	r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fa      	ldr	r2, [r7, #12]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	429a      	cmp	r2, r3
 8000946:	dbee      	blt.n	8000926 <wait+0xe>
}
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
	...

08000954 <clk_Init>:

void clk_Init(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
	//Enable clock for GPIO A
	RCC_GPIOA_CLK_EN() ;
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <clk_Init+0x24>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a06      	ldr	r2, [pc, #24]	; (8000978 <clk_Init+0x24>)
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	6193      	str	r3, [r2, #24]
	//Enable clock for GPIO B
	RCC_GPIOB_CLK_EN() ;
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <clk_Init+0x24>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	4a03      	ldr	r2, [pc, #12]	; (8000978 <clk_Init+0x24>)
 800096a:	f043 0308 	orr.w	r3, r3, #8
 800096e:	6193      	str	r3, [r2, #24]
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	40021000 	.word	0x40021000

0800097c <main>:




int main(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0

	clk_Init();
 8000982:	f7ff ffe7 	bl	8000954 <clk_Init>
	wait(10);
 8000986:	200a      	movs	r0, #10
 8000988:	f7ff ffc6 	bl	8000918 <wait>
	HAL_LCD_Init();
 800098c:	f7ff fdd8 	bl	8000540 <HAL_LCD_Init>
	wait(10);
 8000990:	200a      	movs	r0, #10
 8000992:	f7ff ffc1 	bl	8000918 <wait>
	HAL_KEYPAD_Init();
 8000996:	f7ff fbeb 	bl	8000170 <HAL_KEYPAD_Init>
	wait(10);
 800099a:	200a      	movs	r0, #10
 800099c:	f7ff ffbc 	bl	8000918 <wait>
	HAL_LCD_WRITE_STR("Keypad is Ready");
 80009a0:	4819      	ldr	r0, [pc, #100]	; (8000a08 <main+0x8c>)
 80009a2:	f7ff fe27 	bl	80005f4 <HAL_LCD_WRITE_STR>
	wait(50);
 80009a6:	2032      	movs	r0, #50	; 0x32
 80009a8:	f7ff ffb6 	bl	8000918 <wait>
	HAL_LCD_CLEAR();
 80009ac:	f7ff fe4e 	bl	800064c <HAL_LCD_CLEAR>
	unsigned char Key;
	uint32_t count =0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	607b      	str	r3, [r7, #4]
	while(1)
	{
		Key = HAL_KEYPAD_GetChar();
 80009b4:	f7ff fc3a 	bl	800022c <HAL_KEYPAD_GetChar>
 80009b8:	4603      	mov	r3, r0
 80009ba:	70fb      	strb	r3, [r7, #3]
		if(Key == 'N');
 80009bc:	78fb      	ldrb	r3, [r7, #3]
 80009be:	2b4e      	cmp	r3, #78	; 0x4e
 80009c0:	d00e      	beq.n	80009e0 <main+0x64>
		else if(Key == '!')
 80009c2:	78fb      	ldrb	r3, [r7, #3]
 80009c4:	2b21      	cmp	r3, #33	; 0x21
 80009c6:	d104      	bne.n	80009d2 <main+0x56>
		{
			HAL_LCD_CLEAR();
 80009c8:	f7ff fe40 	bl	800064c <HAL_LCD_CLEAR>
			count=0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	e006      	b.n	80009e0 <main+0x64>
		}
		else
		{
			HAL_LCD_WRITE_CHAR(Key);
 80009d2:	78fb      	ldrb	r3, [r7, #3]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fded 	bl	80005b4 <HAL_LCD_WRITE_CHAR>
			count++;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	3301      	adds	r3, #1
 80009de:	607b      	str	r3, [r7, #4]
		}
		if(count == 16)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b10      	cmp	r3, #16
 80009e4:	d104      	bne.n	80009f0 <main+0x74>
		{
			HAL_LCD_GOTO_XY(2,0);
 80009e6:	2100      	movs	r1, #0
 80009e8:	2002      	movs	r0, #2
 80009ea:	f7ff fe36 	bl	800065a <HAL_LCD_GOTO_XY>
 80009ee:	e7e1      	b.n	80009b4 <main+0x38>
		}
		else if(count==32)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2b20      	cmp	r3, #32
 80009f4:	d1de      	bne.n	80009b4 <main+0x38>
		{
			HAL_LCD_CLEAR();
 80009f6:	f7ff fe29 	bl	800064c <HAL_LCD_CLEAR>
			HAL_LCD_GOTO_XY(1,0);
 80009fa:	2100      	movs	r1, #0
 80009fc:	2001      	movs	r0, #1
 80009fe:	f7ff fe2c 	bl	800065a <HAL_LCD_GOTO_XY>
			count =0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
		Key = HAL_KEYPAD_GetChar();
 8000a06:	e7d5      	b.n	80009b4 <main+0x38>
 8000a08:	08000ac0 	.word	0x08000ac0

08000a0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a0c:	480d      	ldr	r0, [pc, #52]	; (8000a44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a0e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a10:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a16:	490d      	ldr	r1, [pc, #52]	; (8000a4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a18:	4a0d      	ldr	r2, [pc, #52]	; (8000a50 <LoopForever+0xe>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a1c:	e002      	b.n	8000a24 <LoopCopyDataInit>

08000a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a22:	3304      	adds	r3, #4

08000a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a28:	d3f9      	bcc.n	8000a1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a2c:	4c0a      	ldr	r4, [pc, #40]	; (8000a58 <LoopForever+0x16>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a30:	e001      	b.n	8000a36 <LoopFillZerobss>

08000a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a34:	3204      	adds	r2, #4

08000a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a38:	d3fb      	bcc.n	8000a32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a3a:	f000 f811 	bl	8000a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a3e:	f7ff ff9d 	bl	800097c <main>

08000a42 <LoopForever>:

LoopForever:
    b LoopForever
 8000a42:	e7fe      	b.n	8000a42 <LoopForever>
  ldr   r0, =_estack
 8000a44:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a4c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000a50:	08000ad8 	.word	0x08000ad8
  ldr r2, =_sbss
 8000a54:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000a58:	2000003c 	.word	0x2000003c

08000a5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC1_2_IRQHandler>
	...

08000a60 <__libc_init_array>:
 8000a60:	b570      	push	{r4, r5, r6, lr}
 8000a62:	2500      	movs	r5, #0
 8000a64:	4e0c      	ldr	r6, [pc, #48]	; (8000a98 <__libc_init_array+0x38>)
 8000a66:	4c0d      	ldr	r4, [pc, #52]	; (8000a9c <__libc_init_array+0x3c>)
 8000a68:	1ba4      	subs	r4, r4, r6
 8000a6a:	10a4      	asrs	r4, r4, #2
 8000a6c:	42a5      	cmp	r5, r4
 8000a6e:	d109      	bne.n	8000a84 <__libc_init_array+0x24>
 8000a70:	f000 f81a 	bl	8000aa8 <_init>
 8000a74:	2500      	movs	r5, #0
 8000a76:	4e0a      	ldr	r6, [pc, #40]	; (8000aa0 <__libc_init_array+0x40>)
 8000a78:	4c0a      	ldr	r4, [pc, #40]	; (8000aa4 <__libc_init_array+0x44>)
 8000a7a:	1ba4      	subs	r4, r4, r6
 8000a7c:	10a4      	asrs	r4, r4, #2
 8000a7e:	42a5      	cmp	r5, r4
 8000a80:	d105      	bne.n	8000a8e <__libc_init_array+0x2e>
 8000a82:	bd70      	pop	{r4, r5, r6, pc}
 8000a84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a88:	4798      	blx	r3
 8000a8a:	3501      	adds	r5, #1
 8000a8c:	e7ee      	b.n	8000a6c <__libc_init_array+0xc>
 8000a8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a92:	4798      	blx	r3
 8000a94:	3501      	adds	r5, #1
 8000a96:	e7f2      	b.n	8000a7e <__libc_init_array+0x1e>
 8000a98:	08000ad0 	.word	0x08000ad0
 8000a9c:	08000ad0 	.word	0x08000ad0
 8000aa0:	08000ad0 	.word	0x08000ad0
 8000aa4:	08000ad4 	.word	0x08000ad4

08000aa8 <_init>:
 8000aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aaa:	bf00      	nop
 8000aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aae:	bc08      	pop	{r3}
 8000ab0:	469e      	mov	lr, r3
 8000ab2:	4770      	bx	lr

08000ab4 <_fini>:
 8000ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ab6:	bf00      	nop
 8000ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aba:	bc08      	pop	{r3}
 8000abc:	469e      	mov	lr, r3
 8000abe:	4770      	bx	lr
