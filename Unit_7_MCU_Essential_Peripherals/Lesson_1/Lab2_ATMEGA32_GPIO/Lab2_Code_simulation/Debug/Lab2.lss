
Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001be  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005d6  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000054d  00000000  00000000  000008a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000018a  00000000  00000000  00000df3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00000f80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d7  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cb  00000000  00000000  000012cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001396  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 93 00 	call	0x126	; 0x126 <main>
  64:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <delay>:
#define CLEAR_BIT(reg,bit) 		(reg &= ~(1<<bit))
#define TOGGLE_BIT(reg,bit) 	(reg ^= (1<<bit))
#define READ_BIT(reg,bit) 		((reg>>bit) & 1)

void delay (int time)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <delay+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <delay+0x8>
  74:	00 d0       	rcall	.+0      	; 0x76 <delay+0xa>
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	9e 83       	std	Y+6, r25	; 0x06
  7c:	8d 83       	std	Y+5, r24	; 0x05
	volatile int i,j ;
	for (i=0;i<time;i++)
  7e:	1a 82       	std	Y+2, r1	; 0x02
  80:	19 82       	std	Y+1, r1	; 0x01
  82:	14 c0       	rjmp	.+40     	; 0xac <delay+0x40>
	{
		for(j=0;j<time;j++);
  84:	1c 82       	std	Y+4, r1	; 0x04
  86:	1b 82       	std	Y+3, r1	; 0x03
  88:	05 c0       	rjmp	.+10     	; 0x94 <delay+0x28>
  8a:	8b 81       	ldd	r24, Y+3	; 0x03
  8c:	9c 81       	ldd	r25, Y+4	; 0x04
  8e:	01 96       	adiw	r24, 0x01	; 1
  90:	9c 83       	std	Y+4, r25	; 0x04
  92:	8b 83       	std	Y+3, r24	; 0x03
  94:	2b 81       	ldd	r18, Y+3	; 0x03
  96:	3c 81       	ldd	r19, Y+4	; 0x04
  98:	8d 81       	ldd	r24, Y+5	; 0x05
  9a:	9e 81       	ldd	r25, Y+6	; 0x06
  9c:	28 17       	cp	r18, r24
  9e:	39 07       	cpc	r19, r25
  a0:	a4 f3       	brlt	.-24     	; 0x8a <delay+0x1e>
#define READ_BIT(reg,bit) 		((reg>>bit) & 1)

void delay (int time)
{
	volatile int i,j ;
	for (i=0;i<time;i++)
  a2:	89 81       	ldd	r24, Y+1	; 0x01
  a4:	9a 81       	ldd	r25, Y+2	; 0x02
  a6:	01 96       	adiw	r24, 0x01	; 1
  a8:	9a 83       	std	Y+2, r25	; 0x02
  aa:	89 83       	std	Y+1, r24	; 0x01
  ac:	29 81       	ldd	r18, Y+1	; 0x01
  ae:	3a 81       	ldd	r19, Y+2	; 0x02
  b0:	8d 81       	ldd	r24, Y+5	; 0x05
  b2:	9e 81       	ldd	r25, Y+6	; 0x06
  b4:	28 17       	cp	r18, r24
  b6:	39 07       	cpc	r19, r25
  b8:	2c f3       	brlt	.-54     	; 0x84 <delay+0x18>
	{
		for(j=0;j<time;j++);
	}
}
  ba:	00 00       	nop
  bc:	26 96       	adiw	r28, 0x06	; 6
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61
  c8:	df 91       	pop	r29
  ca:	cf 91       	pop	r28
  cc:	08 95       	ret

000000ce <GPIO_Init>:
#include "Utilities.h"



void GPIO_Init(void)
{
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRD,4);
  d6:	81 e3       	ldi	r24, 0x31	; 49
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	21 e3       	ldi	r18, 0x31	; 49
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	f9 01       	movw	r30, r18
  e0:	20 81       	ld	r18, Z
  e2:	20 61       	ori	r18, 0x10	; 16
  e4:	fc 01       	movw	r30, r24
  e6:	20 83       	st	Z, r18
	SET_BIT(DDRD,5);
  e8:	81 e3       	ldi	r24, 0x31	; 49
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	21 e3       	ldi	r18, 0x31	; 49
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	f9 01       	movw	r30, r18
  f2:	20 81       	ld	r18, Z
  f4:	20 62       	ori	r18, 0x20	; 32
  f6:	fc 01       	movw	r30, r24
  f8:	20 83       	st	Z, r18
	SET_BIT(DDRD,6);
  fa:	81 e3       	ldi	r24, 0x31	; 49
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	21 e3       	ldi	r18, 0x31	; 49
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	f9 01       	movw	r30, r18
 104:	20 81       	ld	r18, Z
 106:	20 64       	ori	r18, 0x40	; 64
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
	SET_BIT(DDRD,7);
 10c:	81 e3       	ldi	r24, 0x31	; 49
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	21 e3       	ldi	r18, 0x31	; 49
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	f9 01       	movw	r30, r18
 116:	20 81       	ld	r18, Z
 118:	20 68       	ori	r18, 0x80	; 128
 11a:	fc 01       	movw	r30, r24
 11c:	20 83       	st	Z, r18
}
 11e:	00 00       	nop
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <main>:

int main(void)
{
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	00 d0       	rcall	.+0      	; 0x12c <main+0x6>
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
	GPIO_Init();
 130:	0e 94 67 00 	call	0xce	; 0xce <GPIO_Init>
	volatile int i;
	while(1)
	{
		for(i=7;i>=4;i--)
 134:	87 e0       	ldi	r24, 0x07	; 7
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	9a 83       	std	Y+2, r25	; 0x02
 13a:	89 83       	std	Y+1, r24	; 0x01
 13c:	39 c0       	rjmp	.+114    	; 0x1b0 <main+0x8a>
		{
			SET_BIT(PORTD,i);
 13e:	29 81       	ldd	r18, Y+1	; 0x01
 140:	3a 81       	ldd	r19, Y+2	; 0x02
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	ac 01       	movw	r20, r24
 148:	02 c0       	rjmp	.+4      	; 0x14e <main+0x28>
 14a:	44 0f       	add	r20, r20
 14c:	55 1f       	adc	r21, r21
 14e:	2a 95       	dec	r18
 150:	e2 f7       	brpl	.-8      	; 0x14a <main+0x24>
 152:	82 e3       	ldi	r24, 0x32	; 50
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	22 e3       	ldi	r18, 0x32	; 50
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	f9 01       	movw	r30, r18
 15c:	20 81       	ld	r18, Z
 15e:	32 2f       	mov	r19, r18
 160:	24 2f       	mov	r18, r20
 162:	23 2b       	or	r18, r19
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18
			delay(500);
 168:	84 ef       	ldi	r24, 0xF4	; 244
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
			CLEAR_BIT(PORTD,i);
 170:	29 81       	ldd	r18, Y+1	; 0x01
 172:	3a 81       	ldd	r19, Y+2	; 0x02
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <main+0x58>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	2a 95       	dec	r18
 180:	e2 f7       	brpl	.-8      	; 0x17a <main+0x54>
 182:	ac 01       	movw	r20, r24
 184:	40 95       	com	r20
 186:	50 95       	com	r21
 188:	82 e3       	ldi	r24, 0x32	; 50
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	22 e3       	ldi	r18, 0x32	; 50
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	f9 01       	movw	r30, r18
 192:	20 81       	ld	r18, Z
 194:	32 2f       	mov	r19, r18
 196:	24 2f       	mov	r18, r20
 198:	23 23       	and	r18, r19
 19a:	fc 01       	movw	r30, r24
 19c:	20 83       	st	Z, r18
			delay(500);
 19e:	84 ef       	ldi	r24, 0xF4	; 244
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
{
	GPIO_Init();
	volatile int i;
	while(1)
	{
		for(i=7;i>=4;i--)
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
 1a8:	9a 81       	ldd	r25, Y+2	; 0x02
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	9a 83       	std	Y+2, r25	; 0x02
 1ae:	89 83       	std	Y+1, r24	; 0x01
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
 1b2:	9a 81       	ldd	r25, Y+2	; 0x02
 1b4:	04 97       	sbiw	r24, 0x04	; 4
 1b6:	1c f6       	brge	.-122    	; 0x13e <main+0x18>
			SET_BIT(PORTD,i);
			delay(500);
			CLEAR_BIT(PORTD,i);
			delay(500);
		}
	}
 1b8:	bd cf       	rjmp	.-134    	; 0x134 <main+0xe>

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
