
Task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000178  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000178  000001ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005c0  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000535  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000170  00000000  00000000  00000d75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00000ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ce  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  0000120a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000129a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 67 00 	call	0xce	; 0xce <main>
  64:	0c 94 ba 00 	jmp	0x174	; 0x174 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <delay>:
#define CLEAR_BIT(reg,bit) 		(reg &= ~(1<<bit))
#define TOGGLE_BIT(reg,bit) 	(reg ^= (1<<bit))
#define READ_BIT(reg,bit) 		((reg>>bit) & 1)

void delay (int time)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <delay+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <delay+0x8>
  74:	00 d0       	rcall	.+0      	; 0x76 <delay+0xa>
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	9e 83       	std	Y+6, r25	; 0x06
  7c:	8d 83       	std	Y+5, r24	; 0x05
	volatile int i,j ;
	for (i=0;i<time;i++)
  7e:	1a 82       	std	Y+2, r1	; 0x02
  80:	19 82       	std	Y+1, r1	; 0x01
  82:	14 c0       	rjmp	.+40     	; 0xac <delay+0x40>
	{
		for(j=0;j<time;j++);
  84:	1c 82       	std	Y+4, r1	; 0x04
  86:	1b 82       	std	Y+3, r1	; 0x03
  88:	05 c0       	rjmp	.+10     	; 0x94 <delay+0x28>
  8a:	8b 81       	ldd	r24, Y+3	; 0x03
  8c:	9c 81       	ldd	r25, Y+4	; 0x04
  8e:	01 96       	adiw	r24, 0x01	; 1
  90:	9c 83       	std	Y+4, r25	; 0x04
  92:	8b 83       	std	Y+3, r24	; 0x03
  94:	2b 81       	ldd	r18, Y+3	; 0x03
  96:	3c 81       	ldd	r19, Y+4	; 0x04
  98:	8d 81       	ldd	r24, Y+5	; 0x05
  9a:	9e 81       	ldd	r25, Y+6	; 0x06
  9c:	28 17       	cp	r18, r24
  9e:	39 07       	cpc	r19, r25
  a0:	a4 f3       	brlt	.-24     	; 0x8a <delay+0x1e>
#define READ_BIT(reg,bit) 		((reg>>bit) & 1)

void delay (int time)
{
	volatile int i,j ;
	for (i=0;i<time;i++)
  a2:	89 81       	ldd	r24, Y+1	; 0x01
  a4:	9a 81       	ldd	r25, Y+2	; 0x02
  a6:	01 96       	adiw	r24, 0x01	; 1
  a8:	9a 83       	std	Y+2, r25	; 0x02
  aa:	89 83       	std	Y+1, r24	; 0x01
  ac:	29 81       	ldd	r18, Y+1	; 0x01
  ae:	3a 81       	ldd	r19, Y+2	; 0x02
  b0:	8d 81       	ldd	r24, Y+5	; 0x05
  b2:	9e 81       	ldd	r25, Y+6	; 0x06
  b4:	28 17       	cp	r18, r24
  b6:	39 07       	cpc	r19, r25
  b8:	2c f3       	brlt	.-54     	; 0x84 <delay+0x18>
	{
		for(j=0;j<time;j++);
	}
}
  ba:	00 00       	nop
  bc:	26 96       	adiw	r28, 0x06	; 6
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61
  c8:	df 91       	pop	r29
  ca:	cf 91       	pop	r28
  cc:	08 95       	ret

000000ce <main>:
#include "MemMap.h"
#include "Utilities.h"


int main(void)
{
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	00 d0       	rcall	.+0      	; 0xd4 <main+0x6>
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xFF;
  d8:	8a e3       	ldi	r24, 0x3A	; 58
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	fc 01       	movw	r30, r24
  e0:	20 83       	st	Z, r18
	CLEAR_BIT(DDRC,0);
  e2:	84 e3       	ldi	r24, 0x34	; 52
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	24 e3       	ldi	r18, 0x34	; 52
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	f9 01       	movw	r30, r18
  ec:	20 81       	ld	r18, Z
  ee:	2e 7f       	andi	r18, 0xFE	; 254
  f0:	fc 01       	movw	r30, r24
  f2:	20 83       	st	Z, r18
	SET_BIT(PORTC,0);
  f4:	85 e3       	ldi	r24, 0x35	; 53
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	25 e3       	ldi	r18, 0x35	; 53
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	f9 01       	movw	r30, r18
  fe:	20 81       	ld	r18, Z
 100:	21 60       	ori	r18, 0x01	; 1
 102:	fc 01       	movw	r30, r24
 104:	20 83       	st	Z, r18
	volatile int i=0;
 106:	1a 82       	std	Y+2, r1	; 0x02
 108:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(i=0;i<=8;i++)
 10a:	1a 82       	std	Y+2, r1	; 0x02
 10c:	19 82       	std	Y+1, r1	; 0x01
 10e:	29 c0       	rjmp	.+82     	; 0x162 <main+0x94>
		{
			while(READ_BIT(PINC,0)== 1);
 110:	00 00       	nop
 112:	83 e3       	ldi	r24, 0x33	; 51
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	fc 01       	movw	r30, r24
 118:	80 81       	ld	r24, Z
 11a:	88 2f       	mov	r24, r24
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	81 70       	andi	r24, 0x01	; 1
 120:	99 27       	eor	r25, r25
 122:	89 2b       	or	r24, r25
 124:	b1 f7       	brne	.-20     	; 0x112 <main+0x44>
			SET_BIT(PORTA,i);
 126:	29 81       	ldd	r18, Y+1	; 0x01
 128:	3a 81       	ldd	r19, Y+2	; 0x02
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	ac 01       	movw	r20, r24
 130:	02 c0       	rjmp	.+4      	; 0x136 <main+0x68>
 132:	44 0f       	add	r20, r20
 134:	55 1f       	adc	r21, r21
 136:	2a 95       	dec	r18
 138:	e2 f7       	brpl	.-8      	; 0x132 <main+0x64>
 13a:	8b e3       	ldi	r24, 0x3B	; 59
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	2b e3       	ldi	r18, 0x3B	; 59
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	f9 01       	movw	r30, r18
 144:	20 81       	ld	r18, Z
 146:	32 2f       	mov	r19, r18
 148:	24 2f       	mov	r18, r20
 14a:	23 2b       	or	r18, r19
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18
			delay(500);
 150:	84 ef       	ldi	r24, 0xF4	; 244
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
	CLEAR_BIT(DDRC,0);
	SET_BIT(PORTC,0);
	volatile int i=0;
	while(1)
	{
		for(i=0;i<=8;i++)
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	9a 81       	ldd	r25, Y+2	; 0x02
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	9a 83       	std	Y+2, r25	; 0x02
 160:	89 83       	std	Y+1, r24	; 0x01
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	9a 81       	ldd	r25, Y+2	; 0x02
 166:	09 97       	sbiw	r24, 0x09	; 9
 168:	9c f2       	brlt	.-90     	; 0x110 <main+0x42>
		{
			while(READ_BIT(PINC,0)== 1);
			SET_BIT(PORTA,i);
			delay(500);
		}
		PORTA = 0x00;
 16a:	8b e3       	ldi	r24, 0x3B	; 59
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	fc 01       	movw	r30, r24
 170:	10 82       	st	Z, r1
	}
 172:	cb cf       	rjmp	.-106    	; 0x10a <main+0x3c>

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
