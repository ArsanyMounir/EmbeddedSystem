
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cd0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08000e00  08000e00  00010e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e2c  08000e2c  00010e34  2**0
                  CONTENTS
  4 .ARM          00000000  08000e2c  08000e2c  00010e34  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e2c  08000e34  00010e34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e2c  08000e2c  00010e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e30  08000e30  00010e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08000e34  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000e34  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010e34  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003382  00000000  00000000  00010e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000008d1  00000000  00000000  000141df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a14  00000000  00000000  00014ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a8  00000000  00000000  000154c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000160  00000000  00000000  00015670  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000009d8  00000000  00000000  000157d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001b16  00000000  00000000  000161a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000964c  00000000  00000000  00017cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002130a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000054c  00000000  00000000  00021388  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000de8 	.word	0x08000de8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000de8 	.word	0x08000de8

08000170 <LCD_kick>:
 * @param [in] 	-None
 * @retval 		-None
 * Note 		-None
 */
void LCD_kick(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 8000174:	2201      	movs	r2, #1
 8000176:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800017a:	4807      	ldr	r0, [pc, #28]	; (8000198 <LCD_kick+0x28>)
 800017c:	f000 fd49 	bl	8000c12 <MCAL_GPIO_WritePin>
	wait_ms(50);
 8000180:	2032      	movs	r0, #50	; 0x32
 8000182:	f000 f80b 	bl	800019c <wait_ms>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000186:	2200      	movs	r2, #0
 8000188:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800018c:	4802      	ldr	r0, [pc, #8]	; (8000198 <LCD_kick+0x28>)
 800018e:	f000 fd40 	bl	8000c12 <MCAL_GPIO_WritePin>
}
 8000192:	bf00      	nop
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	40010800 	.word	0x40010800

0800019c <wait_ms>:
 * @param [in] 	-time : Variable for amount of loops needed
 * @retval 		-None
 * Note 		-None
 */
void wait_ms(uint32_t time)
{
 800019c:	b480      	push	{r7}
 800019e:	b085      	sub	sp, #20
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0;i<time;i++)
 80001a4:	2300      	movs	r3, #0
 80001a6:	60fb      	str	r3, [r7, #12]
 80001a8:	e00c      	b.n	80001c4 <wait_ms+0x28>
		for(j=0;j<time;j++);
 80001aa:	2300      	movs	r3, #0
 80001ac:	60bb      	str	r3, [r7, #8]
 80001ae:	e002      	b.n	80001b6 <wait_ms+0x1a>
 80001b0:	68bb      	ldr	r3, [r7, #8]
 80001b2:	3301      	adds	r3, #1
 80001b4:	60bb      	str	r3, [r7, #8]
 80001b6:	68ba      	ldr	r2, [r7, #8]
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	429a      	cmp	r2, r3
 80001bc:	d3f8      	bcc.n	80001b0 <wait_ms+0x14>
	for(i=0;i<time;i++)
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	3301      	adds	r3, #1
 80001c2:	60fb      	str	r3, [r7, #12]
 80001c4:	68fa      	ldr	r2, [r7, #12]
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	429a      	cmp	r2, r3
 80001ca:	d3ee      	bcc.n	80001aa <wait_ms+0xe>
}
 80001cc:	bf00      	nop
 80001ce:	3714      	adds	r7, #20
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
	...

080001d8 <LCD_GPIO_Init>:
 * @retval 		-None
 * Note 		-None
 */

void LCD_GPIO_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t PinConfig ;
	//Set RS_SWITCH As Push-Pull Output with Speed 10MHz
	PinConfig.GPIO_PinNumber = RS_SWITCH;
 80001de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80001e2:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001e4:	2304      	movs	r3, #4
 80001e6:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 80001e8:	2301      	movs	r3, #1
 80001ea:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	4619      	mov	r1, r3
 80001f0:	4844      	ldr	r0, [pc, #272]	; (8000304 <LCD_GPIO_Init+0x12c>)
 80001f2:	f000 fc78 	bl	8000ae6 <MCAL_GPIO_Init>


	//Set RW_SWITCH As Push-Pull Output with Speed 10MHz
	PinConfig.GPIO_PinNumber = RW_SWITCH;
 80001f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80001fa:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001fc:	2304      	movs	r3, #4
 80001fe:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000200:	2301      	movs	r3, #1
 8000202:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 8000204:	1d3b      	adds	r3, r7, #4
 8000206:	4619      	mov	r1, r3
 8000208:	483e      	ldr	r0, [pc, #248]	; (8000304 <LCD_GPIO_Init+0x12c>)
 800020a:	f000 fc6c 	bl	8000ae6 <MCAL_GPIO_Init>

	//Set EN_SWITCH As Push-Pull Output with Speed 10MHz
	PinConfig.GPIO_PinNumber = EN_SWITCH;
 800020e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000212:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000214:	2304      	movs	r3, #4
 8000216:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000218:	2301      	movs	r3, #1
 800021a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	4619      	mov	r1, r3
 8000220:	4838      	ldr	r0, [pc, #224]	; (8000304 <LCD_GPIO_Init+0x12c>)
 8000222:	f000 fc60 	bl	8000ae6 <MCAL_GPIO_Init>

	//Set the LCD 8 PINS as Output
	PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 8000226:	2301      	movs	r3, #1
 8000228:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800022a:	2304      	movs	r3, #4
 800022c:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 800022e:	2301      	movs	r3, #1
 8000230:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4619      	mov	r1, r3
 8000236:	4833      	ldr	r0, [pc, #204]	; (8000304 <LCD_GPIO_Init+0x12c>)
 8000238:	f000 fc55 	bl	8000ae6 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 800023c:	2302      	movs	r3, #2
 800023e:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000240:	2304      	movs	r3, #4
 8000242:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000244:	2301      	movs	r3, #1
 8000246:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	4619      	mov	r1, r3
 800024c:	482d      	ldr	r0, [pc, #180]	; (8000304 <LCD_GPIO_Init+0x12c>)
 800024e:	f000 fc4a 	bl	8000ae6 <MCAL_GPIO_Init>


	PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 8000252:	2304      	movs	r3, #4
 8000254:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000256:	2304      	movs	r3, #4
 8000258:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 800025a:	2301      	movs	r3, #1
 800025c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	4619      	mov	r1, r3
 8000262:	4828      	ldr	r0, [pc, #160]	; (8000304 <LCD_GPIO_Init+0x12c>)
 8000264:	f000 fc3f 	bl	8000ae6 <MCAL_GPIO_Init>


	PinConfig.GPIO_PinNumber = GPIO_PIN_3;
 8000268:	2308      	movs	r3, #8
 800026a:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800026c:	2304      	movs	r3, #4
 800026e:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000270:	2301      	movs	r3, #1
 8000272:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	4619      	mov	r1, r3
 8000278:	4822      	ldr	r0, [pc, #136]	; (8000304 <LCD_GPIO_Init+0x12c>)
 800027a:	f000 fc34 	bl	8000ae6 <MCAL_GPIO_Init>


	PinConfig.GPIO_PinNumber = GPIO_PIN_4;
 800027e:	2310      	movs	r3, #16
 8000280:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000282:	2304      	movs	r3, #4
 8000284:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000286:	2301      	movs	r3, #1
 8000288:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4619      	mov	r1, r3
 800028e:	481d      	ldr	r0, [pc, #116]	; (8000304 <LCD_GPIO_Init+0x12c>)
 8000290:	f000 fc29 	bl	8000ae6 <MCAL_GPIO_Init>


	PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 8000294:	2320      	movs	r3, #32
 8000296:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000298:	2304      	movs	r3, #4
 800029a:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 800029c:	2301      	movs	r3, #1
 800029e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	4619      	mov	r1, r3
 80002a4:	4817      	ldr	r0, [pc, #92]	; (8000304 <LCD_GPIO_Init+0x12c>)
 80002a6:	f000 fc1e 	bl	8000ae6 <MCAL_GPIO_Init>


	PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 80002aa:	2340      	movs	r3, #64	; 0x40
 80002ac:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002ae:	2304      	movs	r3, #4
 80002b0:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 80002b2:	2301      	movs	r3, #1
 80002b4:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4619      	mov	r1, r3
 80002ba:	4812      	ldr	r0, [pc, #72]	; (8000304 <LCD_GPIO_Init+0x12c>)
 80002bc:	f000 fc13 	bl	8000ae6 <MCAL_GPIO_Init>


	PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 80002c0:	2380      	movs	r3, #128	; 0x80
 80002c2:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002c4:	2304      	movs	r3, #4
 80002c6:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 80002c8:	2301      	movs	r3, #1
 80002ca:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	4619      	mov	r1, r3
 80002d0:	480c      	ldr	r0, [pc, #48]	; (8000304 <LCD_GPIO_Init+0x12c>)
 80002d2:	f000 fc08 	bl	8000ae6 <MCAL_GPIO_Init>

	//Reset EN Switch Pin
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80002d6:	2200      	movs	r2, #0
 80002d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002dc:	4809      	ldr	r0, [pc, #36]	; (8000304 <LCD_GPIO_Init+0x12c>)
 80002de:	f000 fc98 	bl	8000c12 <MCAL_GPIO_WritePin>
	//Reset RS Switch Pin
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002e8:	4806      	ldr	r0, [pc, #24]	; (8000304 <LCD_GPIO_Init+0x12c>)
 80002ea:	f000 fc92 	bl	8000c12 <MCAL_GPIO_WritePin>
	//Reset RW Switch Pin
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80002ee:	2200      	movs	r2, #0
 80002f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f4:	4803      	ldr	r0, [pc, #12]	; (8000304 <LCD_GPIO_Init+0x12c>)
 80002f6:	f000 fc8c 	bl	8000c12 <MCAL_GPIO_WritePin>


}
 80002fa:	bf00      	nop
 80002fc:	3708      	adds	r7, #8
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40010800 	.word	0x40010800

08000308 <HAL_LCD_Init>:
 * @retval 		-None
 * Note 		-None
 */

void HAL_LCD_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	wait_ms(20);
 800030c:	2014      	movs	r0, #20
 800030e:	f7ff ff45 	bl	800019c <wait_ms>
	LCD_GPIO_Init();
 8000312:	f7ff ff61 	bl	80001d8 <LCD_GPIO_Init>
	wait_ms(15);
 8000316:	200f      	movs	r0, #15
 8000318:	f7ff ff40 	bl	800019c <wait_ms>
	HAL_LCD_CLEAR();
 800031c:	f000 f87a 	bl	8000414 <HAL_LCD_CLEAR>
#ifdef EIGHT_BIT_MODE
	HAL_LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000320:	2038      	movs	r0, #56	; 0x38
 8000322:	f000 f80b 	bl	800033c <HAL_LCD_WRITE_COMMAND>

	HAL_LCD_WRITE_COMMAND(0x02);
	HAL_LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);

#endif
	HAL_LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 8000326:	2006      	movs	r0, #6
 8000328:	f000 f808 	bl	800033c <HAL_LCD_WRITE_COMMAND>
	HAL_LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 800032c:	2080      	movs	r0, #128	; 0x80
 800032e:	f000 f805 	bl	800033c <HAL_LCD_WRITE_COMMAND>
	HAL_LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 8000332:	200f      	movs	r0, #15
 8000334:	f000 f802 	bl	800033c <HAL_LCD_WRITE_COMMAND>
}
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}

0800033c <HAL_LCD_WRITE_COMMAND>:
 * @retval 		-None
 * Note 		-None
 */

void HAL_LCD_WRITE_COMMAND(uint8_t command)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	71fb      	strb	r3, [r7, #7]

#ifdef EIGHT_BIT_MODE
	//HAL_LCD_isbusy();
	MCAL_GPIO_WritePort(LCD_CTRL, command);
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	b29b      	uxth	r3, r3
 800034a:	4619      	mov	r1, r3
 800034c:	480a      	ldr	r0, [pc, #40]	; (8000378 <HAL_LCD_WRITE_COMMAND+0x3c>)
 800034e:	f000 fc77 	bl	8000c40 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000352:	2200      	movs	r2, #0
 8000354:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000358:	4807      	ldr	r0, [pc, #28]	; (8000378 <HAL_LCD_WRITE_COMMAND+0x3c>)
 800035a:	f000 fc5a 	bl	8000c12 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000364:	4804      	ldr	r0, [pc, #16]	; (8000378 <HAL_LCD_WRITE_COMMAND+0x3c>)
 8000366:	f000 fc54 	bl	8000c12 <MCAL_GPIO_WritePin>
	LCD_kick();
 800036a:	f7ff ff01 	bl	8000170 <LCD_kick>
	wait_ms(10);
	LCD_kick();

#endif

}
 800036e:	bf00      	nop
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40010800 	.word	0x40010800

0800037c <HAL_LCD_WRITE_CHAR>:
 * @param [in] 	-data : takes a single character to be displayed
 * @retval 		-None
 * Note 		-None
 */
void HAL_LCD_WRITE_CHAR(char data)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	4603      	mov	r3, r0
 8000384:	71fb      	strb	r3, [r7, #7]
#ifdef EIGHT_BIT_MODE
	//HAL_LCD_isbusy();
	MCAL_GPIO_WritePort(LCD_CTRL, data);
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	b29b      	uxth	r3, r3
 800038a:	4619      	mov	r1, r3
 800038c:	480a      	ldr	r0, [pc, #40]	; (80003b8 <HAL_LCD_WRITE_CHAR+0x3c>)
 800038e:	f000 fc57 	bl	8000c40 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000398:	4807      	ldr	r0, [pc, #28]	; (80003b8 <HAL_LCD_WRITE_CHAR+0x3c>)
 800039a:	f000 fc3a 	bl	8000c12 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 800039e:	2201      	movs	r2, #1
 80003a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a4:	4804      	ldr	r0, [pc, #16]	; (80003b8 <HAL_LCD_WRITE_CHAR+0x3c>)
 80003a6:	f000 fc34 	bl	8000c12 <MCAL_GPIO_WritePin>
	LCD_kick();
 80003aa:	f7ff fee1 	bl	8000170 <LCD_kick>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
	MCAL_GPIO_WritePort(LCD_CTRL, (command << 4));
	wait_ms(10);
	LCD_kick();
#endif
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40010800 	.word	0x40010800

080003bc <HAL_LCD_WRITE_STR>:
 * @param [in] 	-data :takes a String of character to be displayed
 * @retval 		-None
 * Note 		-None
 */
void HAL_LCD_WRITE_STR(char* data)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
	int i = 0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	60fb      	str	r3, [r7, #12]
	while(*data != '\0')
 80003c8:	e01c      	b.n	8000404 <HAL_LCD_WRITE_STR+0x48>
	{
		HAL_LCD_WRITE_CHAR(*data++);
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	1c5a      	adds	r2, r3, #1
 80003ce:	607a      	str	r2, [r7, #4]
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	4618      	mov	r0, r3
 80003d4:	f7ff ffd2 	bl	800037c <HAL_LCD_WRITE_CHAR>
		i++;
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	3301      	adds	r3, #1
 80003dc:	60fb      	str	r3, [r7, #12]
		if(i == 16)
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	2b10      	cmp	r3, #16
 80003e2:	d104      	bne.n	80003ee <HAL_LCD_WRITE_STR+0x32>
		{
			HAL_LCD_GOTO_XY(2,0);
 80003e4:	2100      	movs	r1, #0
 80003e6:	2002      	movs	r0, #2
 80003e8:	f000 f81b 	bl	8000422 <HAL_LCD_GOTO_XY>
 80003ec:	e00a      	b.n	8000404 <HAL_LCD_WRITE_STR+0x48>
		}
		else if(i==32)
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	2b20      	cmp	r3, #32
 80003f2:	d107      	bne.n	8000404 <HAL_LCD_WRITE_STR+0x48>
		{
			HAL_LCD_CLEAR();
 80003f4:	f000 f80e 	bl	8000414 <HAL_LCD_CLEAR>
			HAL_LCD_GOTO_XY(1,0);
 80003f8:	2100      	movs	r1, #0
 80003fa:	2001      	movs	r0, #1
 80003fc:	f000 f811 	bl	8000422 <HAL_LCD_GOTO_XY>
			i =0;
 8000400:	2300      	movs	r3, #0
 8000402:	60fb      	str	r3, [r7, #12]
	while(*data != '\0')
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d1de      	bne.n	80003ca <HAL_LCD_WRITE_STR+0xe>
		}
	}
}
 800040c:	bf00      	nop
 800040e:	3710      	adds	r7, #16
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}

08000414 <HAL_LCD_CLEAR>:
 * @param [in] 	-None
 * @retval 		-None
 * Note 		-None
 */
void HAL_LCD_CLEAR(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
	HAL_LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000418:	2001      	movs	r0, #1
 800041a:	f7ff ff8f 	bl	800033c <HAL_LCD_WRITE_COMMAND>

}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}

08000422 <HAL_LCD_GOTO_XY>:
 * @param [in] 	-Position : which Character position of the line chosen to move to , choose a value from 0->16
 * @retval 		-None
 * Note 		-None
 */
void HAL_LCD_GOTO_XY(int line , int position)
{
 8000422:	b580      	push	{r7, lr}
 8000424:	b082      	sub	sp, #8
 8000426:	af00      	add	r7, sp, #0
 8000428:	6078      	str	r0, [r7, #4]
 800042a:	6039      	str	r1, [r7, #0]
	if (line == FIRST_LINE)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	2b01      	cmp	r3, #1
 8000430:	d10d      	bne.n	800044e <HAL_LCD_GOTO_XY+0x2c>
	{
		if(position <16 && position>=0)
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	2b0f      	cmp	r3, #15
 8000436:	dc1a      	bgt.n	800046e <HAL_LCD_GOTO_XY+0x4c>
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	2b00      	cmp	r3, #0
 800043c:	db17      	blt.n	800046e <HAL_LCD_GOTO_XY+0x4c>
		{
			HAL_LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	b2db      	uxtb	r3, r3
 8000442:	3b80      	subs	r3, #128	; 0x80
 8000444:	b2db      	uxtb	r3, r3
 8000446:	4618      	mov	r0, r3
 8000448:	f7ff ff78 	bl	800033c <HAL_LCD_WRITE_COMMAND>
		{
			HAL_LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);

		}
	}
}
 800044c:	e00f      	b.n	800046e <HAL_LCD_GOTO_XY+0x4c>
	else if (line == SECOND_LINE)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	2b02      	cmp	r3, #2
 8000452:	d10c      	bne.n	800046e <HAL_LCD_GOTO_XY+0x4c>
		if(position <16 && position>=0)
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	2b0f      	cmp	r3, #15
 8000458:	dc09      	bgt.n	800046e <HAL_LCD_GOTO_XY+0x4c>
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	db06      	blt.n	800046e <HAL_LCD_GOTO_XY+0x4c>
			HAL_LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	b2db      	uxtb	r3, r3
 8000464:	3b40      	subs	r3, #64	; 0x40
 8000466:	b2db      	uxtb	r3, r3
 8000468:	4618      	mov	r0, r3
 800046a:	f7ff ff67 	bl	800033c <HAL_LCD_WRITE_COMMAND>
}
 800046e:	bf00      	nop
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <ENABLE_NVIC>:
//========================================================
//					Generic Functions
//========================================================

void ENABLE_NVIC (uint16_t IRQ)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 8000482:	88fb      	ldrh	r3, [r7, #6]
 8000484:	2b0f      	cmp	r3, #15
 8000486:	d854      	bhi.n	8000532 <ENABLE_NVIC+0xba>
 8000488:	a201      	add	r2, pc, #4	; (adr r2, 8000490 <ENABLE_NVIC+0x18>)
 800048a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800048e:	bf00      	nop
 8000490:	080004d1 	.word	0x080004d1
 8000494:	080004df 	.word	0x080004df
 8000498:	080004ed 	.word	0x080004ed
 800049c:	080004fb 	.word	0x080004fb
 80004a0:	08000509 	.word	0x08000509
 80004a4:	08000517 	.word	0x08000517
 80004a8:	08000517 	.word	0x08000517
 80004ac:	08000517 	.word	0x08000517
 80004b0:	08000517 	.word	0x08000517
 80004b4:	08000517 	.word	0x08000517
 80004b8:	08000525 	.word	0x08000525
 80004bc:	08000525 	.word	0x08000525
 80004c0:	08000525 	.word	0x08000525
 80004c4:	08000525 	.word	0x08000525
 80004c8:	08000525 	.word	0x08000525
 80004cc:	08000525 	.word	0x08000525
	{
	case 0 :
		NVIC_IRQ6_EXTI0_Enable();
 80004d0:	4b1a      	ldr	r3, [pc, #104]	; (800053c <ENABLE_NVIC+0xc4>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a19      	ldr	r2, [pc, #100]	; (800053c <ENABLE_NVIC+0xc4>)
 80004d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004da:	6013      	str	r3, [r2, #0]
		break;
 80004dc:	e029      	b.n	8000532 <ENABLE_NVIC+0xba>
	case 1 :
		NVIC_IRQ7_EXTI1_Enable();
 80004de:	4b17      	ldr	r3, [pc, #92]	; (800053c <ENABLE_NVIC+0xc4>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a16      	ldr	r2, [pc, #88]	; (800053c <ENABLE_NVIC+0xc4>)
 80004e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004e8:	6013      	str	r3, [r2, #0]
		break;
 80004ea:	e022      	b.n	8000532 <ENABLE_NVIC+0xba>
	case 2 :
		NVIC_IRQ8_EXTI2_Enable();
 80004ec:	4b13      	ldr	r3, [pc, #76]	; (800053c <ENABLE_NVIC+0xc4>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a12      	ldr	r2, [pc, #72]	; (800053c <ENABLE_NVIC+0xc4>)
 80004f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004f6:	6013      	str	r3, [r2, #0]
		break;
 80004f8:	e01b      	b.n	8000532 <ENABLE_NVIC+0xba>
	case 3 :
		NVIC_IRQ9_EXTI3_Enable();
 80004fa:	4b10      	ldr	r3, [pc, #64]	; (800053c <ENABLE_NVIC+0xc4>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a0f      	ldr	r2, [pc, #60]	; (800053c <ENABLE_NVIC+0xc4>)
 8000500:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000504:	6013      	str	r3, [r2, #0]
		break;
 8000506:	e014      	b.n	8000532 <ENABLE_NVIC+0xba>
	case 4 :
		NVIC_IRQ10_EXTI4_Enable();
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <ENABLE_NVIC+0xc4>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0b      	ldr	r2, [pc, #44]	; (800053c <ENABLE_NVIC+0xc4>)
 800050e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000512:	6013      	str	r3, [r2, #0]
		break;
 8000514:	e00d      	b.n	8000532 <ENABLE_NVIC+0xba>
	case 5 :
	case 6 :
	case 7 :
	case 8 :
	case 9 :
		NVIC_IRQ23_EXTI5_9_Enable();
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <ENABLE_NVIC+0xc4>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a08      	ldr	r2, [pc, #32]	; (800053c <ENABLE_NVIC+0xc4>)
 800051c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000520:	6013      	str	r3, [r2, #0]
		break;
 8000522:	e006      	b.n	8000532 <ENABLE_NVIC+0xba>
	case 11 :
	case 12 :
	case 13 :
	case 14 :
	case 15	:
		NVIC_IRQ40_EXTI10_15_Enable();
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <ENABLE_NVIC+0xc8>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a05      	ldr	r2, [pc, #20]	; (8000540 <ENABLE_NVIC+0xc8>)
 800052a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052e:	6013      	str	r3, [r2, #0]
		break;
 8000530:	bf00      	nop

	}
}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr
 800053c:	e000e100 	.word	0xe000e100
 8000540:	e000e104 	.word	0xe000e104

08000544 <DISABLE_NVIC>:

void DISABLE_NVIC (uint16_t IRQ)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 800054e:	88fb      	ldrh	r3, [r7, #6]
 8000550:	2b0f      	cmp	r3, #15
 8000552:	d854      	bhi.n	80005fe <DISABLE_NVIC+0xba>
 8000554:	a201      	add	r2, pc, #4	; (adr r2, 800055c <DISABLE_NVIC+0x18>)
 8000556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800055a:	bf00      	nop
 800055c:	0800059d 	.word	0x0800059d
 8000560:	080005ab 	.word	0x080005ab
 8000564:	080005b9 	.word	0x080005b9
 8000568:	080005c7 	.word	0x080005c7
 800056c:	080005d5 	.word	0x080005d5
 8000570:	080005e3 	.word	0x080005e3
 8000574:	080005e3 	.word	0x080005e3
 8000578:	080005e3 	.word	0x080005e3
 800057c:	080005e3 	.word	0x080005e3
 8000580:	080005e3 	.word	0x080005e3
 8000584:	080005f1 	.word	0x080005f1
 8000588:	080005f1 	.word	0x080005f1
 800058c:	080005f1 	.word	0x080005f1
 8000590:	080005f1 	.word	0x080005f1
 8000594:	080005f1 	.word	0x080005f1
 8000598:	080005f1 	.word	0x080005f1
	{
	case 0 :
		NVIC_IRQ6_EXTI0_Disable();
 800059c:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <DISABLE_NVIC+0xc4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a19      	ldr	r2, [pc, #100]	; (8000608 <DISABLE_NVIC+0xc4>)
 80005a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005a6:	6013      	str	r3, [r2, #0]
		break;
 80005a8:	e029      	b.n	80005fe <DISABLE_NVIC+0xba>
	case 1 :
		NVIC_IRQ7_EXTI1_Disable();
 80005aa:	4b17      	ldr	r3, [pc, #92]	; (8000608 <DISABLE_NVIC+0xc4>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a16      	ldr	r2, [pc, #88]	; (8000608 <DISABLE_NVIC+0xc4>)
 80005b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b4:	6013      	str	r3, [r2, #0]
		break;
 80005b6:	e022      	b.n	80005fe <DISABLE_NVIC+0xba>
	case 2 :
		NVIC_IRQ8_EXTI2_Disable();
 80005b8:	4b13      	ldr	r3, [pc, #76]	; (8000608 <DISABLE_NVIC+0xc4>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a12      	ldr	r2, [pc, #72]	; (8000608 <DISABLE_NVIC+0xc4>)
 80005be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c2:	6013      	str	r3, [r2, #0]
		break;
 80005c4:	e01b      	b.n	80005fe <DISABLE_NVIC+0xba>
	case 3 :
		NVIC_IRQ9_EXTI3_Disable();
 80005c6:	4b10      	ldr	r3, [pc, #64]	; (8000608 <DISABLE_NVIC+0xc4>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a0f      	ldr	r2, [pc, #60]	; (8000608 <DISABLE_NVIC+0xc4>)
 80005cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005d0:	6013      	str	r3, [r2, #0]
		break;
 80005d2:	e014      	b.n	80005fe <DISABLE_NVIC+0xba>
	case 4 :
		NVIC_IRQ10_EXTI4_Disable();
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <DISABLE_NVIC+0xc4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <DISABLE_NVIC+0xc4>)
 80005da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005de:	6013      	str	r3, [r2, #0]
		break;
 80005e0:	e00d      	b.n	80005fe <DISABLE_NVIC+0xba>
	case 5 :
	case 6 :
	case 7 :
	case 8 :
	case 9 :
		NVIC_IRQ23_EXTI5_9_Disable();
 80005e2:	4b09      	ldr	r3, [pc, #36]	; (8000608 <DISABLE_NVIC+0xc4>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a08      	ldr	r2, [pc, #32]	; (8000608 <DISABLE_NVIC+0xc4>)
 80005e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005ec:	6013      	str	r3, [r2, #0]
		break;
 80005ee:	e006      	b.n	80005fe <DISABLE_NVIC+0xba>
	case 11 :
	case 12 :
	case 13 :
	case 14 :
	case 15	:
		NVIC_IRQ40_EXTI10_15_Disable();
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <DISABLE_NVIC+0xc8>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a05      	ldr	r2, [pc, #20]	; (800060c <DISABLE_NVIC+0xc8>)
 80005f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005fa:	6013      	str	r3, [r2, #0]
		break;
 80005fc:	bf00      	nop

	}
}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr
 8000608:	e000e180 	.word	0xe000e180
 800060c:	e000e184 	.word	0xe000e184

08000610 <Update_EXTI>:




void Update_EXTI(EXTI_PinConfig_t* EXTI_Config)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	//Configure GPIO Pin to work as AF Input (Floating Input)
	GPIO_PinConfig_t PinConfig;
	PinConfig.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	891b      	ldrh	r3, [r3, #8]
 800061c:	813b      	strh	r3, [r7, #8]
	PinConfig.GPIO_MODE = GPIO_MODE_AF_INPUT;
 800061e:	2308      	movs	r3, #8
 8000620:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_PORT, &PinConfig);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	f107 0208 	add.w	r2, r7, #8
 800062a:	4611      	mov	r1, r2
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fa5a 	bl	8000ae6 <MCAL_GPIO_Init>


	//Update AFIO to Route to EXTI line with PORT A, B, C, D
	uint8_t AFIO_EXTICR_Index = EXTI_Config->EXTI_PIN.EXTI_InputLineNumber /4;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	089b      	lsrs	r3, r3, #2
 8000638:	b29b      	uxth	r3, r3
 800063a:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_Position =(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber %4 )*4 ;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	f003 0303 	and.w	r3, r3, #3
 8000646:	b2db      	uxtb	r3, r3
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	73bb      	strb	r3, [r7, #14]
	//Note: remainder gives an index that when multiplied by 4 gives the exact bit index

	//Clear 4 bits to prevent wrong port selection
	AFIO->EXTICR[AFIO_EXTICR_Index] &= ~(0xF<<AFIO_EXTICR_Position);
 800064c:	4a5f      	ldr	r2, [pc, #380]	; (80007cc <Update_EXTI+0x1bc>)
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	3302      	adds	r3, #2
 8000652:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000656:	7bbb      	ldrb	r3, [r7, #14]
 8000658:	210f      	movs	r1, #15
 800065a:	fa01 f303 	lsl.w	r3, r1, r3
 800065e:	43db      	mvns	r3, r3
 8000660:	4618      	mov	r0, r3
 8000662:	495a      	ldr	r1, [pc, #360]	; (80007cc <Update_EXTI+0x1bc>)
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	4002      	ands	r2, r0
 8000668:	3302      	adds	r3, #2
 800066a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_EXTICR_Index] |= ((AFIO_GPIO_EXTI_MAPPING(EXTI_Config->EXTI_PIN.GPIO_PORT) & 0xF) << AFIO_EXTICR_Position );
 800066e:	4a57      	ldr	r2, [pc, #348]	; (80007cc <Update_EXTI+0x1bc>)
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	3302      	adds	r3, #2
 8000674:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	4954      	ldr	r1, [pc, #336]	; (80007d0 <Update_EXTI+0x1c0>)
 800067e:	428b      	cmp	r3, r1
 8000680:	d016      	beq.n	80006b0 <Update_EXTI+0xa0>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	4953      	ldr	r1, [pc, #332]	; (80007d4 <Update_EXTI+0x1c4>)
 8000688:	428b      	cmp	r3, r1
 800068a:	d00f      	beq.n	80006ac <Update_EXTI+0x9c>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	4951      	ldr	r1, [pc, #324]	; (80007d8 <Update_EXTI+0x1c8>)
 8000692:	428b      	cmp	r3, r1
 8000694:	d008      	beq.n	80006a8 <Update_EXTI+0x98>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	4950      	ldr	r1, [pc, #320]	; (80007dc <Update_EXTI+0x1cc>)
 800069c:	428b      	cmp	r3, r1
 800069e:	d101      	bne.n	80006a4 <Update_EXTI+0x94>
 80006a0:	2303      	movs	r3, #3
 80006a2:	e006      	b.n	80006b2 <Update_EXTI+0xa2>
 80006a4:	2300      	movs	r3, #0
 80006a6:	e004      	b.n	80006b2 <Update_EXTI+0xa2>
 80006a8:	2302      	movs	r3, #2
 80006aa:	e002      	b.n	80006b2 <Update_EXTI+0xa2>
 80006ac:	2301      	movs	r3, #1
 80006ae:	e000      	b.n	80006b2 <Update_EXTI+0xa2>
 80006b0:	2300      	movs	r3, #0
 80006b2:	7bb9      	ldrb	r1, [r7, #14]
 80006b4:	408b      	lsls	r3, r1
 80006b6:	4618      	mov	r0, r3
 80006b8:	4944      	ldr	r1, [pc, #272]	; (80007cc <Update_EXTI+0x1bc>)
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	4302      	orrs	r2, r0
 80006be:	3302      	adds	r3, #2
 80006c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]



	//Update Rising Or Falling Edge OR BOTH
	EXTI->RTSR &=~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80006c4:	4b46      	ldr	r3, [pc, #280]	; (80007e0 <Update_EXTI+0x1d0>)
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	8812      	ldrh	r2, [r2, #0]
 80006cc:	4611      	mov	r1, r2
 80006ce:	2201      	movs	r2, #1
 80006d0:	408a      	lsls	r2, r1
 80006d2:	43d2      	mvns	r2, r2
 80006d4:	4611      	mov	r1, r2
 80006d6:	4a42      	ldr	r2, [pc, #264]	; (80007e0 <Update_EXTI+0x1d0>)
 80006d8:	400b      	ands	r3, r1
 80006da:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &=~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80006dc:	4b40      	ldr	r3, [pc, #256]	; (80007e0 <Update_EXTI+0x1d0>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	8812      	ldrh	r2, [r2, #0]
 80006e4:	4611      	mov	r1, r2
 80006e6:	2201      	movs	r2, #1
 80006e8:	408a      	lsls	r2, r1
 80006ea:	43d2      	mvns	r2, r2
 80006ec:	4611      	mov	r1, r2
 80006ee:	4a3c      	ldr	r2, [pc, #240]	; (80007e0 <Update_EXTI+0x1d0>)
 80006f0:	400b      	ands	r3, r1
 80006f2:	60d3      	str	r3, [r2, #12]

	if(EXTI_Config->Trigger_Case == EXTI_Trigger_RISING)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	7b1b      	ldrb	r3, [r3, #12]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d10b      	bne.n	8000714 <Update_EXTI+0x104>
	{
		EXTI->RTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80006fc:	4b38      	ldr	r3, [pc, #224]	; (80007e0 <Update_EXTI+0x1d0>)
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	8812      	ldrh	r2, [r2, #0]
 8000704:	4611      	mov	r1, r2
 8000706:	2201      	movs	r2, #1
 8000708:	408a      	lsls	r2, r1
 800070a:	4611      	mov	r1, r2
 800070c:	4a34      	ldr	r2, [pc, #208]	; (80007e0 <Update_EXTI+0x1d0>)
 800070e:	430b      	orrs	r3, r1
 8000710:	6093      	str	r3, [r2, #8]
 8000712:	e029      	b.n	8000768 <Update_EXTI+0x158>
	}
	else if (EXTI_Config->Trigger_Case == EXTI_Trigger_FALLING)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	7b1b      	ldrb	r3, [r3, #12]
 8000718:	2b01      	cmp	r3, #1
 800071a:	d10b      	bne.n	8000734 <Update_EXTI+0x124>
	{
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800071c:	4b30      	ldr	r3, [pc, #192]	; (80007e0 <Update_EXTI+0x1d0>)
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	8812      	ldrh	r2, [r2, #0]
 8000724:	4611      	mov	r1, r2
 8000726:	2201      	movs	r2, #1
 8000728:	408a      	lsls	r2, r1
 800072a:	4611      	mov	r1, r2
 800072c:	4a2c      	ldr	r2, [pc, #176]	; (80007e0 <Update_EXTI+0x1d0>)
 800072e:	430b      	orrs	r3, r1
 8000730:	60d3      	str	r3, [r2, #12]
 8000732:	e019      	b.n	8000768 <Update_EXTI+0x158>
	}
	else if (EXTI_Config->Trigger_Case == EXTI_Trigger_BOTH)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	7b1b      	ldrb	r3, [r3, #12]
 8000738:	2b02      	cmp	r3, #2
 800073a:	d115      	bne.n	8000768 <Update_EXTI+0x158>
	{
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800073c:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <Update_EXTI+0x1d0>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	8812      	ldrh	r2, [r2, #0]
 8000744:	4611      	mov	r1, r2
 8000746:	2201      	movs	r2, #1
 8000748:	408a      	lsls	r2, r1
 800074a:	4611      	mov	r1, r2
 800074c:	4a24      	ldr	r2, [pc, #144]	; (80007e0 <Update_EXTI+0x1d0>)
 800074e:	430b      	orrs	r3, r1
 8000750:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000752:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <Update_EXTI+0x1d0>)
 8000754:	689b      	ldr	r3, [r3, #8]
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	8812      	ldrh	r2, [r2, #0]
 800075a:	4611      	mov	r1, r2
 800075c:	2201      	movs	r2, #1
 800075e:	408a      	lsls	r2, r1
 8000760:	4611      	mov	r1, r2
 8000762:	4a1f      	ldr	r2, [pc, #124]	; (80007e0 <Update_EXTI+0x1d0>)
 8000764:	430b      	orrs	r3, r1
 8000766:	6093      	str	r3, [r2, #8]
	}


	//Update IRQ Handling Callback
	GP_IRQ_CALLBACK[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->Ptr_IRQ_CALLBACK;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	4619      	mov	r1, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	691b      	ldr	r3, [r3, #16]
 8000772:	4a1c      	ldr	r2, [pc, #112]	; (80007e4 <Update_EXTI+0x1d4>)
 8000774:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//Enable or Disable IRQ & NVIC
	if(EXTI_Config->IRQ_Enable == EXTI_IRQ_ENBALE)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	7b5b      	ldrb	r3, [r3, #13]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d110      	bne.n	80007a2 <Update_EXTI+0x192>
	{
		EXTI->IMR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <Update_EXTI+0x1d0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	8812      	ldrh	r2, [r2, #0]
 8000788:	4611      	mov	r1, r2
 800078a:	2201      	movs	r2, #1
 800078c:	408a      	lsls	r2, r1
 800078e:	4611      	mov	r1, r2
 8000790:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <Update_EXTI+0x1d0>)
 8000792:	430b      	orrs	r3, r1
 8000794:	6013      	str	r3, [r2, #0]
		ENABLE_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fe6c 	bl	8000478 <ENABLE_NVIC>
	{
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
		DISABLE_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
	}

}
 80007a0:	e010      	b.n	80007c4 <Update_EXTI+0x1b4>
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <Update_EXTI+0x1d0>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	8812      	ldrh	r2, [r2, #0]
 80007aa:	4611      	mov	r1, r2
 80007ac:	2201      	movs	r2, #1
 80007ae:	408a      	lsls	r2, r1
 80007b0:	43d2      	mvns	r2, r2
 80007b2:	4611      	mov	r1, r2
 80007b4:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <Update_EXTI+0x1d0>)
 80007b6:	400b      	ands	r3, r1
 80007b8:	6013      	str	r3, [r2, #0]
		DISABLE_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fec0 	bl	8000544 <DISABLE_NVIC>
}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40010000 	.word	0x40010000
 80007d0:	40010800 	.word	0x40010800
 80007d4:	40010c00 	.word	0x40010c00
 80007d8:	40011000 	.word	0x40011000
 80007dc:	40011400 	.word	0x40011400
 80007e0:	40010400 	.word	0x40010400
 80007e4:	2000001c 	.word	0x2000001c

080007e8 <MCAL_EXTI_GPIO_Init>:
 * 				 but LQFP48 Package has A,B ,Part of C&D and no E
 * 				-RCC clock for AFIO and the used GPIO port must be enabled
 */

void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t* EXTI_Config)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff ff0d 	bl	8000610 <Update_EXTI>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <EXTI0_IRQHandler>:
//			External Interrupt Routines
//========================================================


void EXTI0_IRQHandler (void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	//Clear EXTI PR
	EXTI->PR |= 1<<0;
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <EXTI0_IRQHandler+0x1c>)
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	4a04      	ldr	r2, [pc, #16]	; (800081c <EXTI0_IRQHandler+0x1c>)
 800080a:	f043 0301 	orr.w	r3, r3, #1
 800080e:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CALLBACK[0]();
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <EXTI0_IRQHandler+0x20>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4798      	blx	r3
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40010400 	.word	0x40010400
 8000820:	2000001c 	.word	0x2000001c

08000824 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	//Clear EXTI PR
	EXTI->PR |= 1<<1;
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <EXTI1_IRQHandler+0x1c>)
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	4a04      	ldr	r2, [pc, #16]	; (8000840 <EXTI1_IRQHandler+0x1c>)
 800082e:	f043 0302 	orr.w	r3, r3, #2
 8000832:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CALLBACK[1]();
 8000834:	4b03      	ldr	r3, [pc, #12]	; (8000844 <EXTI1_IRQHandler+0x20>)
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	4798      	blx	r3
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40010400 	.word	0x40010400
 8000844:	2000001c 	.word	0x2000001c

08000848 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler (void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	//Clear EXTI PR
	EXTI->PR |= 1<<2;
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <EXTI2_IRQHandler+0x1c>)
 800084e:	695b      	ldr	r3, [r3, #20]
 8000850:	4a04      	ldr	r2, [pc, #16]	; (8000864 <EXTI2_IRQHandler+0x1c>)
 8000852:	f043 0304 	orr.w	r3, r3, #4
 8000856:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CALLBACK[2]();
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <EXTI2_IRQHandler+0x20>)
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	4798      	blx	r3
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40010400 	.word	0x40010400
 8000868:	2000001c 	.word	0x2000001c

0800086c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler (void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	//Clear EXTI PR
	EXTI->PR |= 1<<3;
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <EXTI3_IRQHandler+0x1c>)
 8000872:	695b      	ldr	r3, [r3, #20]
 8000874:	4a04      	ldr	r2, [pc, #16]	; (8000888 <EXTI3_IRQHandler+0x1c>)
 8000876:	f043 0308 	orr.w	r3, r3, #8
 800087a:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CALLBACK[3]();
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <EXTI3_IRQHandler+0x20>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	4798      	blx	r3
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40010400 	.word	0x40010400
 800088c:	2000001c 	.word	0x2000001c

08000890 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler (void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	//Clear EXTI PR
	EXTI->PR |= 1<<4;
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <EXTI4_IRQHandler+0x1c>)
 8000896:	695b      	ldr	r3, [r3, #20]
 8000898:	4a04      	ldr	r2, [pc, #16]	; (80008ac <EXTI4_IRQHandler+0x1c>)
 800089a:	f043 0310 	orr.w	r3, r3, #16
 800089e:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CALLBACK[4]();
 80008a0:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <EXTI4_IRQHandler+0x20>)
 80008a2:	691b      	ldr	r3, [r3, #16]
 80008a4:	4798      	blx	r3
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40010400 	.word	0x40010400
 80008b0:	2000001c 	.word	0x2000001c

080008b4 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler (void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 <<5)
 80008b8:	4b26      	ldr	r3, [pc, #152]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 80008ba:	695b      	ldr	r3, [r3, #20]
 80008bc:	f003 0320 	and.w	r3, r3, #32
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d008      	beq.n	80008d6 <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= 1<<5;
 80008c4:	4b23      	ldr	r3, [pc, #140]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	4a22      	ldr	r2, [pc, #136]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 80008ca:	f043 0320 	orr.w	r3, r3, #32
 80008ce:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[5]();
 80008d0:	4b21      	ldr	r3, [pc, #132]	; (8000958 <EXTI9_5_IRQHandler+0xa4>)
 80008d2:	695b      	ldr	r3, [r3, #20]
 80008d4:	4798      	blx	r3
	}
	if(EXTI->PR & 1 <<6)
 80008d6:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d008      	beq.n	80008f4 <EXTI9_5_IRQHandler+0x40>
	{
		EXTI->PR |= 1<<6;
 80008e2:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	4a1b      	ldr	r2, [pc, #108]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 80008e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008ec:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[6]();
 80008ee:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <EXTI9_5_IRQHandler+0xa4>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	4798      	blx	r3
	}
	if(EXTI->PR & 1 <<7)
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 80008f6:	695b      	ldr	r3, [r3, #20]
 80008f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d008      	beq.n	8000912 <EXTI9_5_IRQHandler+0x5e>
	{
		EXTI->PR |= 1<<7;
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	4a13      	ldr	r2, [pc, #76]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 8000906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800090a:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[7]();
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <EXTI9_5_IRQHandler+0xa4>)
 800090e:	69db      	ldr	r3, [r3, #28]
 8000910:	4798      	blx	r3
	}
	if(EXTI->PR & 1 <<8)
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800091a:	2b00      	cmp	r3, #0
 800091c:	d008      	beq.n	8000930 <EXTI9_5_IRQHandler+0x7c>
	{
		EXTI->PR |= 1<<8;
 800091e:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	4a0c      	ldr	r2, [pc, #48]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 8000924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000928:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[8]();
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <EXTI9_5_IRQHandler+0xa4>)
 800092c:	6a1b      	ldr	r3, [r3, #32]
 800092e:	4798      	blx	r3
	}
	if(EXTI->PR & 1 <<9)
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000938:	2b00      	cmp	r3, #0
 800093a:	d008      	beq.n	800094e <EXTI9_5_IRQHandler+0x9a>
	{
		EXTI->PR |= 1<<9;
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 800093e:	695b      	ldr	r3, [r3, #20]
 8000940:	4a04      	ldr	r2, [pc, #16]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 8000942:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000946:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[9]();
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <EXTI9_5_IRQHandler+0xa4>)
 800094a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094c:	4798      	blx	r3
	}

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40010400 	.word	0x40010400
 8000958:	2000001c 	.word	0x2000001c

0800095c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler (void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 <<10)
 8000960:	4b2d      	ldr	r3, [pc, #180]	; (8000a18 <EXTI15_10_IRQHandler+0xbc>)
 8000962:	695b      	ldr	r3, [r3, #20]
 8000964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000968:	2b00      	cmp	r3, #0
 800096a:	d008      	beq.n	800097e <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= 1<<10;
 800096c:	4b2a      	ldr	r3, [pc, #168]	; (8000a18 <EXTI15_10_IRQHandler+0xbc>)
 800096e:	695b      	ldr	r3, [r3, #20]
 8000970:	4a29      	ldr	r2, [pc, #164]	; (8000a18 <EXTI15_10_IRQHandler+0xbc>)
 8000972:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000976:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[10]();
 8000978:	4b28      	ldr	r3, [pc, #160]	; (8000a1c <EXTI15_10_IRQHandler+0xc0>)
 800097a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800097c:	4798      	blx	r3
	}
	if(EXTI->PR & 1 <<11)
 800097e:	4b26      	ldr	r3, [pc, #152]	; (8000a18 <EXTI15_10_IRQHandler+0xbc>)
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000986:	2b00      	cmp	r3, #0
 8000988:	d008      	beq.n	800099c <EXTI15_10_IRQHandler+0x40>
	{
		EXTI->PR |= 1<<11;
 800098a:	4b23      	ldr	r3, [pc, #140]	; (8000a18 <EXTI15_10_IRQHandler+0xbc>)
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	4a22      	ldr	r2, [pc, #136]	; (8000a18 <EXTI15_10_IRQHandler+0xbc>)
 8000990:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000994:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[11]();
 8000996:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <EXTI15_10_IRQHandler+0xc0>)
 8000998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800099a:	4798      	blx	r3
	}
	if(EXTI->PR & 1 <<12)
 800099c:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <EXTI15_10_IRQHandler+0xbc>)
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d008      	beq.n	80009ba <EXTI15_10_IRQHandler+0x5e>
	{
		EXTI->PR |= 1<<12;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <EXTI15_10_IRQHandler+0xbc>)
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	4a1a      	ldr	r2, [pc, #104]	; (8000a18 <EXTI15_10_IRQHandler+0xbc>)
 80009ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009b2:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[12]();
 80009b4:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <EXTI15_10_IRQHandler+0xc0>)
 80009b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b8:	4798      	blx	r3
	}
	if(EXTI->PR & 1 <<13)
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <EXTI15_10_IRQHandler+0xbc>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d008      	beq.n	80009d8 <EXTI15_10_IRQHandler+0x7c>
	{
		EXTI->PR |= 1<<13;
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <EXTI15_10_IRQHandler+0xbc>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	4a13      	ldr	r2, [pc, #76]	; (8000a18 <EXTI15_10_IRQHandler+0xbc>)
 80009cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009d0:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[13]();
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <EXTI15_10_IRQHandler+0xc0>)
 80009d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009d6:	4798      	blx	r3
	}
	if(EXTI->PR & 1 <<14)
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <EXTI15_10_IRQHandler+0xbc>)
 80009da:	695b      	ldr	r3, [r3, #20]
 80009dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d008      	beq.n	80009f6 <EXTI15_10_IRQHandler+0x9a>
	{
		EXTI->PR |= 1<<14;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <EXTI15_10_IRQHandler+0xbc>)
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <EXTI15_10_IRQHandler+0xbc>)
 80009ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ee:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[14]();
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <EXTI15_10_IRQHandler+0xc0>)
 80009f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009f4:	4798      	blx	r3
	}
	if(EXTI->PR & 1 <<15)
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <EXTI15_10_IRQHandler+0xbc>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d008      	beq.n	8000a14 <EXTI15_10_IRQHandler+0xb8>
	{
		EXTI->PR |= 1<<15;
 8000a02:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <EXTI15_10_IRQHandler+0xbc>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <EXTI15_10_IRQHandler+0xbc>)
 8000a08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a0c:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[15]();
 8000a0e:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <EXTI15_10_IRQHandler+0xc0>)
 8000a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a12:	4798      	blx	r3
	}

}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40010400 	.word	0x40010400
 8000a1c:	2000001c 	.word	0x2000001c

08000a20 <Get_CRL_CRH_Position>:
 * @retval 		-The bit position
 * Note 		-None
 */

uint8_t Get_CRL_CRH_Position (uint16_t PinNumber)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 8000a2a:	88fb      	ldrh	r3, [r7, #6]
 8000a2c:	2b80      	cmp	r3, #128	; 0x80
 8000a2e:	d042      	beq.n	8000ab6 <Get_CRL_CRH_Position+0x96>
 8000a30:	2b80      	cmp	r3, #128	; 0x80
 8000a32:	dc11      	bgt.n	8000a58 <Get_CRL_CRH_Position+0x38>
 8000a34:	2b08      	cmp	r3, #8
 8000a36:	d036      	beq.n	8000aa6 <Get_CRL_CRH_Position+0x86>
 8000a38:	2b08      	cmp	r3, #8
 8000a3a:	dc06      	bgt.n	8000a4a <Get_CRL_CRH_Position+0x2a>
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d02e      	beq.n	8000a9e <Get_CRL_CRH_Position+0x7e>
 8000a40:	2b04      	cmp	r3, #4
 8000a42:	d02e      	beq.n	8000aa2 <Get_CRL_CRH_Position+0x82>
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d028      	beq.n	8000a9a <Get_CRL_CRH_Position+0x7a>
 8000a48:	e047      	b.n	8000ada <Get_CRL_CRH_Position+0xba>
 8000a4a:	2b20      	cmp	r3, #32
 8000a4c:	d02f      	beq.n	8000aae <Get_CRL_CRH_Position+0x8e>
 8000a4e:	2b40      	cmp	r3, #64	; 0x40
 8000a50:	d02f      	beq.n	8000ab2 <Get_CRL_CRH_Position+0x92>
 8000a52:	2b10      	cmp	r3, #16
 8000a54:	d029      	beq.n	8000aaa <Get_CRL_CRH_Position+0x8a>
 8000a56:	e040      	b.n	8000ada <Get_CRL_CRH_Position+0xba>
 8000a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a5c:	d033      	beq.n	8000ac6 <Get_CRL_CRH_Position+0xa6>
 8000a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a62:	dc09      	bgt.n	8000a78 <Get_CRL_CRH_Position+0x58>
 8000a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a68:	d029      	beq.n	8000abe <Get_CRL_CRH_Position+0x9e>
 8000a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a6e:	d028      	beq.n	8000ac2 <Get_CRL_CRH_Position+0xa2>
 8000a70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a74:	d021      	beq.n	8000aba <Get_CRL_CRH_Position+0x9a>
 8000a76:	e030      	b.n	8000ada <Get_CRL_CRH_Position+0xba>
 8000a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a7c:	d027      	beq.n	8000ace <Get_CRL_CRH_Position+0xae>
 8000a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a82:	dc03      	bgt.n	8000a8c <Get_CRL_CRH_Position+0x6c>
 8000a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a88:	d01f      	beq.n	8000aca <Get_CRL_CRH_Position+0xaa>
 8000a8a:	e026      	b.n	8000ada <Get_CRL_CRH_Position+0xba>
 8000a8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a90:	d01f      	beq.n	8000ad2 <Get_CRL_CRH_Position+0xb2>
 8000a92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a96:	d01e      	beq.n	8000ad6 <Get_CRL_CRH_Position+0xb6>
 8000a98:	e01f      	b.n	8000ada <Get_CRL_CRH_Position+0xba>
	{
	//CRL
	case GPIO_PIN_0:
		return 0; break;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e01e      	b.n	8000adc <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_1:
			return 4; break;
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	e01c      	b.n	8000adc <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_2:
			return 8; break;
 8000aa2:	2308      	movs	r3, #8
 8000aa4:	e01a      	b.n	8000adc <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_3:
			return 12; break;
 8000aa6:	230c      	movs	r3, #12
 8000aa8:	e018      	b.n	8000adc <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_4:
			return 16; break;
 8000aaa:	2310      	movs	r3, #16
 8000aac:	e016      	b.n	8000adc <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_5:
			return 20; break;
 8000aae:	2314      	movs	r3, #20
 8000ab0:	e014      	b.n	8000adc <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_6:
			return 24; break;
 8000ab2:	2318      	movs	r3, #24
 8000ab4:	e012      	b.n	8000adc <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_7:
			return 28; break;
 8000ab6:	231c      	movs	r3, #28
 8000ab8:	e010      	b.n	8000adc <Get_CRL_CRH_Position+0xbc>
	//CRH
	case GPIO_PIN_8:
		return 0; break;
 8000aba:	2300      	movs	r3, #0
 8000abc:	e00e      	b.n	8000adc <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_9:
			return 4; break;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	e00c      	b.n	8000adc <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_10:
			return 8; break;
 8000ac2:	2308      	movs	r3, #8
 8000ac4:	e00a      	b.n	8000adc <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_11:
			return 12; break;
 8000ac6:	230c      	movs	r3, #12
 8000ac8:	e008      	b.n	8000adc <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_12:
			return 16; break;
 8000aca:	2310      	movs	r3, #16
 8000acc:	e006      	b.n	8000adc <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_13:
			return 20; break;
 8000ace:	2314      	movs	r3, #20
 8000ad0:	e004      	b.n	8000adc <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_14:
			return 24; break;
 8000ad2:	2318      	movs	r3, #24
 8000ad4:	e002      	b.n	8000adc <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_15:
			return 28; break;
 8000ad6:	231c      	movs	r3, #28
 8000ad8:	e000      	b.n	8000adc <Get_CRL_CRH_Position+0xbc>
	}
	return 0;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr

08000ae6 <MCAL_GPIO_Init>:
 * @retval 		-None
 * Note 		-STM32F103C6 MCU has GPIO A,B,C,D,E
 * 				 but LQFP48 Package has A,B ,Part of C&D and no E
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t* PinConfig )
{
 8000ae6:	b590      	push	{r4, r7, lr}
 8000ae8:	b085      	sub	sp, #20
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configures Pins from 0->7
	//Port configuration register high (GPIOx_CRH) Configures Pins from 8->15
	volatile uint32_t* configReg = NULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
	volatile uint8_t CNFx_MODEx = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	72fb      	strb	r3, [r7, #11]
	//to configure CRL or CRH , check the pin number and work accordingly
	configReg = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	2bff      	cmp	r3, #255	; 0xff
 8000afe:	d801      	bhi.n	8000b04 <MCAL_GPIO_Init+0x1e>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	e001      	b.n	8000b08 <MCAL_GPIO_Init+0x22>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3304      	adds	r3, #4
 8000b08:	60fb      	str	r3, [r7, #12]

	//Clear CNFx[1:0] & MODEx[1:0]
	(*configReg) &= ~(0xF << Get_CRL_CRH_Position(PinConfig->GPIO_PinNumber));
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ff86 	bl	8000a20 <Get_CRL_CRH_Position>
 8000b14:	4603      	mov	r3, r0
 8000b16:	461a      	mov	r2, r3
 8000b18:	230f      	movs	r3, #15
 8000b1a:	4093      	lsls	r3, r2
 8000b1c:	43da      	mvns	r2, r3
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	401a      	ands	r2, r3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	601a      	str	r2, [r3, #0]

	//if the Pin is set as Output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)|(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)|(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)|(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	789b      	ldrb	r3, [r3, #2]
 8000b2c:	2b07      	cmp	r3, #7
 8000b2e:	bf0c      	ite	eq
 8000b30:	2301      	moveq	r3, #1
 8000b32:	2300      	movne	r3, #0
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	789b      	ldrb	r3, [r3, #2]
 8000b3a:	2b06      	cmp	r3, #6
 8000b3c:	bf0c      	ite	eq
 8000b3e:	2301      	moveq	r3, #1
 8000b40:	2300      	movne	r3, #0
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	4313      	orrs	r3, r2
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	461a      	mov	r2, r3
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	789b      	ldrb	r3, [r3, #2]
 8000b4e:	2b05      	cmp	r3, #5
 8000b50:	bf0c      	ite	eq
 8000b52:	2301      	moveq	r3, #1
 8000b54:	2300      	movne	r3, #0
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	683a      	ldr	r2, [r7, #0]
 8000b5c:	7892      	ldrb	r2, [r2, #2]
 8000b5e:	2a04      	cmp	r2, #4
 8000b60:	bf0c      	ite	eq
 8000b62:	2201      	moveq	r2, #1
 8000b64:	2200      	movne	r2, #0
 8000b66:	b2d2      	uxtb	r2, r2
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d00f      	beq.n	8000b8e <MCAL_GPIO_Init+0xa8>
	{
		// Set CNFx[1:0] & MODE[1:0]
		CNFx_MODEx = (((PinConfig->GPIO_MODE - 4)<<2)| (PinConfig->GPIO_Output_Speed)) & 0x0F;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	789b      	ldrb	r3, [r3, #2]
 8000b72:	3b04      	subs	r3, #4
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	b25a      	sxtb	r2, r3
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	78db      	ldrb	r3, [r3, #3]
 8000b7c:	b25b      	sxtb	r3, r3
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	b25b      	sxtb	r3, r3
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	f003 030f 	and.w	r3, r3, #15
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	72fb      	strb	r3, [r7, #11]
 8000b8c:	e02d      	b.n	8000bea <MCAL_GPIO_Init+0x104>
	}

	//if the Pin is set as Input , in that case MODE == 00 by default
	else
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG))
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	789b      	ldrb	r3, [r3, #2]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d003      	beq.n	8000b9e <MCAL_GPIO_Init+0xb8>
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	789b      	ldrb	r3, [r3, #2]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d108      	bne.n	8000bb0 <MCAL_GPIO_Init+0xca>
		{
			// Set CNFx[1:0] & MODEx[1:0] = 0x00
			CNFx_MODEx = ((( (PinConfig->GPIO_MODE)<<2) | 0x0   ) & 0x0F);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	789b      	ldrb	r3, [r3, #2]
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	f003 030f 	and.w	r3, r3, #15
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	72fb      	strb	r3, [r7, #11]
 8000bae:	e01c      	b.n	8000bea <MCAL_GPIO_Init+0x104>
		}
		//Alternative function input is the same as input floating Based on the TRM definition
		else if ((PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT))
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	789b      	ldrb	r3, [r3, #2]
 8000bb4:	2b08      	cmp	r3, #8
 8000bb6:	d102      	bne.n	8000bbe <MCAL_GPIO_Init+0xd8>
		{
			// Set CNFx[1:0] & MODEx[1:0] = 0x00
			CNFx_MODEx = ((( (GPIO_MODE_INPUT_FLO)<<2) | 0x0   ) & 0x0F);
 8000bb8:	2304      	movs	r3, #4
 8000bba:	72fb      	strb	r3, [r7, #11]
 8000bbc:	e015      	b.n	8000bea <MCAL_GPIO_Init+0x104>
		}
		else 		//This means it's either Pull-Up Input or Pull-Down Input
		{
			// Set CNFx[1:0] & MODEx[1:0] = 0x00
			// 10: Input with pull-up / pull-down
			CNFx_MODEx = ((( (GPIO_MODE_INPUT_PU)<<2) | 0x0   ) & 0x0F);
 8000bbe:	2308      	movs	r3, #8
 8000bc0:	72fb      	strb	r3, [r7, #11]
			if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU))
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	789b      	ldrb	r3, [r3, #2]
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d107      	bne.n	8000bda <MCAL_GPIO_Init+0xf4>
			{
				//Table 20. Port Bit configuration table
				//If Pull-Up input -> PxODR == 1
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	683a      	ldr	r2, [r7, #0]
 8000bd0:	8812      	ldrh	r2, [r2, #0]
 8000bd2:	431a      	orrs	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	60da      	str	r2, [r3, #12]
 8000bd8:	e007      	b.n	8000bea <MCAL_GPIO_Init+0x104>
			}
			else
			{
				//Table 20. Port Bit configuration table
				//If Pull-Up input -> PxODR == 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	68db      	ldr	r3, [r3, #12]
 8000bde:	683a      	ldr	r2, [r7, #0]
 8000be0:	8812      	ldrh	r2, [r2, #0]
 8000be2:	43d2      	mvns	r2, r2
 8000be4:	401a      	ands	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	60da      	str	r2, [r3, #12]

		}

	}
	//Writing the configuration base on PinConfig on CNFx & MODEx
	(*configReg) |= ( (CNFx_MODEx)<<Get_CRL_CRH_Position(PinConfig->GPIO_PinNumber) );
 8000bea:	7afb      	ldrb	r3, [r7, #11]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	461c      	mov	r4, r3
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ff13 	bl	8000a20 <Get_CRL_CRH_Position>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	fa04 f203 	lsl.w	r2, r4, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	431a      	orrs	r2, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	601a      	str	r2, [r3, #0]
}
 8000c0a:	bf00      	nop
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd90      	pop	{r4, r7, pc}

08000c12 <MCAL_GPIO_WritePin>:
 * @param [in]	-Value : PIN value
 * @retval 		-None
 * Note 		-None
 */
void MCAL_GPIO_WritePin (GPIO_TypeDef *GPIOx ,uint16_t PinNumber , uint8_t Value)
{
 8000c12:	b480      	push	{r7}
 8000c14:	b083      	sub	sp, #12
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	807b      	strh	r3, [r7, #2]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	707b      	strb	r3, [r7, #1]
	if( Value != GPIO_PIN_RESET )
 8000c22:	787b      	ldrb	r3, [r7, #1]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d003      	beq.n	8000c30 <MCAL_GPIO_WritePin+0x1e>
	{
		//using bit set/reset register (BSRR)
		//0: No action on the corresponding ODRx bit
		//1: Set the corresponding ODRx bit
		GPIOx->BSRR = PinNumber;
 8000c28:	887a      	ldrh	r2, [r7, #2]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	611a      	str	r2, [r3, #16]
		//using bit reset register (BRR)
		//0: No action on the corresponding ODRx bit
		//1: Reset the corresponding ODRx bit
		GPIOx->BRR = PinNumber;
	}
}
 8000c2e:	e002      	b.n	8000c36 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = PinNumber;
 8000c30:	887a      	ldrh	r2, [r7, #2]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	615a      	str	r2, [r3, #20]
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <MCAL_GPIO_WritePort>:
 * @param [in]	-Value : Port value
 * @retval 		-None
 * Note 		-None
 */
void MCAL_GPIO_WritePort (GPIO_TypeDef *GPIOx , uint16_t Value)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint16_t)Value;
 8000c4c:	887a      	ldrh	r2, [r7, #2]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	60da      	str	r2, [r3, #12]
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <wait>:
#include "LCD.h"

uint8_t IRQ_flag ;

void wait(int x)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	int i,j;
	for (i=0;i<x;i++)
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	e00c      	b.n	8000c84 <wait+0x28>
		for(j=0;j<x;j++);
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	e002      	b.n	8000c76 <wait+0x1a>
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	3301      	adds	r3, #1
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	dbf8      	blt.n	8000c70 <wait+0x14>
	for (i=0;i<x;i++)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	3301      	adds	r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	dbee      	blt.n	8000c6a <wait+0xe>
}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
	...

08000c98 <clk_Init>:

void clk_Init(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
	//Enable clock for GPIO A
	RCC_GPIOA_CLK_EN() ;
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <clk_Init+0x30>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	4a09      	ldr	r2, [pc, #36]	; (8000cc8 <clk_Init+0x30>)
 8000ca2:	f043 0304 	orr.w	r3, r3, #4
 8000ca6:	6193      	str	r3, [r2, #24]
	//Enable clock for GPIO B
	RCC_GPIOB_CLK_EN() ;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <clk_Init+0x30>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a06      	ldr	r2, [pc, #24]	; (8000cc8 <clk_Init+0x30>)
 8000cae:	f043 0308 	orr.w	r3, r3, #8
 8000cb2:	6193      	str	r3, [r2, #24]
	//Enable clock for AFIO
	RCC_AFIO_CLK_EN();
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <clk_Init+0x30>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a03      	ldr	r2, [pc, #12]	; (8000cc8 <clk_Init+0x30>)
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	6193      	str	r3, [r2, #24]
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	40021000 	.word	0x40021000

08000ccc <EXTI9_CALLBACK>:

void EXTI9_CALLBACK(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	IRQ_flag =1;
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <EXTI9_CALLBACK+0x1c>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	701a      	strb	r2, [r3, #0]
	HAL_LCD_WRITE_STR("IRQ EXTI9 Has   Happened _|-");
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <EXTI9_CALLBACK+0x20>)
 8000cd8:	f7ff fb70 	bl	80003bc <HAL_LCD_WRITE_STR>
	wait(500);
 8000cdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ce0:	f7ff ffbc 	bl	8000c5c <wait>
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000058 	.word	0x20000058
 8000cec:	08000e00 	.word	0x08000e00

08000cf0 <main>:

int main(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0

	clk_Init();
 8000cf6:	f7ff ffcf 	bl	8000c98 <clk_Init>
	HAL_LCD_Init();
 8000cfa:	f7ff fb05 	bl	8000308 <HAL_LCD_Init>
	wait(10);
 8000cfe:	200a      	movs	r0, #10
 8000d00:	f7ff ffac 	bl	8000c5c <wait>
	HAL_LCD_CLEAR();
 8000d04:	f7ff fb86 	bl	8000414 <HAL_LCD_CLEAR>
	EXTI_PinConfig_t EXTI_Config;
	EXTI_Config.EXTI_PIN = EXTI9_PORTB9;
 8000d08:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <main+0x50>)
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_Config.Trigger_Case = EXTI_Trigger_RISING;
 8000d12:	2300      	movs	r3, #0
 8000d14:	743b      	strb	r3, [r7, #16]
	EXTI_Config.Ptr_IRQ_CALLBACK = EXTI9_CALLBACK;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <main+0x54>)
 8000d18:	617b      	str	r3, [r7, #20]
	EXTI_Config.IRQ_Enable = EXTI_IRQ_ENBALE ;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	747b      	strb	r3, [r7, #17]

	MCAL_EXTI_GPIO_Init(&EXTI_Config);
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fd61 	bl	80007e8 <MCAL_EXTI_GPIO_Init>

	IRQ_flag = 1;
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <main+0x58>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	701a      	strb	r2, [r3, #0]
	while(1)
	{
		if(IRQ_flag == 1)
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <main+0x58>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d1fb      	bne.n	8000d2c <main+0x3c>
		{
			HAL_LCD_CLEAR();
 8000d34:	f7ff fb6e 	bl	8000414 <HAL_LCD_CLEAR>
			IRQ_flag =0;
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <main+0x58>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
		if(IRQ_flag == 1)
 8000d3e:	e7f5      	b.n	8000d2c <main+0x3c>
 8000d40:	08000e20 	.word	0x08000e20
 8000d44:	08000ccd 	.word	0x08000ccd
 8000d48:	20000058 	.word	0x20000058

08000d4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d4c:	480d      	ldr	r0, [pc, #52]	; (8000d84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d4e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d50:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d54:	480c      	ldr	r0, [pc, #48]	; (8000d88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d56:	490d      	ldr	r1, [pc, #52]	; (8000d8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d58:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <LoopForever+0xe>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d5c:	e002      	b.n	8000d64 <LoopCopyDataInit>

08000d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d62:	3304      	adds	r3, #4

08000d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d68:	d3f9      	bcc.n	8000d5e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d6c:	4c0a      	ldr	r4, [pc, #40]	; (8000d98 <LoopForever+0x16>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d70:	e001      	b.n	8000d76 <LoopFillZerobss>

08000d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d74:	3204      	adds	r2, #4

08000d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d78:	d3fb      	bcc.n	8000d72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d7a:	f000 f811 	bl	8000da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d7e:	f7ff ffb7 	bl	8000cf0 <main>

08000d82 <LoopForever>:

LoopForever:
    b LoopForever
 8000d82:	e7fe      	b.n	8000d82 <LoopForever>
  ldr   r0, =_estack
 8000d84:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d8c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000d90:	08000e34 	.word	0x08000e34
  ldr r2, =_sbss
 8000d94:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d98:	2000005c 	.word	0x2000005c

08000d9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d9c:	e7fe      	b.n	8000d9c <ADC1_2_IRQHandler>
	...

08000da0 <__libc_init_array>:
 8000da0:	b570      	push	{r4, r5, r6, lr}
 8000da2:	2500      	movs	r5, #0
 8000da4:	4e0c      	ldr	r6, [pc, #48]	; (8000dd8 <__libc_init_array+0x38>)
 8000da6:	4c0d      	ldr	r4, [pc, #52]	; (8000ddc <__libc_init_array+0x3c>)
 8000da8:	1ba4      	subs	r4, r4, r6
 8000daa:	10a4      	asrs	r4, r4, #2
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	d109      	bne.n	8000dc4 <__libc_init_array+0x24>
 8000db0:	f000 f81a 	bl	8000de8 <_init>
 8000db4:	2500      	movs	r5, #0
 8000db6:	4e0a      	ldr	r6, [pc, #40]	; (8000de0 <__libc_init_array+0x40>)
 8000db8:	4c0a      	ldr	r4, [pc, #40]	; (8000de4 <__libc_init_array+0x44>)
 8000dba:	1ba4      	subs	r4, r4, r6
 8000dbc:	10a4      	asrs	r4, r4, #2
 8000dbe:	42a5      	cmp	r5, r4
 8000dc0:	d105      	bne.n	8000dce <__libc_init_array+0x2e>
 8000dc2:	bd70      	pop	{r4, r5, r6, pc}
 8000dc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dc8:	4798      	blx	r3
 8000dca:	3501      	adds	r5, #1
 8000dcc:	e7ee      	b.n	8000dac <__libc_init_array+0xc>
 8000dce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dd2:	4798      	blx	r3
 8000dd4:	3501      	adds	r5, #1
 8000dd6:	e7f2      	b.n	8000dbe <__libc_init_array+0x1e>
 8000dd8:	08000e2c 	.word	0x08000e2c
 8000ddc:	08000e2c 	.word	0x08000e2c
 8000de0:	08000e2c 	.word	0x08000e2c
 8000de4:	08000e30 	.word	0x08000e30

08000de8 <_init>:
 8000de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dea:	bf00      	nop
 8000dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dee:	bc08      	pop	{r3}
 8000df0:	469e      	mov	lr, r3
 8000df2:	4770      	bx	lr

08000df4 <_fini>:
 8000df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df6:	bf00      	nop
 8000df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dfa:	bc08      	pop	{r3}
 8000dfc:	469e      	mov	lr, r3
 8000dfe:	4770      	bx	lr
