/*
 * STM32F103C6_EXTI_Driver.c
 *
 *  Created on: Oct 21, 2021
 *      Author: Arshy
 */

#include "STM32F103C6_EXTI_Driver.h"


//====================
//Generic Macros
//====================
#define AFIO_GPIO_EXTI_Mapping(x)		(	(x==GPIOA)?0:\
											(x==GPIOB)?1:\
											(x==GPIOC)?2:\
											(x==GPIOD)?3:0 )


//====================
//Generic Variables
//====================

void(*GP_IRQ_Callback[15])(void);

//====================
//Generic Function
//====================

void Enable_NVIC (uint16_t IRQ)
{
	switch(IRQ)
	{
	case 0:
			NVIC_IRQ6_EXTI0_EN();
			break;
	case 1:
			NVIC_IRQ7_EXTI1_EN();
			break;
	case 2:
			NVIC_IRQ8_EXTI2_EN();
			break;
	case 3:
			NVIC_IRQ9_EXTI3_EN();
			break;
	case 4:
			NVIC_IRQ10_EXTI4_EN();
			break;
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
			NVIC_IRQ23_EXTI5_9_EN();
			break;
	case 10:
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
			NVIC_IRQ40_EXTI10_15_EN();
			break;
	}
}

void Disable_NVIC (uint16_t IRQ)
{
	switch(IRQ)
	{
	case 0:
			NVIC_IRQ6_EXTI0_Disable();
			break;
	case 1:
			NVIC_IRQ7_EXTI1_Disable();
			break;
	case 2:
			NVIC_IRQ8_EXTI2_Disable();
			break;
	case 3:
			NVIC_IRQ9_EXTI3_Disable();
			break;
	case 4:
			NVIC_IRQ10_EXTI4_Disable();
			break;
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
			NVIC_IRQ23_EXTI5_9_Disable();
			break;
	case 10:
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
			NVIC_IRQ40_EXTI10_15_Disable();
			break;
	}
}


void Update_EXTI(EXTI_PinConfig_t* EXTI_Cfg)
{
	//1-Configure the GPIO to be AF INPUT -> Floating input
	GPIO_PinConfig_t Pin_Cfg;
	Pin_Cfg.GPIO_PinNumber = EXTI_Cfg->EXTI_Pin.GPIO_PIN;
	Pin_Cfg.GPIO_MODE = GPIO_MODE_INPUT_FO;
	MCAL_GPIO_Init(EXTI_Cfg->EXTI_Pin.GPIO_Port, &Pin_Cfg);
	//2-Update AFIO to route to EXTI line with PORT A,B,C,D
	uint8_t AFIO_EXTICR_Index = EXTI_Cfg->EXTI_Pin.EXTI_InputLineNumber / 4;
	uint8_t AFIO_EXTICR_Position = (EXTI_Cfg->EXTI_Pin.EXTI_InputLineNumber % 4) * 4;//remainder gives an index that when multiplied by 4 gives the exact bit index

	//clear The 4 bits
	AFIO->EXTICR[AFIO_EXTICR_Index] &= ~(0xF<<AFIO_EXTICR_Position);
	AFIO->EXTICR[AFIO_EXTICR_Index]	|= (AFIO_GPIO_EXTI_Mapping(EXTI_Cfg->EXTI_Pin.GPIO_Port) & 0xF << AFIO_EXTICR_Position);


	//3-Update Rising and Falling edge
	EXTI->RTSR &= ~(1<<EXTI_Cfg->EXTI_Pin.EXTI_InputLineNumber);
	EXTI->FTSR &= ~(1<<EXTI_Cfg->EXTI_Pin.EXTI_InputLineNumber);

	if(EXTI_Cfg->Trigger_case == EXTI_Trigger_RISING)
	{

		EXTI->RTSR |= (1<<EXTI_Cfg->EXTI_Pin.EXTI_InputLineNumber);

	}else if(EXTI_Cfg->Trigger_case == EXTI_Trigger_FALLING)
	{
		EXTI->FTSR |= (1<<EXTI_Cfg->EXTI_Pin.EXTI_InputLineNumber);

	}else if(EXTI_Cfg->Trigger_case == EXTI_Trigger_BOTH)
	{
		EXTI->RTSR |= (1<<EXTI_Cfg->EXTI_Pin.EXTI_InputLineNumber);
		EXTI->FTSR |= (1<<EXTI_Cfg->EXTI_Pin.EXTI_InputLineNumber);
	}


	//4-Update IRQ Handling Callback
	GP_IRQ_Callback[EXTI_Cfg->EXTI_Pin.EXTI_InputLineNumber] = EXTI_Cfg->Ptr_IRQ_CallBack;


	//5- Enable/Disable IRQ & NVIC

	if(EXTI_Cfg->IRQ_EN == EXTI_IRQ_Enable)
	{
		EXTI->IMR |= (1<<EXTI_Cfg->EXTI_Pin.EXTI_InputLineNumber);
		Enable_NVIC (EXTI_Cfg->EXTI_Pin.EXTI_InputLineNumber);
	}else
	{
		EXTI->IMR &= ~(1<<EXTI_Cfg->EXTI_Pin.EXTI_InputLineNumber);
		Disable_NVIC (EXTI_Cfg->EXTI_Pin.EXTI_InputLineNumber);
	}

}







/**================================================================
 * @Fn			-MCAL_EXTI_GPIO_Init
 * @brief		-Initialize EXTI from specific GPIO PIN and the mask, trigger condition and the call back function
 * @param [in] 	-EXTI_Cfg : set by @ref EXTI_Define @ref EXTI_Trigger_Define @ref EXTI_IRQ_Define
 * @retval 		-None
 * Note 		-STM32F103C6 MCU has GPIO A,B,C,D,E
 * 				 but LQFP48 Package has A,B ,Part of C&D and no E
 * 				-RCC clock for AFIO and the used GPIO port must be enabled
*/
void MCAL_EXTI_GPIO_Init (EXTI_PinConfig_t *EXTI_Cfg)
{
	Update_EXTI(EXTI_Cfg);
}

/**================================================================
 * @Fn			-MCAL_EXTI_GPIO_DeInit
 * @brief		-Reset the EXTI Registers and NVIC IRQ MASK
 * @retval 		-None
 * Note 		-None
 */

void MCAL_EXTI_GPIO_DeInit (void)
{
	EXTI->IMR 	= 0x00000000;
	EXTI->EMR 	= 0x00000000;
	EXTI->RTSR 	= 0x00000000;
	EXTI->FTSR 	= 0x00000000;
	EXTI->SWIER = 0x00000000;
	//rc_w1 Cleared by writing "1" on a bit
	EXTI->PR 	= 0xFFFFFFFF;

	//Disable all EXTI_IRQ from NVIC
	NVIC_IRQ6_EXTI0_Disable();
	NVIC_IRQ7_EXTI1_Disable();
	NVIC_IRQ8_EXTI2_Disable();
	NVIC_IRQ9_EXTI3_Disable();
	NVIC_IRQ10_EXTI4_Disable();
	NVIC_IRQ23_EXTI5_9_Disable();
	NVIC_IRQ40_EXTI10_15_Disable();
}








/**================================================================
 * @Fn			-MCAL_EXTI_GPIO_Update
 * @brief		-update EXTI from specific GPIO PIN and the mask, trigger condition and the call back function
 * @param [in] 	-EXTI_Cfg : set by @ref EXTI_Define @ref EXTI_Trigger_Define @ref EXTI_IRQ_Define
 * @retval 		-None
 * Note 		-STM32F103C6 MCU has GPIO A,B,C,D,E
 * 				 but LQFP48 Package has A,B ,Part of C&D and no E
 * 				-RCC clock for AFIO and the used GPIO port must be enabled
*/
void MCAL_EXTI_GPIO_Update (EXTI_PinConfig_t *EXTI_Cfg)
{
	Update_EXTI(EXTI_Cfg);
}


//====================
//ISR Functions
//====================
void EXTI0_IRQHandler (void)
{
	//Clear EXTI_PR by writing 1 to clear
	EXTI->PR |= 1<<0 ;
	//Call IRQ_Call
	GP_IRQ_Callback[0]();
}

void EXTI1_IRQHandler (void)
{
	//Clear EXTI_PR by writing 1 to clear
	EXTI->PR |= 1<<1 ;
	//Call IRQ_Call
	GP_IRQ_Callback[1]();
}
void EXTI2_IRQHandler (void)
{
	//Clear EXTI_PR by writing 1 to clear
	EXTI->PR |= 1<<2 ;
	//Call IRQ_Call
	GP_IRQ_Callback[2]();
}
void EXTI3_IRQHandler (void)
{
	//Clear EXTI_PR by writing 1 to clear
	EXTI->PR |= 1<<3 ;
	//Call IRQ_Call
	GP_IRQ_Callback[3]();
}
void EXTI4_IRQHandler (void)
{
	//Clear EXTI_PR by writing 1 to clear
	EXTI->PR |= 1<<4;
	//Call IRQ_Call
	GP_IRQ_Callback[4]();
}
void EXTI9_5_IRQHandler (void)
{
	if(EXTI->PR & 1<<5){ EXTI->PR |= 1<<5;   GP_IRQ_Callback[5]();}
	if(EXTI->PR & 1<<6){ EXTI->PR |= 1<<6;   GP_IRQ_Callback[6]();}
	if(EXTI->PR & 1<<7){ EXTI->PR |= 1<<7;   GP_IRQ_Callback[7]();}
	if(EXTI->PR & 1<<8){ EXTI->PR |= 1<<8;   GP_IRQ_Callback[8]();}
	if(EXTI->PR & 1<<9){ EXTI->PR |= 1<<9;   GP_IRQ_Callback[9]();}
}
void EXTI15_10_IRQHandler (void)
{
	if(EXTI->PR & 1<<10){ EXTI->PR |= 1<<10;   GP_IRQ_Callback[10]();}
	if(EXTI->PR & 1<<11){ EXTI->PR |= 1<<11;   GP_IRQ_Callback[11]();}
	if(EXTI->PR & 1<<12){ EXTI->PR |= 1<<12;   GP_IRQ_Callback[12]();}
	if(EXTI->PR & 1<<13){ EXTI->PR |= 1<<13;   GP_IRQ_Callback[13]();}
	if(EXTI->PR & 1<<14){ EXTI->PR |= 1<<14;   GP_IRQ_Callback[14]();}
	if(EXTI->PR & 1<<15){ EXTI->PR |= 1<<15;   GP_IRQ_Callback[15]();}
}


