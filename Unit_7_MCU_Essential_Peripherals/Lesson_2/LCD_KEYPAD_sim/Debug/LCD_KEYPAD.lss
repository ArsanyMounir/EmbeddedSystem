
LCD_KEYPAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f0e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000f0e  00000f82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000f92  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000fc4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00001000  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000adc  00000000  00000000  000010a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000696  00000000  00000000  00001b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007e2  00000000  00000000  00002212  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000019c  00000000  00000000  000029f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003df  00000000  00000000  00002b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002ed  00000000  00000000  00002f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000325c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 4f 06 	call	0xc9e	; 0xc9e <main>
  7a:	0c 94 85 07 	jmp	0xf0a	; 0xf0a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_kick>:




void LCD_kick(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2e 97       	sbiw	r28, 0x0e	; 14
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	CLEAR_BIT(LCD_CTRL,EN_SWITCH);
  96:	88 e3       	ldi	r24, 0x38	; 56
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	28 e3       	ldi	r18, 0x38	; 56
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	f9 01       	movw	r30, r18
  a0:	20 81       	ld	r18, Z
  a2:	27 7f       	andi	r18, 0xF7	; 247
  a4:	fc 01       	movw	r30, r24
  a6:	20 83       	st	Z, r18
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	a8 e4       	ldi	r26, 0x48	; 72
  ae:	b2 e4       	ldi	r27, 0x42	; 66
  b0:	89 83       	std	Y+1, r24	; 0x01
  b2:	9a 83       	std	Y+2, r25	; 0x02
  b4:	ab 83       	std	Y+3, r26	; 0x03
  b6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	4a e7       	ldi	r20, 0x7A	; 122
  be:	53 e4       	ldi	r21, 0x43	; 67
  c0:	69 81       	ldd	r22, Y+1	; 0x01
  c2:	7a 81       	ldd	r23, Y+2	; 0x02
  c4:	8b 81       	ldd	r24, Y+3	; 0x03
  c6:	9c 81       	ldd	r25, Y+4	; 0x04
  c8:	0e 94 f0 06 	call	0xde0	; 0xde0 <__mulsf3>
  cc:	dc 01       	movw	r26, r24
  ce:	cb 01       	movw	r24, r22
  d0:	8d 83       	std	Y+5, r24	; 0x05
  d2:	9e 83       	std	Y+6, r25	; 0x06
  d4:	af 83       	std	Y+7, r26	; 0x07
  d6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
  d8:	20 e0       	ldi	r18, 0x00	; 0
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	40 e8       	ldi	r20, 0x80	; 128
  de:	5f e3       	ldi	r21, 0x3F	; 63
  e0:	6d 81       	ldd	r22, Y+5	; 0x05
  e2:	7e 81       	ldd	r23, Y+6	; 0x06
  e4:	8f 81       	ldd	r24, Y+7	; 0x07
  e6:	98 85       	ldd	r25, Y+8	; 0x08
  e8:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__cmpsf2>
  ec:	88 23       	and	r24, r24
  ee:	2c f4       	brge	.+10     	; 0xfa <LCD_kick+0x78>
		__ticks = 1;
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	9a 87       	std	Y+10, r25	; 0x0a
  f6:	89 87       	std	Y+9, r24	; 0x09
  f8:	3f c0       	rjmp	.+126    	; 0x178 <LCD_kick+0xf6>
	else if (__tmp > 65535)
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	3f ef       	ldi	r19, 0xFF	; 255
  fe:	4f e7       	ldi	r20, 0x7F	; 127
 100:	57 e4       	ldi	r21, 0x47	; 71
 102:	6d 81       	ldd	r22, Y+5	; 0x05
 104:	7e 81       	ldd	r23, Y+6	; 0x06
 106:	8f 81       	ldd	r24, Y+7	; 0x07
 108:	98 85       	ldd	r25, Y+8	; 0x08
 10a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__gesf2>
 10e:	18 16       	cp	r1, r24
 110:	4c f5       	brge	.+82     	; 0x164 <LCD_kick+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 112:	20 e0       	ldi	r18, 0x00	; 0
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	40 e2       	ldi	r20, 0x20	; 32
 118:	51 e4       	ldi	r21, 0x41	; 65
 11a:	69 81       	ldd	r22, Y+1	; 0x01
 11c:	7a 81       	ldd	r23, Y+2	; 0x02
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	9c 81       	ldd	r25, Y+4	; 0x04
 122:	0e 94 f0 06 	call	0xde0	; 0xde0 <__mulsf3>
 126:	dc 01       	movw	r26, r24
 128:	cb 01       	movw	r24, r22
 12a:	bc 01       	movw	r22, r24
 12c:	cd 01       	movw	r24, r26
 12e:	0e 94 6f 06 	call	0xcde	; 0xcde <__fixunssfsi>
 132:	dc 01       	movw	r26, r24
 134:	cb 01       	movw	r24, r22
 136:	9a 87       	std	Y+10, r25	; 0x0a
 138:	89 87       	std	Y+9, r24	; 0x09
 13a:	0f c0       	rjmp	.+30     	; 0x15a <LCD_kick+0xd8>
 13c:	89 e1       	ldi	r24, 0x19	; 25
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	9c 87       	std	Y+12, r25	; 0x0c
 142:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 144:	8b 85       	ldd	r24, Y+11	; 0x0b
 146:	9c 85       	ldd	r25, Y+12	; 0x0c
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCD_kick+0xc6>
 14c:	9c 87       	std	Y+12, r25	; 0x0c
 14e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 150:	89 85       	ldd	r24, Y+9	; 0x09
 152:	9a 85       	ldd	r25, Y+10	; 0x0a
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	9a 87       	std	Y+10, r25	; 0x0a
 158:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 15a:	89 85       	ldd	r24, Y+9	; 0x09
 15c:	9a 85       	ldd	r25, Y+10	; 0x0a
 15e:	89 2b       	or	r24, r25
 160:	69 f7       	brne	.-38     	; 0x13c <LCD_kick+0xba>
 162:	14 c0       	rjmp	.+40     	; 0x18c <LCD_kick+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 164:	6d 81       	ldd	r22, Y+5	; 0x05
 166:	7e 81       	ldd	r23, Y+6	; 0x06
 168:	8f 81       	ldd	r24, Y+7	; 0x07
 16a:	98 85       	ldd	r25, Y+8	; 0x08
 16c:	0e 94 6f 06 	call	0xcde	; 0xcde <__fixunssfsi>
 170:	dc 01       	movw	r26, r24
 172:	cb 01       	movw	r24, r22
 174:	9a 87       	std	Y+10, r25	; 0x0a
 176:	89 87       	std	Y+9, r24	; 0x09
 178:	89 85       	ldd	r24, Y+9	; 0x09
 17a:	9a 85       	ldd	r25, Y+10	; 0x0a
 17c:	9e 87       	std	Y+14, r25	; 0x0e
 17e:	8d 87       	std	Y+13, r24	; 0x0d
 180:	8d 85       	ldd	r24, Y+13	; 0x0d
 182:	9e 85       	ldd	r25, Y+14	; 0x0e
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <LCD_kick+0x102>
 188:	9e 87       	std	Y+14, r25	; 0x0e
 18a:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(50);
	SET_BIT(LCD_CTRL,EN_SWITCH);
 18c:	88 e3       	ldi	r24, 0x38	; 56
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	28 e3       	ldi	r18, 0x38	; 56
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	f9 01       	movw	r30, r18
 196:	20 81       	ld	r18, Z
 198:	28 60       	ori	r18, 0x08	; 8
 19a:	fc 01       	movw	r30, r24
 19c:	20 83       	st	Z, r18
}
 19e:	00 00       	nop
 1a0:	2e 96       	adiw	r28, 0x0e	; 14
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	f8 94       	cli
 1a6:	de bf       	out	0x3e, r29	; 62
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	cd bf       	out	0x3d, r28	; 61
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <LCD_isbusy>:


void LCD_isbusy(void)
{
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
	DDR_LCD_PORT &= ~(0xFF<<DATA_SHIFT);
 1ba:	8a e3       	ldi	r24, 0x3A	; 58
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	2a e3       	ldi	r18, 0x3A	; 58
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	f9 01       	movw	r30, r18
 1c4:	20 81       	ld	r18, Z
 1c6:	2f 70       	andi	r18, 0x0F	; 15
 1c8:	fc 01       	movw	r30, r24
 1ca:	20 83       	st	Z, r18
	SET_BIT(LCD_CTRL,RW_SWITCH);
 1cc:	88 e3       	ldi	r24, 0x38	; 56
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	28 e3       	ldi	r18, 0x38	; 56
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	f9 01       	movw	r30, r18
 1d6:	20 81       	ld	r18, Z
 1d8:	24 60       	ori	r18, 0x04	; 4
 1da:	fc 01       	movw	r30, r24
 1dc:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL,RS_SWITCH);
 1de:	88 e3       	ldi	r24, 0x38	; 56
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	28 e3       	ldi	r18, 0x38	; 56
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	f9 01       	movw	r30, r18
 1e8:	20 81       	ld	r18, Z
 1ea:	2d 7f       	andi	r18, 0xFD	; 253
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 83       	st	Z, r18
	LCD_kick();
 1f0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_kick>
	DDR_LCD_PORT = 0xFF;
 1f4:	8a e3       	ldi	r24, 0x3A	; 58
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
 1fa:	fc 01       	movw	r30, r24
 1fc:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL,RW_SWITCH);
 1fe:	88 e3       	ldi	r24, 0x38	; 56
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	28 e3       	ldi	r18, 0x38	; 56
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	f9 01       	movw	r30, r18
 208:	20 81       	ld	r18, Z
 20a:	2b 7f       	andi	r18, 0xFB	; 251
 20c:	fc 01       	movw	r30, r24
 20e:	20 83       	st	Z, r18
}
 210:	00 00       	nop
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <LCD_WRITE_COMMAND>:

void LCD_WRITE_COMMAND(unsigned char command)
{
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	de b7       	in	r29, 0x3e	; 62
 220:	6d 97       	sbiw	r28, 0x1d	; 29
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	f8 94       	cli
 226:	de bf       	out	0x3e, r29	; 62
 228:	0f be       	out	0x3f, r0	; 63
 22a:	cd bf       	out	0x3d, r28	; 61
 22c:	8d 8f       	std	Y+29, r24	; 0x1d
	CLEAR_BIT(LCD_CTRL,RS_SWITCH);
	LCD_kick();
#endif

#ifdef FOUR_BIT_MODE
	LCD_PORT = ((LCD_PORT & 0x0F) | (command & 0xF0));
 22e:	8b e3       	ldi	r24, 0x3B	; 59
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	2b e3       	ldi	r18, 0x3B	; 59
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	f9 01       	movw	r30, r18
 238:	20 81       	ld	r18, Z
 23a:	32 2f       	mov	r19, r18
 23c:	3f 70       	andi	r19, 0x0F	; 15
 23e:	2d 8d       	ldd	r18, Y+29	; 0x1d
 240:	20 7f       	andi	r18, 0xF0	; 240
 242:	23 2b       	or	r18, r19
 244:	fc 01       	movw	r30, r24
 246:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL,RS_SWITCH);
 248:	88 e3       	ldi	r24, 0x38	; 56
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	28 e3       	ldi	r18, 0x38	; 56
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	f9 01       	movw	r30, r18
 252:	20 81       	ld	r18, Z
 254:	2d 7f       	andi	r18, 0xFD	; 253
 256:	fc 01       	movw	r30, r24
 258:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL,RW_SWITCH);
 25a:	88 e3       	ldi	r24, 0x38	; 56
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	28 e3       	ldi	r18, 0x38	; 56
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	f9 01       	movw	r30, r18
 264:	20 81       	ld	r18, Z
 266:	2b 7f       	andi	r18, 0xFB	; 251
 268:	fc 01       	movw	r30, r24
 26a:	20 83       	st	Z, r18
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	a0 e2       	ldi	r26, 0x20	; 32
 272:	b1 e4       	ldi	r27, 0x41	; 65
 274:	89 83       	std	Y+1, r24	; 0x01
 276:	9a 83       	std	Y+2, r25	; 0x02
 278:	ab 83       	std	Y+3, r26	; 0x03
 27a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 27c:	20 e0       	ldi	r18, 0x00	; 0
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	4a e7       	ldi	r20, 0x7A	; 122
 282:	53 e4       	ldi	r21, 0x43	; 67
 284:	69 81       	ldd	r22, Y+1	; 0x01
 286:	7a 81       	ldd	r23, Y+2	; 0x02
 288:	8b 81       	ldd	r24, Y+3	; 0x03
 28a:	9c 81       	ldd	r25, Y+4	; 0x04
 28c:	0e 94 f0 06 	call	0xde0	; 0xde0 <__mulsf3>
 290:	dc 01       	movw	r26, r24
 292:	cb 01       	movw	r24, r22
 294:	8b 8b       	std	Y+19, r24	; 0x13
 296:	9c 8b       	std	Y+20, r25	; 0x14
 298:	ad 8b       	std	Y+21, r26	; 0x15
 29a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 29c:	20 e0       	ldi	r18, 0x00	; 0
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	40 e8       	ldi	r20, 0x80	; 128
 2a2:	5f e3       	ldi	r21, 0x3F	; 63
 2a4:	6b 89       	ldd	r22, Y+19	; 0x13
 2a6:	7c 89       	ldd	r23, Y+20	; 0x14
 2a8:	8d 89       	ldd	r24, Y+21	; 0x15
 2aa:	9e 89       	ldd	r25, Y+22	; 0x16
 2ac:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__cmpsf2>
 2b0:	88 23       	and	r24, r24
 2b2:	2c f4       	brge	.+10     	; 0x2be <LCD_WRITE_COMMAND+0xa6>
		__ticks = 1;
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	98 8f       	std	Y+24, r25	; 0x18
 2ba:	8f 8b       	std	Y+23, r24	; 0x17
 2bc:	3f c0       	rjmp	.+126    	; 0x33c <LCD_WRITE_COMMAND+0x124>
	else if (__tmp > 65535)
 2be:	20 e0       	ldi	r18, 0x00	; 0
 2c0:	3f ef       	ldi	r19, 0xFF	; 255
 2c2:	4f e7       	ldi	r20, 0x7F	; 127
 2c4:	57 e4       	ldi	r21, 0x47	; 71
 2c6:	6b 89       	ldd	r22, Y+19	; 0x13
 2c8:	7c 89       	ldd	r23, Y+20	; 0x14
 2ca:	8d 89       	ldd	r24, Y+21	; 0x15
 2cc:	9e 89       	ldd	r25, Y+22	; 0x16
 2ce:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__gesf2>
 2d2:	18 16       	cp	r1, r24
 2d4:	4c f5       	brge	.+82     	; 0x328 <LCD_WRITE_COMMAND+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2d6:	20 e0       	ldi	r18, 0x00	; 0
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	40 e2       	ldi	r20, 0x20	; 32
 2dc:	51 e4       	ldi	r21, 0x41	; 65
 2de:	69 81       	ldd	r22, Y+1	; 0x01
 2e0:	7a 81       	ldd	r23, Y+2	; 0x02
 2e2:	8b 81       	ldd	r24, Y+3	; 0x03
 2e4:	9c 81       	ldd	r25, Y+4	; 0x04
 2e6:	0e 94 f0 06 	call	0xde0	; 0xde0 <__mulsf3>
 2ea:	dc 01       	movw	r26, r24
 2ec:	cb 01       	movw	r24, r22
 2ee:	bc 01       	movw	r22, r24
 2f0:	cd 01       	movw	r24, r26
 2f2:	0e 94 6f 06 	call	0xcde	; 0xcde <__fixunssfsi>
 2f6:	dc 01       	movw	r26, r24
 2f8:	cb 01       	movw	r24, r22
 2fa:	98 8f       	std	Y+24, r25	; 0x18
 2fc:	8f 8b       	std	Y+23, r24	; 0x17
 2fe:	0f c0       	rjmp	.+30     	; 0x31e <LCD_WRITE_COMMAND+0x106>
 300:	89 e1       	ldi	r24, 0x19	; 25
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	9a 8f       	std	Y+26, r25	; 0x1a
 306:	89 8f       	std	Y+25, r24	; 0x19
 308:	89 8d       	ldd	r24, Y+25	; 0x19
 30a:	9a 8d       	ldd	r25, Y+26	; 0x1a
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <LCD_WRITE_COMMAND+0xf4>
 310:	9a 8f       	std	Y+26, r25	; 0x1a
 312:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 314:	8f 89       	ldd	r24, Y+23	; 0x17
 316:	98 8d       	ldd	r25, Y+24	; 0x18
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	98 8f       	std	Y+24, r25	; 0x18
 31c:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 31e:	8f 89       	ldd	r24, Y+23	; 0x17
 320:	98 8d       	ldd	r25, Y+24	; 0x18
 322:	89 2b       	or	r24, r25
 324:	69 f7       	brne	.-38     	; 0x300 <LCD_WRITE_COMMAND+0xe8>
 326:	14 c0       	rjmp	.+40     	; 0x350 <LCD_WRITE_COMMAND+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 328:	6b 89       	ldd	r22, Y+19	; 0x13
 32a:	7c 89       	ldd	r23, Y+20	; 0x14
 32c:	8d 89       	ldd	r24, Y+21	; 0x15
 32e:	9e 89       	ldd	r25, Y+22	; 0x16
 330:	0e 94 6f 06 	call	0xcde	; 0xcde <__fixunssfsi>
 334:	dc 01       	movw	r26, r24
 336:	cb 01       	movw	r24, r22
 338:	98 8f       	std	Y+24, r25	; 0x18
 33a:	8f 8b       	std	Y+23, r24	; 0x17
 33c:	8f 89       	ldd	r24, Y+23	; 0x17
 33e:	98 8d       	ldd	r25, Y+24	; 0x18
 340:	9c 8f       	std	Y+28, r25	; 0x1c
 342:	8b 8f       	std	Y+27, r24	; 0x1b
 344:	8b 8d       	ldd	r24, Y+27	; 0x1b
 346:	9c 8d       	ldd	r25, Y+28	; 0x1c
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <LCD_WRITE_COMMAND+0x130>
 34c:	9c 8f       	std	Y+28, r25	; 0x1c
 34e:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(10);
	LCD_kick();
 350:	0e 94 41 00 	call	0x82	; 0x82 <LCD_kick>
	LCD_PORT = ((LCD_PORT & 0x0F) | (command << 4));
 354:	8b e3       	ldi	r24, 0x3B	; 59
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	2b e3       	ldi	r18, 0x3B	; 59
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	f9 01       	movw	r30, r18
 35e:	20 81       	ld	r18, Z
 360:	42 2f       	mov	r20, r18
 362:	4f 70       	andi	r20, 0x0F	; 15
 364:	2d 8d       	ldd	r18, Y+29	; 0x1d
 366:	22 2f       	mov	r18, r18
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	22 95       	swap	r18
 36c:	32 95       	swap	r19
 36e:	30 7f       	andi	r19, 0xF0	; 240
 370:	32 27       	eor	r19, r18
 372:	20 7f       	andi	r18, 0xF0	; 240
 374:	32 27       	eor	r19, r18
 376:	24 2b       	or	r18, r20
 378:	fc 01       	movw	r30, r24
 37a:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL,RW_SWITCH);
 37c:	88 e3       	ldi	r24, 0x38	; 56
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	28 e3       	ldi	r18, 0x38	; 56
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	f9 01       	movw	r30, r18
 386:	20 81       	ld	r18, Z
 388:	2b 7f       	andi	r18, 0xFB	; 251
 38a:	fc 01       	movw	r30, r24
 38c:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL,RS_SWITCH);
 38e:	88 e3       	ldi	r24, 0x38	; 56
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	28 e3       	ldi	r18, 0x38	; 56
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	f9 01       	movw	r30, r18
 398:	20 81       	ld	r18, Z
 39a:	2d 7f       	andi	r18, 0xFD	; 253
 39c:	fc 01       	movw	r30, r24
 39e:	20 83       	st	Z, r18
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	a0 e2       	ldi	r26, 0x20	; 32
 3a6:	b1 e4       	ldi	r27, 0x41	; 65
 3a8:	8d 83       	std	Y+5, r24	; 0x05
 3aa:	9e 83       	std	Y+6, r25	; 0x06
 3ac:	af 83       	std	Y+7, r26	; 0x07
 3ae:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 3b0:	20 e0       	ldi	r18, 0x00	; 0
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	4a e7       	ldi	r20, 0x7A	; 122
 3b6:	53 e4       	ldi	r21, 0x43	; 67
 3b8:	6d 81       	ldd	r22, Y+5	; 0x05
 3ba:	7e 81       	ldd	r23, Y+6	; 0x06
 3bc:	8f 81       	ldd	r24, Y+7	; 0x07
 3be:	98 85       	ldd	r25, Y+8	; 0x08
 3c0:	0e 94 f0 06 	call	0xde0	; 0xde0 <__mulsf3>
 3c4:	dc 01       	movw	r26, r24
 3c6:	cb 01       	movw	r24, r22
 3c8:	89 87       	std	Y+9, r24	; 0x09
 3ca:	9a 87       	std	Y+10, r25	; 0x0a
 3cc:	ab 87       	std	Y+11, r26	; 0x0b
 3ce:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 3d0:	20 e0       	ldi	r18, 0x00	; 0
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	40 e8       	ldi	r20, 0x80	; 128
 3d6:	5f e3       	ldi	r21, 0x3F	; 63
 3d8:	69 85       	ldd	r22, Y+9	; 0x09
 3da:	7a 85       	ldd	r23, Y+10	; 0x0a
 3dc:	8b 85       	ldd	r24, Y+11	; 0x0b
 3de:	9c 85       	ldd	r25, Y+12	; 0x0c
 3e0:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__cmpsf2>
 3e4:	88 23       	and	r24, r24
 3e6:	2c f4       	brge	.+10     	; 0x3f2 <LCD_WRITE_COMMAND+0x1da>
		__ticks = 1;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	9e 87       	std	Y+14, r25	; 0x0e
 3ee:	8d 87       	std	Y+13, r24	; 0x0d
 3f0:	3f c0       	rjmp	.+126    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
	else if (__tmp > 65535)
 3f2:	20 e0       	ldi	r18, 0x00	; 0
 3f4:	3f ef       	ldi	r19, 0xFF	; 255
 3f6:	4f e7       	ldi	r20, 0x7F	; 127
 3f8:	57 e4       	ldi	r21, 0x47	; 71
 3fa:	69 85       	ldd	r22, Y+9	; 0x09
 3fc:	7a 85       	ldd	r23, Y+10	; 0x0a
 3fe:	8b 85       	ldd	r24, Y+11	; 0x0b
 400:	9c 85       	ldd	r25, Y+12	; 0x0c
 402:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__gesf2>
 406:	18 16       	cp	r1, r24
 408:	4c f5       	brge	.+82     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 40a:	20 e0       	ldi	r18, 0x00	; 0
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	40 e2       	ldi	r20, 0x20	; 32
 410:	51 e4       	ldi	r21, 0x41	; 65
 412:	6d 81       	ldd	r22, Y+5	; 0x05
 414:	7e 81       	ldd	r23, Y+6	; 0x06
 416:	8f 81       	ldd	r24, Y+7	; 0x07
 418:	98 85       	ldd	r25, Y+8	; 0x08
 41a:	0e 94 f0 06 	call	0xde0	; 0xde0 <__mulsf3>
 41e:	dc 01       	movw	r26, r24
 420:	cb 01       	movw	r24, r22
 422:	bc 01       	movw	r22, r24
 424:	cd 01       	movw	r24, r26
 426:	0e 94 6f 06 	call	0xcde	; 0xcde <__fixunssfsi>
 42a:	dc 01       	movw	r26, r24
 42c:	cb 01       	movw	r24, r22
 42e:	9e 87       	std	Y+14, r25	; 0x0e
 430:	8d 87       	std	Y+13, r24	; 0x0d
 432:	0f c0       	rjmp	.+30     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 434:	89 e1       	ldi	r24, 0x19	; 25
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	98 8b       	std	Y+16, r25	; 0x10
 43a:	8f 87       	std	Y+15, r24	; 0x0f
 43c:	8f 85       	ldd	r24, Y+15	; 0x0f
 43e:	98 89       	ldd	r25, Y+16	; 0x10
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 444:	98 8b       	std	Y+16, r25	; 0x10
 446:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 448:	8d 85       	ldd	r24, Y+13	; 0x0d
 44a:	9e 85       	ldd	r25, Y+14	; 0x0e
 44c:	01 97       	sbiw	r24, 0x01	; 1
 44e:	9e 87       	std	Y+14, r25	; 0x0e
 450:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 452:	8d 85       	ldd	r24, Y+13	; 0x0d
 454:	9e 85       	ldd	r25, Y+14	; 0x0e
 456:	89 2b       	or	r24, r25
 458:	69 f7       	brne	.-38     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 45a:	14 c0       	rjmp	.+40     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 45c:	69 85       	ldd	r22, Y+9	; 0x09
 45e:	7a 85       	ldd	r23, Y+10	; 0x0a
 460:	8b 85       	ldd	r24, Y+11	; 0x0b
 462:	9c 85       	ldd	r25, Y+12	; 0x0c
 464:	0e 94 6f 06 	call	0xcde	; 0xcde <__fixunssfsi>
 468:	dc 01       	movw	r26, r24
 46a:	cb 01       	movw	r24, r22
 46c:	9e 87       	std	Y+14, r25	; 0x0e
 46e:	8d 87       	std	Y+13, r24	; 0x0d
 470:	8d 85       	ldd	r24, Y+13	; 0x0d
 472:	9e 85       	ldd	r25, Y+14	; 0x0e
 474:	9a 8b       	std	Y+18, r25	; 0x12
 476:	89 8b       	std	Y+17, r24	; 0x11
 478:	89 89       	ldd	r24, Y+17	; 0x11
 47a:	9a 89       	ldd	r25, Y+18	; 0x12
 47c:	01 97       	sbiw	r24, 0x01	; 1
 47e:	f1 f7       	brne	.-4      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 480:	9a 8b       	std	Y+18, r25	; 0x12
 482:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(10);
	LCD_kick();
 484:	0e 94 41 00 	call	0x82	; 0x82 <LCD_kick>


#endif
}
 488:	00 00       	nop
 48a:	6d 96       	adiw	r28, 0x1d	; 29
 48c:	0f b6       	in	r0, 0x3f	; 63
 48e:	f8 94       	cli
 490:	de bf       	out	0x3e, r29	; 62
 492:	0f be       	out	0x3f, r0	; 63
 494:	cd bf       	out	0x3d, r28	; 61
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	08 95       	ret

0000049c <LCD_CLEAR>:

void LCD_CLEAR(void)
{
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	cd b7       	in	r28, 0x3d	; 61
 4a2:	de b7       	in	r29, 0x3e	; 62
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_WRITE_COMMAND>
}
 4aa:	00 00       	nop
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	08 95       	ret

000004b2 <LCD_Init>:


void LCD_Init(void)
{
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
 4b6:	cd b7       	in	r28, 0x3d	; 61
 4b8:	de b7       	in	r29, 0x3e	; 62
 4ba:	2e 97       	sbiw	r28, 0x0e	; 14
 4bc:	0f b6       	in	r0, 0x3f	; 63
 4be:	f8 94       	cli
 4c0:	de bf       	out	0x3e, r29	; 62
 4c2:	0f be       	out	0x3f, r0	; 63
 4c4:	cd bf       	out	0x3d, r28	; 61
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	a0 ea       	ldi	r26, 0xA0	; 160
 4cc:	b1 e4       	ldi	r27, 0x41	; 65
 4ce:	89 83       	std	Y+1, r24	; 0x01
 4d0:	9a 83       	std	Y+2, r25	; 0x02
 4d2:	ab 83       	std	Y+3, r26	; 0x03
 4d4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 4d6:	20 e0       	ldi	r18, 0x00	; 0
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	4a e7       	ldi	r20, 0x7A	; 122
 4dc:	53 e4       	ldi	r21, 0x43	; 67
 4de:	69 81       	ldd	r22, Y+1	; 0x01
 4e0:	7a 81       	ldd	r23, Y+2	; 0x02
 4e2:	8b 81       	ldd	r24, Y+3	; 0x03
 4e4:	9c 81       	ldd	r25, Y+4	; 0x04
 4e6:	0e 94 f0 06 	call	0xde0	; 0xde0 <__mulsf3>
 4ea:	dc 01       	movw	r26, r24
 4ec:	cb 01       	movw	r24, r22
 4ee:	8d 83       	std	Y+5, r24	; 0x05
 4f0:	9e 83       	std	Y+6, r25	; 0x06
 4f2:	af 83       	std	Y+7, r26	; 0x07
 4f4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 4f6:	20 e0       	ldi	r18, 0x00	; 0
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	40 e8       	ldi	r20, 0x80	; 128
 4fc:	5f e3       	ldi	r21, 0x3F	; 63
 4fe:	6d 81       	ldd	r22, Y+5	; 0x05
 500:	7e 81       	ldd	r23, Y+6	; 0x06
 502:	8f 81       	ldd	r24, Y+7	; 0x07
 504:	98 85       	ldd	r25, Y+8	; 0x08
 506:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__cmpsf2>
 50a:	88 23       	and	r24, r24
 50c:	2c f4       	brge	.+10     	; 0x518 <LCD_Init+0x66>
		__ticks = 1;
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	9a 87       	std	Y+10, r25	; 0x0a
 514:	89 87       	std	Y+9, r24	; 0x09
 516:	3f c0       	rjmp	.+126    	; 0x596 <LCD_Init+0xe4>
	else if (__tmp > 65535)
 518:	20 e0       	ldi	r18, 0x00	; 0
 51a:	3f ef       	ldi	r19, 0xFF	; 255
 51c:	4f e7       	ldi	r20, 0x7F	; 127
 51e:	57 e4       	ldi	r21, 0x47	; 71
 520:	6d 81       	ldd	r22, Y+5	; 0x05
 522:	7e 81       	ldd	r23, Y+6	; 0x06
 524:	8f 81       	ldd	r24, Y+7	; 0x07
 526:	98 85       	ldd	r25, Y+8	; 0x08
 528:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__gesf2>
 52c:	18 16       	cp	r1, r24
 52e:	4c f5       	brge	.+82     	; 0x582 <LCD_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 530:	20 e0       	ldi	r18, 0x00	; 0
 532:	30 e0       	ldi	r19, 0x00	; 0
 534:	40 e2       	ldi	r20, 0x20	; 32
 536:	51 e4       	ldi	r21, 0x41	; 65
 538:	69 81       	ldd	r22, Y+1	; 0x01
 53a:	7a 81       	ldd	r23, Y+2	; 0x02
 53c:	8b 81       	ldd	r24, Y+3	; 0x03
 53e:	9c 81       	ldd	r25, Y+4	; 0x04
 540:	0e 94 f0 06 	call	0xde0	; 0xde0 <__mulsf3>
 544:	dc 01       	movw	r26, r24
 546:	cb 01       	movw	r24, r22
 548:	bc 01       	movw	r22, r24
 54a:	cd 01       	movw	r24, r26
 54c:	0e 94 6f 06 	call	0xcde	; 0xcde <__fixunssfsi>
 550:	dc 01       	movw	r26, r24
 552:	cb 01       	movw	r24, r22
 554:	9a 87       	std	Y+10, r25	; 0x0a
 556:	89 87       	std	Y+9, r24	; 0x09
 558:	0f c0       	rjmp	.+30     	; 0x578 <LCD_Init+0xc6>
 55a:	89 e1       	ldi	r24, 0x19	; 25
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	9c 87       	std	Y+12, r25	; 0x0c
 560:	8b 87       	std	Y+11, r24	; 0x0b
 562:	8b 85       	ldd	r24, Y+11	; 0x0b
 564:	9c 85       	ldd	r25, Y+12	; 0x0c
 566:	01 97       	sbiw	r24, 0x01	; 1
 568:	f1 f7       	brne	.-4      	; 0x566 <LCD_Init+0xb4>
 56a:	9c 87       	std	Y+12, r25	; 0x0c
 56c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 56e:	89 85       	ldd	r24, Y+9	; 0x09
 570:	9a 85       	ldd	r25, Y+10	; 0x0a
 572:	01 97       	sbiw	r24, 0x01	; 1
 574:	9a 87       	std	Y+10, r25	; 0x0a
 576:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 578:	89 85       	ldd	r24, Y+9	; 0x09
 57a:	9a 85       	ldd	r25, Y+10	; 0x0a
 57c:	89 2b       	or	r24, r25
 57e:	69 f7       	brne	.-38     	; 0x55a <LCD_Init+0xa8>
 580:	14 c0       	rjmp	.+40     	; 0x5aa <LCD_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 582:	6d 81       	ldd	r22, Y+5	; 0x05
 584:	7e 81       	ldd	r23, Y+6	; 0x06
 586:	8f 81       	ldd	r24, Y+7	; 0x07
 588:	98 85       	ldd	r25, Y+8	; 0x08
 58a:	0e 94 6f 06 	call	0xcde	; 0xcde <__fixunssfsi>
 58e:	dc 01       	movw	r26, r24
 590:	cb 01       	movw	r24, r22
 592:	9a 87       	std	Y+10, r25	; 0x0a
 594:	89 87       	std	Y+9, r24	; 0x09
 596:	89 85       	ldd	r24, Y+9	; 0x09
 598:	9a 85       	ldd	r25, Y+10	; 0x0a
 59a:	9e 87       	std	Y+14, r25	; 0x0e
 59c:	8d 87       	std	Y+13, r24	; 0x0d
 59e:	8d 85       	ldd	r24, Y+13	; 0x0d
 5a0:	9e 85       	ldd	r25, Y+14	; 0x0e
 5a2:	01 97       	sbiw	r24, 0x01	; 1
 5a4:	f1 f7       	brne	.-4      	; 0x5a2 <LCD_Init+0xf0>
 5a6:	9e 87       	std	Y+14, r25	; 0x0e
 5a8:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(20);
	LCD_isbusy();
 5aa:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_isbusy>
	SET_BIT(DDR_LCD_CTRL,EN_SWITCH);
 5ae:	87 e3       	ldi	r24, 0x37	; 55
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	27 e3       	ldi	r18, 0x37	; 55
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	f9 01       	movw	r30, r18
 5b8:	20 81       	ld	r18, Z
 5ba:	28 60       	ori	r18, 0x08	; 8
 5bc:	fc 01       	movw	r30, r24
 5be:	20 83       	st	Z, r18
	SET_BIT(DDR_LCD_CTRL,RW_SWITCH);
 5c0:	87 e3       	ldi	r24, 0x37	; 55
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	27 e3       	ldi	r18, 0x37	; 55
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	f9 01       	movw	r30, r18
 5ca:	20 81       	ld	r18, Z
 5cc:	24 60       	ori	r18, 0x04	; 4
 5ce:	fc 01       	movw	r30, r24
 5d0:	20 83       	st	Z, r18
	SET_BIT(DDR_LCD_CTRL,RS_SWITCH);
 5d2:	87 e3       	ldi	r24, 0x37	; 55
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	27 e3       	ldi	r18, 0x37	; 55
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	f9 01       	movw	r30, r18
 5dc:	20 81       	ld	r18, Z
 5de:	22 60       	ori	r18, 0x02	; 2
 5e0:	fc 01       	movw	r30, r24
 5e2:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL,EN_SWITCH);
 5e4:	88 e3       	ldi	r24, 0x38	; 56
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	28 e3       	ldi	r18, 0x38	; 56
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	f9 01       	movw	r30, r18
 5ee:	20 81       	ld	r18, Z
 5f0:	27 7f       	andi	r18, 0xF7	; 247
 5f2:	fc 01       	movw	r30, r24
 5f4:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL,RW_SWITCH);
 5f6:	88 e3       	ldi	r24, 0x38	; 56
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	28 e3       	ldi	r18, 0x38	; 56
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	f9 01       	movw	r30, r18
 600:	20 81       	ld	r18, Z
 602:	2b 7f       	andi	r18, 0xFB	; 251
 604:	fc 01       	movw	r30, r24
 606:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL,RS_SWITCH);
 608:	88 e3       	ldi	r24, 0x38	; 56
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	28 e3       	ldi	r18, 0x38	; 56
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	f9 01       	movw	r30, r18
 612:	20 81       	ld	r18, Z
 614:	2d 7f       	andi	r18, 0xFD	; 253
 616:	fc 01       	movw	r30, r24
 618:	20 83       	st	Z, r18
	DDR_LCD_PORT = 0xFF;
 61a:	8a e3       	ldi	r24, 0x3A	; 58
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	2f ef       	ldi	r18, 0xFF	; 255
 620:	fc 01       	movw	r30, r24
 622:	20 83       	st	Z, r18
	LCD_CLEAR();
 624:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_CLEAR>
#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
#endif
#ifdef FOUR_BIT_MODE

	LCD_WRITE_COMMAND(0x02);
 628:	82 e0       	ldi	r24, 0x02	; 2
 62a:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
 62e:	88 e2       	ldi	r24, 0x28	; 40
 630:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_WRITE_COMMAND>

#endif
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 634:	86 e0       	ldi	r24, 0x06	; 6
 636:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 63a:	80 e8       	ldi	r24, 0x80	; 128
 63c:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 640:	8f e0       	ldi	r24, 0x0F	; 15
 642:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_WRITE_COMMAND>
}
 646:	00 00       	nop
 648:	2e 96       	adiw	r28, 0x0e	; 14
 64a:	0f b6       	in	r0, 0x3f	; 63
 64c:	f8 94       	cli
 64e:	de bf       	out	0x3e, r29	; 62
 650:	0f be       	out	0x3f, r0	; 63
 652:	cd bf       	out	0x3d, r28	; 61
 654:	df 91       	pop	r29
 656:	cf 91       	pop	r28
 658:	08 95       	ret

0000065a <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char data)
{
 65a:	cf 93       	push	r28
 65c:	df 93       	push	r29
 65e:	cd b7       	in	r28, 0x3d	; 61
 660:	de b7       	in	r29, 0x3e	; 62
 662:	6d 97       	sbiw	r28, 0x1d	; 29
 664:	0f b6       	in	r0, 0x3f	; 63
 666:	f8 94       	cli
 668:	de bf       	out	0x3e, r29	; 62
 66a:	0f be       	out	0x3f, r0	; 63
 66c:	cd bf       	out	0x3d, r28	; 61
 66e:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_kick();
#endif


#ifdef FOUR_BIT_MODE
	LCD_PORT = ((LCD_PORT & 0x0F) | (data & 0xF0));
 670:	8b e3       	ldi	r24, 0x3B	; 59
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	2b e3       	ldi	r18, 0x3B	; 59
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	f9 01       	movw	r30, r18
 67a:	20 81       	ld	r18, Z
 67c:	32 2f       	mov	r19, r18
 67e:	3f 70       	andi	r19, 0x0F	; 15
 680:	2d 8d       	ldd	r18, Y+29	; 0x1d
 682:	20 7f       	andi	r18, 0xF0	; 240
 684:	23 2b       	or	r18, r19
 686:	fc 01       	movw	r30, r24
 688:	20 83       	st	Z, r18
	SET_BIT(LCD_CTRL,RS_SWITCH);
 68a:	88 e3       	ldi	r24, 0x38	; 56
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	28 e3       	ldi	r18, 0x38	; 56
 690:	30 e0       	ldi	r19, 0x00	; 0
 692:	f9 01       	movw	r30, r18
 694:	20 81       	ld	r18, Z
 696:	22 60       	ori	r18, 0x02	; 2
 698:	fc 01       	movw	r30, r24
 69a:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL,RW_SWITCH);
 69c:	88 e3       	ldi	r24, 0x38	; 56
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	28 e3       	ldi	r18, 0x38	; 56
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	f9 01       	movw	r30, r18
 6a6:	20 81       	ld	r18, Z
 6a8:	2b 7f       	andi	r18, 0xFB	; 251
 6aa:	fc 01       	movw	r30, r24
 6ac:	20 83       	st	Z, r18
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	a0 e2       	ldi	r26, 0x20	; 32
 6b4:	b1 e4       	ldi	r27, 0x41	; 65
 6b6:	89 83       	std	Y+1, r24	; 0x01
 6b8:	9a 83       	std	Y+2, r25	; 0x02
 6ba:	ab 83       	std	Y+3, r26	; 0x03
 6bc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 6be:	20 e0       	ldi	r18, 0x00	; 0
 6c0:	30 e0       	ldi	r19, 0x00	; 0
 6c2:	4a e7       	ldi	r20, 0x7A	; 122
 6c4:	53 e4       	ldi	r21, 0x43	; 67
 6c6:	69 81       	ldd	r22, Y+1	; 0x01
 6c8:	7a 81       	ldd	r23, Y+2	; 0x02
 6ca:	8b 81       	ldd	r24, Y+3	; 0x03
 6cc:	9c 81       	ldd	r25, Y+4	; 0x04
 6ce:	0e 94 f0 06 	call	0xde0	; 0xde0 <__mulsf3>
 6d2:	dc 01       	movw	r26, r24
 6d4:	cb 01       	movw	r24, r22
 6d6:	8b 8b       	std	Y+19, r24	; 0x13
 6d8:	9c 8b       	std	Y+20, r25	; 0x14
 6da:	ad 8b       	std	Y+21, r26	; 0x15
 6dc:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 6de:	20 e0       	ldi	r18, 0x00	; 0
 6e0:	30 e0       	ldi	r19, 0x00	; 0
 6e2:	40 e8       	ldi	r20, 0x80	; 128
 6e4:	5f e3       	ldi	r21, 0x3F	; 63
 6e6:	6b 89       	ldd	r22, Y+19	; 0x13
 6e8:	7c 89       	ldd	r23, Y+20	; 0x14
 6ea:	8d 89       	ldd	r24, Y+21	; 0x15
 6ec:	9e 89       	ldd	r25, Y+22	; 0x16
 6ee:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__cmpsf2>
 6f2:	88 23       	and	r24, r24
 6f4:	2c f4       	brge	.+10     	; 0x700 <LCD_WRITE_CHAR+0xa6>
		__ticks = 1;
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	98 8f       	std	Y+24, r25	; 0x18
 6fc:	8f 8b       	std	Y+23, r24	; 0x17
 6fe:	3f c0       	rjmp	.+126    	; 0x77e <LCD_WRITE_CHAR+0x124>
	else if (__tmp > 65535)
 700:	20 e0       	ldi	r18, 0x00	; 0
 702:	3f ef       	ldi	r19, 0xFF	; 255
 704:	4f e7       	ldi	r20, 0x7F	; 127
 706:	57 e4       	ldi	r21, 0x47	; 71
 708:	6b 89       	ldd	r22, Y+19	; 0x13
 70a:	7c 89       	ldd	r23, Y+20	; 0x14
 70c:	8d 89       	ldd	r24, Y+21	; 0x15
 70e:	9e 89       	ldd	r25, Y+22	; 0x16
 710:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__gesf2>
 714:	18 16       	cp	r1, r24
 716:	4c f5       	brge	.+82     	; 0x76a <LCD_WRITE_CHAR+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 718:	20 e0       	ldi	r18, 0x00	; 0
 71a:	30 e0       	ldi	r19, 0x00	; 0
 71c:	40 e2       	ldi	r20, 0x20	; 32
 71e:	51 e4       	ldi	r21, 0x41	; 65
 720:	69 81       	ldd	r22, Y+1	; 0x01
 722:	7a 81       	ldd	r23, Y+2	; 0x02
 724:	8b 81       	ldd	r24, Y+3	; 0x03
 726:	9c 81       	ldd	r25, Y+4	; 0x04
 728:	0e 94 f0 06 	call	0xde0	; 0xde0 <__mulsf3>
 72c:	dc 01       	movw	r26, r24
 72e:	cb 01       	movw	r24, r22
 730:	bc 01       	movw	r22, r24
 732:	cd 01       	movw	r24, r26
 734:	0e 94 6f 06 	call	0xcde	; 0xcde <__fixunssfsi>
 738:	dc 01       	movw	r26, r24
 73a:	cb 01       	movw	r24, r22
 73c:	98 8f       	std	Y+24, r25	; 0x18
 73e:	8f 8b       	std	Y+23, r24	; 0x17
 740:	0f c0       	rjmp	.+30     	; 0x760 <LCD_WRITE_CHAR+0x106>
 742:	89 e1       	ldi	r24, 0x19	; 25
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	9a 8f       	std	Y+26, r25	; 0x1a
 748:	89 8f       	std	Y+25, r24	; 0x19
 74a:	89 8d       	ldd	r24, Y+25	; 0x19
 74c:	9a 8d       	ldd	r25, Y+26	; 0x1a
 74e:	01 97       	sbiw	r24, 0x01	; 1
 750:	f1 f7       	brne	.-4      	; 0x74e <LCD_WRITE_CHAR+0xf4>
 752:	9a 8f       	std	Y+26, r25	; 0x1a
 754:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 756:	8f 89       	ldd	r24, Y+23	; 0x17
 758:	98 8d       	ldd	r25, Y+24	; 0x18
 75a:	01 97       	sbiw	r24, 0x01	; 1
 75c:	98 8f       	std	Y+24, r25	; 0x18
 75e:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 760:	8f 89       	ldd	r24, Y+23	; 0x17
 762:	98 8d       	ldd	r25, Y+24	; 0x18
 764:	89 2b       	or	r24, r25
 766:	69 f7       	brne	.-38     	; 0x742 <LCD_WRITE_CHAR+0xe8>
 768:	14 c0       	rjmp	.+40     	; 0x792 <LCD_WRITE_CHAR+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 76a:	6b 89       	ldd	r22, Y+19	; 0x13
 76c:	7c 89       	ldd	r23, Y+20	; 0x14
 76e:	8d 89       	ldd	r24, Y+21	; 0x15
 770:	9e 89       	ldd	r25, Y+22	; 0x16
 772:	0e 94 6f 06 	call	0xcde	; 0xcde <__fixunssfsi>
 776:	dc 01       	movw	r26, r24
 778:	cb 01       	movw	r24, r22
 77a:	98 8f       	std	Y+24, r25	; 0x18
 77c:	8f 8b       	std	Y+23, r24	; 0x17
 77e:	8f 89       	ldd	r24, Y+23	; 0x17
 780:	98 8d       	ldd	r25, Y+24	; 0x18
 782:	9c 8f       	std	Y+28, r25	; 0x1c
 784:	8b 8f       	std	Y+27, r24	; 0x1b
 786:	8b 8d       	ldd	r24, Y+27	; 0x1b
 788:	9c 8d       	ldd	r25, Y+28	; 0x1c
 78a:	01 97       	sbiw	r24, 0x01	; 1
 78c:	f1 f7       	brne	.-4      	; 0x78a <LCD_WRITE_CHAR+0x130>
 78e:	9c 8f       	std	Y+28, r25	; 0x1c
 790:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(10);
	LCD_kick();
 792:	0e 94 41 00 	call	0x82	; 0x82 <LCD_kick>
	LCD_PORT = ((LCD_PORT & 0x0F) | (data << 4));
 796:	8b e3       	ldi	r24, 0x3B	; 59
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	2b e3       	ldi	r18, 0x3B	; 59
 79c:	30 e0       	ldi	r19, 0x00	; 0
 79e:	f9 01       	movw	r30, r18
 7a0:	20 81       	ld	r18, Z
 7a2:	42 2f       	mov	r20, r18
 7a4:	4f 70       	andi	r20, 0x0F	; 15
 7a6:	2d 8d       	ldd	r18, Y+29	; 0x1d
 7a8:	22 2f       	mov	r18, r18
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	22 95       	swap	r18
 7ae:	32 95       	swap	r19
 7b0:	30 7f       	andi	r19, 0xF0	; 240
 7b2:	32 27       	eor	r19, r18
 7b4:	20 7f       	andi	r18, 0xF0	; 240
 7b6:	32 27       	eor	r19, r18
 7b8:	24 2b       	or	r18, r20
 7ba:	fc 01       	movw	r30, r24
 7bc:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL,RW_SWITCH);
 7be:	88 e3       	ldi	r24, 0x38	; 56
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	28 e3       	ldi	r18, 0x38	; 56
 7c4:	30 e0       	ldi	r19, 0x00	; 0
 7c6:	f9 01       	movw	r30, r18
 7c8:	20 81       	ld	r18, Z
 7ca:	2b 7f       	andi	r18, 0xFB	; 251
 7cc:	fc 01       	movw	r30, r24
 7ce:	20 83       	st	Z, r18
	SET_BIT(LCD_CTRL,RS_SWITCH);
 7d0:	88 e3       	ldi	r24, 0x38	; 56
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	28 e3       	ldi	r18, 0x38	; 56
 7d6:	30 e0       	ldi	r19, 0x00	; 0
 7d8:	f9 01       	movw	r30, r18
 7da:	20 81       	ld	r18, Z
 7dc:	22 60       	ori	r18, 0x02	; 2
 7de:	fc 01       	movw	r30, r24
 7e0:	20 83       	st	Z, r18
 7e2:	80 e0       	ldi	r24, 0x00	; 0
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	a0 e2       	ldi	r26, 0x20	; 32
 7e8:	b1 e4       	ldi	r27, 0x41	; 65
 7ea:	8d 83       	std	Y+5, r24	; 0x05
 7ec:	9e 83       	std	Y+6, r25	; 0x06
 7ee:	af 83       	std	Y+7, r26	; 0x07
 7f0:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 7f2:	20 e0       	ldi	r18, 0x00	; 0
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	4a e7       	ldi	r20, 0x7A	; 122
 7f8:	53 e4       	ldi	r21, 0x43	; 67
 7fa:	6d 81       	ldd	r22, Y+5	; 0x05
 7fc:	7e 81       	ldd	r23, Y+6	; 0x06
 7fe:	8f 81       	ldd	r24, Y+7	; 0x07
 800:	98 85       	ldd	r25, Y+8	; 0x08
 802:	0e 94 f0 06 	call	0xde0	; 0xde0 <__mulsf3>
 806:	dc 01       	movw	r26, r24
 808:	cb 01       	movw	r24, r22
 80a:	89 87       	std	Y+9, r24	; 0x09
 80c:	9a 87       	std	Y+10, r25	; 0x0a
 80e:	ab 87       	std	Y+11, r26	; 0x0b
 810:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 812:	20 e0       	ldi	r18, 0x00	; 0
 814:	30 e0       	ldi	r19, 0x00	; 0
 816:	40 e8       	ldi	r20, 0x80	; 128
 818:	5f e3       	ldi	r21, 0x3F	; 63
 81a:	69 85       	ldd	r22, Y+9	; 0x09
 81c:	7a 85       	ldd	r23, Y+10	; 0x0a
 81e:	8b 85       	ldd	r24, Y+11	; 0x0b
 820:	9c 85       	ldd	r25, Y+12	; 0x0c
 822:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__cmpsf2>
 826:	88 23       	and	r24, r24
 828:	2c f4       	brge	.+10     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
		__ticks = 1;
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	9e 87       	std	Y+14, r25	; 0x0e
 830:	8d 87       	std	Y+13, r24	; 0x0d
 832:	3f c0       	rjmp	.+126    	; 0x8b2 <__stack+0x53>
	else if (__tmp > 65535)
 834:	20 e0       	ldi	r18, 0x00	; 0
 836:	3f ef       	ldi	r19, 0xFF	; 255
 838:	4f e7       	ldi	r20, 0x7F	; 127
 83a:	57 e4       	ldi	r21, 0x47	; 71
 83c:	69 85       	ldd	r22, Y+9	; 0x09
 83e:	7a 85       	ldd	r23, Y+10	; 0x0a
 840:	8b 85       	ldd	r24, Y+11	; 0x0b
 842:	9c 85       	ldd	r25, Y+12	; 0x0c
 844:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__gesf2>
 848:	18 16       	cp	r1, r24
 84a:	4c f5       	brge	.+82     	; 0x89e <__stack+0x3f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 84c:	20 e0       	ldi	r18, 0x00	; 0
 84e:	30 e0       	ldi	r19, 0x00	; 0
 850:	40 e2       	ldi	r20, 0x20	; 32
 852:	51 e4       	ldi	r21, 0x41	; 65
 854:	6d 81       	ldd	r22, Y+5	; 0x05
 856:	7e 81       	ldd	r23, Y+6	; 0x06
 858:	8f 81       	ldd	r24, Y+7	; 0x07
 85a:	98 85       	ldd	r25, Y+8	; 0x08
 85c:	0e 94 f0 06 	call	0xde0	; 0xde0 <__mulsf3>
 860:	dc 01       	movw	r26, r24
 862:	cb 01       	movw	r24, r22
 864:	bc 01       	movw	r22, r24
 866:	cd 01       	movw	r24, r26
 868:	0e 94 6f 06 	call	0xcde	; 0xcde <__fixunssfsi>
 86c:	dc 01       	movw	r26, r24
 86e:	cb 01       	movw	r24, r22
 870:	9e 87       	std	Y+14, r25	; 0x0e
 872:	8d 87       	std	Y+13, r24	; 0x0d
 874:	0f c0       	rjmp	.+30     	; 0x894 <__stack+0x35>
 876:	89 e1       	ldi	r24, 0x19	; 25
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	98 8b       	std	Y+16, r25	; 0x10
 87c:	8f 87       	std	Y+15, r24	; 0x0f
 87e:	8f 85       	ldd	r24, Y+15	; 0x0f
 880:	98 89       	ldd	r25, Y+16	; 0x10
 882:	01 97       	sbiw	r24, 0x01	; 1
 884:	f1 f7       	brne	.-4      	; 0x882 <__stack+0x23>
 886:	98 8b       	std	Y+16, r25	; 0x10
 888:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 88a:	8d 85       	ldd	r24, Y+13	; 0x0d
 88c:	9e 85       	ldd	r25, Y+14	; 0x0e
 88e:	01 97       	sbiw	r24, 0x01	; 1
 890:	9e 87       	std	Y+14, r25	; 0x0e
 892:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 894:	8d 85       	ldd	r24, Y+13	; 0x0d
 896:	9e 85       	ldd	r25, Y+14	; 0x0e
 898:	89 2b       	or	r24, r25
 89a:	69 f7       	brne	.-38     	; 0x876 <__stack+0x17>
 89c:	14 c0       	rjmp	.+40     	; 0x8c6 <__stack+0x67>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 89e:	69 85       	ldd	r22, Y+9	; 0x09
 8a0:	7a 85       	ldd	r23, Y+10	; 0x0a
 8a2:	8b 85       	ldd	r24, Y+11	; 0x0b
 8a4:	9c 85       	ldd	r25, Y+12	; 0x0c
 8a6:	0e 94 6f 06 	call	0xcde	; 0xcde <__fixunssfsi>
 8aa:	dc 01       	movw	r26, r24
 8ac:	cb 01       	movw	r24, r22
 8ae:	9e 87       	std	Y+14, r25	; 0x0e
 8b0:	8d 87       	std	Y+13, r24	; 0x0d
 8b2:	8d 85       	ldd	r24, Y+13	; 0x0d
 8b4:	9e 85       	ldd	r25, Y+14	; 0x0e
 8b6:	9a 8b       	std	Y+18, r25	; 0x12
 8b8:	89 8b       	std	Y+17, r24	; 0x11
 8ba:	89 89       	ldd	r24, Y+17	; 0x11
 8bc:	9a 89       	ldd	r25, Y+18	; 0x12
 8be:	01 97       	sbiw	r24, 0x01	; 1
 8c0:	f1 f7       	brne	.-4      	; 0x8be <__stack+0x5f>
 8c2:	9a 8b       	std	Y+18, r25	; 0x12
 8c4:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(10);
	LCD_kick();
 8c6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_kick>
#endif

}
 8ca:	00 00       	nop
 8cc:	6d 96       	adiw	r28, 0x1d	; 29
 8ce:	0f b6       	in	r0, 0x3f	; 63
 8d0:	f8 94       	cli
 8d2:	de bf       	out	0x3e, r29	; 62
 8d4:	0f be       	out	0x3f, r0	; 63
 8d6:	cd bf       	out	0x3d, r28	; 61
 8d8:	df 91       	pop	r29
 8da:	cf 91       	pop	r28
 8dc:	08 95       	ret

000008de <LCD_GOTO_XY>:



void LCD_GOTO_XY(int line , int position)
{
 8de:	cf 93       	push	r28
 8e0:	df 93       	push	r29
 8e2:	00 d0       	rcall	.+0      	; 0x8e4 <LCD_GOTO_XY+0x6>
 8e4:	00 d0       	rcall	.+0      	; 0x8e6 <LCD_GOTO_XY+0x8>
 8e6:	cd b7       	in	r28, 0x3d	; 61
 8e8:	de b7       	in	r29, 0x3e	; 62
 8ea:	9a 83       	std	Y+2, r25	; 0x02
 8ec:	89 83       	std	Y+1, r24	; 0x01
 8ee:	7c 83       	std	Y+4, r23	; 0x04
 8f0:	6b 83       	std	Y+3, r22	; 0x03
	if (line == 1)
 8f2:	89 81       	ldd	r24, Y+1	; 0x01
 8f4:	9a 81       	ldd	r25, Y+2	; 0x02
 8f6:	01 97       	sbiw	r24, 0x01	; 1
 8f8:	69 f4       	brne	.+26     	; 0x914 <LCD_GOTO_XY+0x36>
	{
		if(position <16 && position>=0)
 8fa:	8b 81       	ldd	r24, Y+3	; 0x03
 8fc:	9c 81       	ldd	r25, Y+4	; 0x04
 8fe:	40 97       	sbiw	r24, 0x10	; 16
 900:	cc f4       	brge	.+50     	; 0x934 <LCD_GOTO_XY+0x56>
 902:	8b 81       	ldd	r24, Y+3	; 0x03
 904:	9c 81       	ldd	r25, Y+4	; 0x04
 906:	99 23       	and	r25, r25
 908:	ac f0       	brlt	.+42     	; 0x934 <LCD_GOTO_XY+0x56>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 90a:	8b 81       	ldd	r24, Y+3	; 0x03
 90c:	80 58       	subi	r24, 0x80	; 128
 90e:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_WRITE_COMMAND>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);

		}
	}

}
 912:	10 c0       	rjmp	.+32     	; 0x934 <LCD_GOTO_XY+0x56>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);

		}
	}
	else if (line == 2)
 914:	89 81       	ldd	r24, Y+1	; 0x01
 916:	9a 81       	ldd	r25, Y+2	; 0x02
 918:	02 97       	sbiw	r24, 0x02	; 2
 91a:	61 f4       	brne	.+24     	; 0x934 <LCD_GOTO_XY+0x56>
	{
		if(position <16 && position>=0)
 91c:	8b 81       	ldd	r24, Y+3	; 0x03
 91e:	9c 81       	ldd	r25, Y+4	; 0x04
 920:	40 97       	sbiw	r24, 0x10	; 16
 922:	44 f4       	brge	.+16     	; 0x934 <LCD_GOTO_XY+0x56>
 924:	8b 81       	ldd	r24, Y+3	; 0x03
 926:	9c 81       	ldd	r25, Y+4	; 0x04
 928:	99 23       	and	r25, r25
 92a:	24 f0       	brlt	.+8      	; 0x934 <LCD_GOTO_XY+0x56>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 92c:	8b 81       	ldd	r24, Y+3	; 0x03
 92e:	80 54       	subi	r24, 0x40	; 64
 930:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_WRITE_COMMAND>

		}
	}

}
 934:	00 00       	nop
 936:	0f 90       	pop	r0
 938:	0f 90       	pop	r0
 93a:	0f 90       	pop	r0
 93c:	0f 90       	pop	r0
 93e:	df 91       	pop	r29
 940:	cf 91       	pop	r28
 942:	08 95       	ret

00000944 <LCD_WRITE_STR>:

void LCD_WRITE_STR(char* data)
{
 944:	cf 93       	push	r28
 946:	df 93       	push	r29
 948:	00 d0       	rcall	.+0      	; 0x94a <LCD_WRITE_STR+0x6>
 94a:	00 d0       	rcall	.+0      	; 0x94c <LCD_WRITE_STR+0x8>
 94c:	cd b7       	in	r28, 0x3d	; 61
 94e:	de b7       	in	r29, 0x3e	; 62
 950:	9c 83       	std	Y+4, r25	; 0x04
 952:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0;
 954:	1a 82       	std	Y+2, r1	; 0x02
 956:	19 82       	std	Y+1, r1	; 0x01
	while(*data != '\0')
 958:	29 c0       	rjmp	.+82     	; 0x9ac <LCD_WRITE_STR+0x68>
	{
		LCD_WRITE_CHAR(*data++);
 95a:	8b 81       	ldd	r24, Y+3	; 0x03
 95c:	9c 81       	ldd	r25, Y+4	; 0x04
 95e:	9c 01       	movw	r18, r24
 960:	2f 5f       	subi	r18, 0xFF	; 255
 962:	3f 4f       	sbci	r19, 0xFF	; 255
 964:	3c 83       	std	Y+4, r19	; 0x04
 966:	2b 83       	std	Y+3, r18	; 0x03
 968:	fc 01       	movw	r30, r24
 96a:	80 81       	ld	r24, Z
 96c:	0e 94 2d 03 	call	0x65a	; 0x65a <LCD_WRITE_CHAR>
		i++;
 970:	89 81       	ldd	r24, Y+1	; 0x01
 972:	9a 81       	ldd	r25, Y+2	; 0x02
 974:	01 96       	adiw	r24, 0x01	; 1
 976:	9a 83       	std	Y+2, r25	; 0x02
 978:	89 83       	std	Y+1, r24	; 0x01
		if(i == 16)
 97a:	89 81       	ldd	r24, Y+1	; 0x01
 97c:	9a 81       	ldd	r25, Y+2	; 0x02
 97e:	40 97       	sbiw	r24, 0x10	; 16
 980:	39 f4       	brne	.+14     	; 0x990 <LCD_WRITE_STR+0x4c>
		{
			LCD_GOTO_XY(2,0);
 982:	60 e0       	ldi	r22, 0x00	; 0
 984:	70 e0       	ldi	r23, 0x00	; 0
 986:	82 e0       	ldi	r24, 0x02	; 2
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	0e 94 6f 04 	call	0x8de	; 0x8de <LCD_GOTO_XY>
 98e:	0e c0       	rjmp	.+28     	; 0x9ac <LCD_WRITE_STR+0x68>
		}
		else if(i==32)
 990:	89 81       	ldd	r24, Y+1	; 0x01
 992:	9a 81       	ldd	r25, Y+2	; 0x02
 994:	80 97       	sbiw	r24, 0x20	; 32
 996:	51 f4       	brne	.+20     	; 0x9ac <LCD_WRITE_STR+0x68>
		{
			LCD_CLEAR();
 998:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_CLEAR>
			LCD_GOTO_XY(1,0);
 99c:	60 e0       	ldi	r22, 0x00	; 0
 99e:	70 e0       	ldi	r23, 0x00	; 0
 9a0:	81 e0       	ldi	r24, 0x01	; 1
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	0e 94 6f 04 	call	0x8de	; 0x8de <LCD_GOTO_XY>
			i =0;
 9a8:	1a 82       	std	Y+2, r1	; 0x02
 9aa:	19 82       	std	Y+1, r1	; 0x01
}

void LCD_WRITE_STR(char* data)
{
	int i = 0;
	while(*data != '\0')
 9ac:	8b 81       	ldd	r24, Y+3	; 0x03
 9ae:	9c 81       	ldd	r25, Y+4	; 0x04
 9b0:	fc 01       	movw	r30, r24
 9b2:	80 81       	ld	r24, Z
 9b4:	88 23       	and	r24, r24
 9b6:	89 f6       	brne	.-94     	; 0x95a <LCD_WRITE_STR+0x16>
			LCD_CLEAR();
			LCD_GOTO_XY(1,0);
			i =0;
		}
	}
}
 9b8:	00 00       	nop
 9ba:	0f 90       	pop	r0
 9bc:	0f 90       	pop	r0
 9be:	0f 90       	pop	r0
 9c0:	0f 90       	pop	r0
 9c2:	df 91       	pop	r29
 9c4:	cf 91       	pop	r28
 9c6:	08 95       	ret

000009c8 <KEYPAD_Init>:
int KEYPAD_Cols[] = {C0,C1,C2,C3};



void KEYPAD_Init(void)
{
 9c8:	cf 93       	push	r28
 9ca:	df 93       	push	r29
 9cc:	cd b7       	in	r28, 0x3d	; 61
 9ce:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDR_KEYPAD_PORT,C0);
 9d0:	81 e3       	ldi	r24, 0x31	; 49
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	21 e3       	ldi	r18, 0x31	; 49
 9d6:	30 e0       	ldi	r19, 0x00	; 0
 9d8:	f9 01       	movw	r30, r18
 9da:	20 81       	ld	r18, Z
 9dc:	20 61       	ori	r18, 0x10	; 16
 9de:	fc 01       	movw	r30, r24
 9e0:	20 83       	st	Z, r18
	SET_BIT(DDR_KEYPAD_PORT,C1);
 9e2:	81 e3       	ldi	r24, 0x31	; 49
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	21 e3       	ldi	r18, 0x31	; 49
 9e8:	30 e0       	ldi	r19, 0x00	; 0
 9ea:	f9 01       	movw	r30, r18
 9ec:	20 81       	ld	r18, Z
 9ee:	20 62       	ori	r18, 0x20	; 32
 9f0:	fc 01       	movw	r30, r24
 9f2:	20 83       	st	Z, r18
	SET_BIT(DDR_KEYPAD_PORT,C2);
 9f4:	81 e3       	ldi	r24, 0x31	; 49
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	21 e3       	ldi	r18, 0x31	; 49
 9fa:	30 e0       	ldi	r19, 0x00	; 0
 9fc:	f9 01       	movw	r30, r18
 9fe:	20 81       	ld	r18, Z
 a00:	20 64       	ori	r18, 0x40	; 64
 a02:	fc 01       	movw	r30, r24
 a04:	20 83       	st	Z, r18
	SET_BIT(DDR_KEYPAD_PORT,C3);
 a06:	81 e3       	ldi	r24, 0x31	; 49
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	21 e3       	ldi	r18, 0x31	; 49
 a0c:	30 e0       	ldi	r19, 0x00	; 0
 a0e:	f9 01       	movw	r30, r18
 a10:	20 81       	ld	r18, Z
 a12:	20 68       	ori	r18, 0x80	; 128
 a14:	fc 01       	movw	r30, r24
 a16:	20 83       	st	Z, r18
	CLEAR_BIT(DDR_KEYPAD_PORT,R0);
 a18:	81 e3       	ldi	r24, 0x31	; 49
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	21 e3       	ldi	r18, 0x31	; 49
 a1e:	30 e0       	ldi	r19, 0x00	; 0
 a20:	f9 01       	movw	r30, r18
 a22:	20 81       	ld	r18, Z
 a24:	2e 7f       	andi	r18, 0xFE	; 254
 a26:	fc 01       	movw	r30, r24
 a28:	20 83       	st	Z, r18
	CLEAR_BIT(DDR_KEYPAD_PORT,R1);
 a2a:	81 e3       	ldi	r24, 0x31	; 49
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	21 e3       	ldi	r18, 0x31	; 49
 a30:	30 e0       	ldi	r19, 0x00	; 0
 a32:	f9 01       	movw	r30, r18
 a34:	20 81       	ld	r18, Z
 a36:	2d 7f       	andi	r18, 0xFD	; 253
 a38:	fc 01       	movw	r30, r24
 a3a:	20 83       	st	Z, r18
	CLEAR_BIT(DDR_KEYPAD_PORT,R2);
 a3c:	81 e3       	ldi	r24, 0x31	; 49
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	21 e3       	ldi	r18, 0x31	; 49
 a42:	30 e0       	ldi	r19, 0x00	; 0
 a44:	f9 01       	movw	r30, r18
 a46:	20 81       	ld	r18, Z
 a48:	2b 7f       	andi	r18, 0xFB	; 251
 a4a:	fc 01       	movw	r30, r24
 a4c:	20 83       	st	Z, r18
	CLEAR_BIT(DDR_KEYPAD_PORT,R3);
 a4e:	81 e3       	ldi	r24, 0x31	; 49
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	21 e3       	ldi	r18, 0x31	; 49
 a54:	30 e0       	ldi	r19, 0x00	; 0
 a56:	f9 01       	movw	r30, r18
 a58:	20 81       	ld	r18, Z
 a5a:	27 7f       	andi	r18, 0xF7	; 247
 a5c:	fc 01       	movw	r30, r24
 a5e:	20 83       	st	Z, r18
	KEYPAD_PORT = 0xFF;
 a60:	82 e3       	ldi	r24, 0x32	; 50
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	2f ef       	ldi	r18, 0xFF	; 255
 a66:	fc 01       	movw	r30, r24
 a68:	20 83       	st	Z, r18
}
 a6a:	00 00       	nop
 a6c:	df 91       	pop	r29
 a6e:	cf 91       	pop	r28
 a70:	08 95       	ret

00000a72 <KEYPAD_GetChar>:
char KEYPAD_GetChar()
{
 a72:	cf 93       	push	r28
 a74:	df 93       	push	r29
 a76:	00 d0       	rcall	.+0      	; 0xa78 <KEYPAD_GetChar+0x6>
 a78:	00 d0       	rcall	.+0      	; 0xa7a <KEYPAD_GetChar+0x8>
 a7a:	cd b7       	in	r28, 0x3d	; 61
 a7c:	de b7       	in	r29, 0x3e	; 62
	volatile int i ,j;
	for (i=0;i<4;i++)
 a7e:	1a 82       	std	Y+2, r1	; 0x02
 a80:	19 82       	std	Y+1, r1	; 0x01
 a82:	00 c1       	rjmp	.+512    	; 0xc84 <KEYPAD_GetChar+0x212>
	{
		SET_BIT(KEYPAD_PORT,C0);
 a84:	82 e3       	ldi	r24, 0x32	; 50
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	22 e3       	ldi	r18, 0x32	; 50
 a8a:	30 e0       	ldi	r19, 0x00	; 0
 a8c:	f9 01       	movw	r30, r18
 a8e:	20 81       	ld	r18, Z
 a90:	20 61       	ori	r18, 0x10	; 16
 a92:	fc 01       	movw	r30, r24
 a94:	20 83       	st	Z, r18
		SET_BIT(KEYPAD_PORT,C1);
 a96:	82 e3       	ldi	r24, 0x32	; 50
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	22 e3       	ldi	r18, 0x32	; 50
 a9c:	30 e0       	ldi	r19, 0x00	; 0
 a9e:	f9 01       	movw	r30, r18
 aa0:	20 81       	ld	r18, Z
 aa2:	20 62       	ori	r18, 0x20	; 32
 aa4:	fc 01       	movw	r30, r24
 aa6:	20 83       	st	Z, r18
		SET_BIT(KEYPAD_PORT,C2);
 aa8:	82 e3       	ldi	r24, 0x32	; 50
 aaa:	90 e0       	ldi	r25, 0x00	; 0
 aac:	22 e3       	ldi	r18, 0x32	; 50
 aae:	30 e0       	ldi	r19, 0x00	; 0
 ab0:	f9 01       	movw	r30, r18
 ab2:	20 81       	ld	r18, Z
 ab4:	20 64       	ori	r18, 0x40	; 64
 ab6:	fc 01       	movw	r30, r24
 ab8:	20 83       	st	Z, r18
		SET_BIT(KEYPAD_PORT,C3);
 aba:	82 e3       	ldi	r24, 0x32	; 50
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	22 e3       	ldi	r18, 0x32	; 50
 ac0:	30 e0       	ldi	r19, 0x00	; 0
 ac2:	f9 01       	movw	r30, r18
 ac4:	20 81       	ld	r18, Z
 ac6:	20 68       	ori	r18, 0x80	; 128
 ac8:	fc 01       	movw	r30, r24
 aca:	20 83       	st	Z, r18
		CLEAR_BIT(KEYPAD_PORT,KEYPAD_Cols[i]);
 acc:	89 81       	ldd	r24, Y+1	; 0x01
 ace:	9a 81       	ldd	r25, Y+2	; 0x02
 ad0:	88 0f       	add	r24, r24
 ad2:	99 1f       	adc	r25, r25
 ad4:	88 59       	subi	r24, 0x98	; 152
 ad6:	9f 4f       	sbci	r25, 0xFF	; 255
 ad8:	fc 01       	movw	r30, r24
 ada:	20 81       	ld	r18, Z
 adc:	31 81       	ldd	r19, Z+1	; 0x01
 ade:	81 e0       	ldi	r24, 0x01	; 1
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	02 c0       	rjmp	.+4      	; 0xae8 <KEYPAD_GetChar+0x76>
 ae4:	88 0f       	add	r24, r24
 ae6:	99 1f       	adc	r25, r25
 ae8:	2a 95       	dec	r18
 aea:	e2 f7       	brpl	.-8      	; 0xae4 <KEYPAD_GetChar+0x72>
 aec:	ac 01       	movw	r20, r24
 aee:	40 95       	com	r20
 af0:	50 95       	com	r21
 af2:	82 e3       	ldi	r24, 0x32	; 50
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	22 e3       	ldi	r18, 0x32	; 50
 af8:	30 e0       	ldi	r19, 0x00	; 0
 afa:	f9 01       	movw	r30, r18
 afc:	20 81       	ld	r18, Z
 afe:	32 2f       	mov	r19, r18
 b00:	24 2f       	mov	r18, r20
 b02:	23 23       	and	r18, r19
 b04:	fc 01       	movw	r30, r24
 b06:	20 83       	st	Z, r18
		for(j=0;j<4;j++)
 b08:	1c 82       	std	Y+4, r1	; 0x04
 b0a:	1b 82       	std	Y+3, r1	; 0x03
 b0c:	b1 c0       	rjmp	.+354    	; 0xc70 <KEYPAD_GetChar+0x1fe>
		{
			if(!(READ_BIT(KEYPAD_PIN,KEYPAD_Rows[j])))
 b0e:	80 e3       	ldi	r24, 0x30	; 48
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	fc 01       	movw	r30, r24
 b14:	80 81       	ld	r24, Z
 b16:	88 2f       	mov	r24, r24
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	2b 81       	ldd	r18, Y+3	; 0x03
 b1c:	3c 81       	ldd	r19, Y+4	; 0x04
 b1e:	22 0f       	add	r18, r18
 b20:	33 1f       	adc	r19, r19
 b22:	20 5a       	subi	r18, 0xA0	; 160
 b24:	3f 4f       	sbci	r19, 0xFF	; 255
 b26:	f9 01       	movw	r30, r18
 b28:	20 81       	ld	r18, Z
 b2a:	31 81       	ldd	r19, Z+1	; 0x01
 b2c:	02 c0       	rjmp	.+4      	; 0xb32 <KEYPAD_GetChar+0xc0>
 b2e:	95 95       	asr	r25
 b30:	87 95       	ror	r24
 b32:	2a 95       	dec	r18
 b34:	e2 f7       	brpl	.-8      	; 0xb2e <KEYPAD_GetChar+0xbc>
 b36:	81 70       	andi	r24, 0x01	; 1
 b38:	99 27       	eor	r25, r25
 b3a:	89 2b       	or	r24, r25
 b3c:	09 f0       	breq	.+2      	; 0xb40 <KEYPAD_GetChar+0xce>
 b3e:	93 c0       	rjmp	.+294    	; 0xc66 <KEYPAD_GetChar+0x1f4>
			{
				while(!(READ_BIT(KEYPAD_PIN,KEYPAD_Rows[j])));
 b40:	00 00       	nop
 b42:	80 e3       	ldi	r24, 0x30	; 48
 b44:	90 e0       	ldi	r25, 0x00	; 0
 b46:	fc 01       	movw	r30, r24
 b48:	80 81       	ld	r24, Z
 b4a:	88 2f       	mov	r24, r24
 b4c:	90 e0       	ldi	r25, 0x00	; 0
 b4e:	2b 81       	ldd	r18, Y+3	; 0x03
 b50:	3c 81       	ldd	r19, Y+4	; 0x04
 b52:	22 0f       	add	r18, r18
 b54:	33 1f       	adc	r19, r19
 b56:	20 5a       	subi	r18, 0xA0	; 160
 b58:	3f 4f       	sbci	r19, 0xFF	; 255
 b5a:	f9 01       	movw	r30, r18
 b5c:	20 81       	ld	r18, Z
 b5e:	31 81       	ldd	r19, Z+1	; 0x01
 b60:	02 c0       	rjmp	.+4      	; 0xb66 <KEYPAD_GetChar+0xf4>
 b62:	95 95       	asr	r25
 b64:	87 95       	ror	r24
 b66:	2a 95       	dec	r18
 b68:	e2 f7       	brpl	.-8      	; 0xb62 <KEYPAD_GetChar+0xf0>
 b6a:	81 70       	andi	r24, 0x01	; 1
 b6c:	99 27       	eor	r25, r25
 b6e:	89 2b       	or	r24, r25
 b70:	41 f3       	breq	.-48     	; 0xb42 <KEYPAD_GetChar+0xd0>
				switch(i)
 b72:	89 81       	ldd	r24, Y+1	; 0x01
 b74:	9a 81       	ldd	r25, Y+2	; 0x02
 b76:	81 30       	cpi	r24, 0x01	; 1
 b78:	91 05       	cpc	r25, r1
 b7a:	31 f1       	breq	.+76     	; 0xbc8 <KEYPAD_GetChar+0x156>
 b7c:	82 30       	cpi	r24, 0x02	; 2
 b7e:	91 05       	cpc	r25, r1
 b80:	1c f4       	brge	.+6      	; 0xb88 <KEYPAD_GetChar+0x116>
 b82:	89 2b       	or	r24, r25
 b84:	41 f0       	breq	.+16     	; 0xb96 <KEYPAD_GetChar+0x124>
 b86:	6f c0       	rjmp	.+222    	; 0xc66 <KEYPAD_GetChar+0x1f4>
 b88:	82 30       	cpi	r24, 0x02	; 2
 b8a:	91 05       	cpc	r25, r1
 b8c:	a9 f1       	breq	.+106    	; 0xbf8 <KEYPAD_GetChar+0x186>
 b8e:	03 97       	sbiw	r24, 0x03	; 3
 b90:	09 f4       	brne	.+2      	; 0xb94 <KEYPAD_GetChar+0x122>
 b92:	4a c0       	rjmp	.+148    	; 0xc28 <KEYPAD_GetChar+0x1b6>
 b94:	68 c0       	rjmp	.+208    	; 0xc66 <KEYPAD_GetChar+0x1f4>
				{
				case 0:
				{
					if(j==0){return '7';}
 b96:	8b 81       	ldd	r24, Y+3	; 0x03
 b98:	9c 81       	ldd	r25, Y+4	; 0x04
 b9a:	89 2b       	or	r24, r25
 b9c:	11 f4       	brne	.+4      	; 0xba2 <KEYPAD_GetChar+0x130>
 b9e:	87 e3       	ldi	r24, 0x37	; 55
 ba0:	77 c0       	rjmp	.+238    	; 0xc90 <KEYPAD_GetChar+0x21e>
					else if (j==1) {return '4';}
 ba2:	8b 81       	ldd	r24, Y+3	; 0x03
 ba4:	9c 81       	ldd	r25, Y+4	; 0x04
 ba6:	01 97       	sbiw	r24, 0x01	; 1
 ba8:	11 f4       	brne	.+4      	; 0xbae <KEYPAD_GetChar+0x13c>
 baa:	84 e3       	ldi	r24, 0x34	; 52
 bac:	71 c0       	rjmp	.+226    	; 0xc90 <KEYPAD_GetChar+0x21e>
					else if (j==2) {return '1';}
 bae:	8b 81       	ldd	r24, Y+3	; 0x03
 bb0:	9c 81       	ldd	r25, Y+4	; 0x04
 bb2:	02 97       	sbiw	r24, 0x02	; 2
 bb4:	11 f4       	brne	.+4      	; 0xbba <KEYPAD_GetChar+0x148>
 bb6:	81 e3       	ldi	r24, 0x31	; 49
 bb8:	6b c0       	rjmp	.+214    	; 0xc90 <KEYPAD_GetChar+0x21e>
					else if (j==3) {return '!';}
 bba:	8b 81       	ldd	r24, Y+3	; 0x03
 bbc:	9c 81       	ldd	r25, Y+4	; 0x04
 bbe:	03 97       	sbiw	r24, 0x03	; 3
 bc0:	09 f0       	breq	.+2      	; 0xbc4 <KEYPAD_GetChar+0x152>
 bc2:	4a c0       	rjmp	.+148    	; 0xc58 <KEYPAD_GetChar+0x1e6>
 bc4:	81 e2       	ldi	r24, 0x21	; 33
 bc6:	64 c0       	rjmp	.+200    	; 0xc90 <KEYPAD_GetChar+0x21e>
					break;
				}
				case 1:
				{
					if(j==0){return '8';}
 bc8:	8b 81       	ldd	r24, Y+3	; 0x03
 bca:	9c 81       	ldd	r25, Y+4	; 0x04
 bcc:	89 2b       	or	r24, r25
 bce:	11 f4       	brne	.+4      	; 0xbd4 <KEYPAD_GetChar+0x162>
 bd0:	88 e3       	ldi	r24, 0x38	; 56
 bd2:	5e c0       	rjmp	.+188    	; 0xc90 <KEYPAD_GetChar+0x21e>
					else if (j==1) {return '5';}
 bd4:	8b 81       	ldd	r24, Y+3	; 0x03
 bd6:	9c 81       	ldd	r25, Y+4	; 0x04
 bd8:	01 97       	sbiw	r24, 0x01	; 1
 bda:	11 f4       	brne	.+4      	; 0xbe0 <KEYPAD_GetChar+0x16e>
 bdc:	85 e3       	ldi	r24, 0x35	; 53
 bde:	58 c0       	rjmp	.+176    	; 0xc90 <KEYPAD_GetChar+0x21e>
					else if (j==2) {return '2';}
 be0:	8b 81       	ldd	r24, Y+3	; 0x03
 be2:	9c 81       	ldd	r25, Y+4	; 0x04
 be4:	02 97       	sbiw	r24, 0x02	; 2
 be6:	11 f4       	brne	.+4      	; 0xbec <KEYPAD_GetChar+0x17a>
 be8:	82 e3       	ldi	r24, 0x32	; 50
 bea:	52 c0       	rjmp	.+164    	; 0xc90 <KEYPAD_GetChar+0x21e>
					else if (j==3) {return '0';}
 bec:	8b 81       	ldd	r24, Y+3	; 0x03
 bee:	9c 81       	ldd	r25, Y+4	; 0x04
 bf0:	03 97       	sbiw	r24, 0x03	; 3
 bf2:	a1 f5       	brne	.+104    	; 0xc5c <KEYPAD_GetChar+0x1ea>
 bf4:	80 e3       	ldi	r24, 0x30	; 48
 bf6:	4c c0       	rjmp	.+152    	; 0xc90 <KEYPAD_GetChar+0x21e>
					break;
				}
				case 2:
				{
					if(j==0){return '9';}
 bf8:	8b 81       	ldd	r24, Y+3	; 0x03
 bfa:	9c 81       	ldd	r25, Y+4	; 0x04
 bfc:	89 2b       	or	r24, r25
 bfe:	11 f4       	brne	.+4      	; 0xc04 <KEYPAD_GetChar+0x192>
 c00:	89 e3       	ldi	r24, 0x39	; 57
 c02:	46 c0       	rjmp	.+140    	; 0xc90 <KEYPAD_GetChar+0x21e>
					else if (j==1) {return '6';}
 c04:	8b 81       	ldd	r24, Y+3	; 0x03
 c06:	9c 81       	ldd	r25, Y+4	; 0x04
 c08:	01 97       	sbiw	r24, 0x01	; 1
 c0a:	11 f4       	brne	.+4      	; 0xc10 <KEYPAD_GetChar+0x19e>
 c0c:	86 e3       	ldi	r24, 0x36	; 54
 c0e:	40 c0       	rjmp	.+128    	; 0xc90 <KEYPAD_GetChar+0x21e>
					else if (j==2) {return '3';}
 c10:	8b 81       	ldd	r24, Y+3	; 0x03
 c12:	9c 81       	ldd	r25, Y+4	; 0x04
 c14:	02 97       	sbiw	r24, 0x02	; 2
 c16:	11 f4       	brne	.+4      	; 0xc1c <KEYPAD_GetChar+0x1aa>
 c18:	83 e3       	ldi	r24, 0x33	; 51
 c1a:	3a c0       	rjmp	.+116    	; 0xc90 <KEYPAD_GetChar+0x21e>
					else if (j==3) {return '=';}
 c1c:	8b 81       	ldd	r24, Y+3	; 0x03
 c1e:	9c 81       	ldd	r25, Y+4	; 0x04
 c20:	03 97       	sbiw	r24, 0x03	; 3
 c22:	f1 f4       	brne	.+60     	; 0xc60 <KEYPAD_GetChar+0x1ee>
 c24:	8d e3       	ldi	r24, 0x3D	; 61
 c26:	34 c0       	rjmp	.+104    	; 0xc90 <KEYPAD_GetChar+0x21e>
					break;
				}
				case 3:
				{
					if(j==0){return '/';}
 c28:	8b 81       	ldd	r24, Y+3	; 0x03
 c2a:	9c 81       	ldd	r25, Y+4	; 0x04
 c2c:	89 2b       	or	r24, r25
 c2e:	11 f4       	brne	.+4      	; 0xc34 <KEYPAD_GetChar+0x1c2>
 c30:	8f e2       	ldi	r24, 0x2F	; 47
 c32:	2e c0       	rjmp	.+92     	; 0xc90 <KEYPAD_GetChar+0x21e>
					else if (j==1) {return '*';}
 c34:	8b 81       	ldd	r24, Y+3	; 0x03
 c36:	9c 81       	ldd	r25, Y+4	; 0x04
 c38:	01 97       	sbiw	r24, 0x01	; 1
 c3a:	11 f4       	brne	.+4      	; 0xc40 <KEYPAD_GetChar+0x1ce>
 c3c:	8a e2       	ldi	r24, 0x2A	; 42
 c3e:	28 c0       	rjmp	.+80     	; 0xc90 <KEYPAD_GetChar+0x21e>
					else if (j==2) {return '-';}
 c40:	8b 81       	ldd	r24, Y+3	; 0x03
 c42:	9c 81       	ldd	r25, Y+4	; 0x04
 c44:	02 97       	sbiw	r24, 0x02	; 2
 c46:	11 f4       	brne	.+4      	; 0xc4c <KEYPAD_GetChar+0x1da>
 c48:	8d e2       	ldi	r24, 0x2D	; 45
 c4a:	22 c0       	rjmp	.+68     	; 0xc90 <KEYPAD_GetChar+0x21e>
					else if (j==3) {return '+';}
 c4c:	8b 81       	ldd	r24, Y+3	; 0x03
 c4e:	9c 81       	ldd	r25, Y+4	; 0x04
 c50:	03 97       	sbiw	r24, 0x03	; 3
 c52:	41 f4       	brne	.+16     	; 0xc64 <KEYPAD_GetChar+0x1f2>
 c54:	8b e2       	ldi	r24, 0x2B	; 43
 c56:	1c c0       	rjmp	.+56     	; 0xc90 <KEYPAD_GetChar+0x21e>
				{
					if(j==0){return '7';}
					else if (j==1) {return '4';}
					else if (j==2) {return '1';}
					else if (j==3) {return '!';}
					break;
 c58:	00 00       	nop
 c5a:	05 c0       	rjmp	.+10     	; 0xc66 <KEYPAD_GetChar+0x1f4>
				{
					if(j==0){return '8';}
					else if (j==1) {return '5';}
					else if (j==2) {return '2';}
					else if (j==3) {return '0';}
					break;
 c5c:	00 00       	nop
 c5e:	03 c0       	rjmp	.+6      	; 0xc66 <KEYPAD_GetChar+0x1f4>
				{
					if(j==0){return '9';}
					else if (j==1) {return '6';}
					else if (j==2) {return '3';}
					else if (j==3) {return '=';}
					break;
 c60:	00 00       	nop
 c62:	01 c0       	rjmp	.+2      	; 0xc66 <KEYPAD_GetChar+0x1f4>
				{
					if(j==0){return '/';}
					else if (j==1) {return '*';}
					else if (j==2) {return '-';}
					else if (j==3) {return '+';}
					break;
 c64:	00 00       	nop
		SET_BIT(KEYPAD_PORT,C0);
		SET_BIT(KEYPAD_PORT,C1);
		SET_BIT(KEYPAD_PORT,C2);
		SET_BIT(KEYPAD_PORT,C3);
		CLEAR_BIT(KEYPAD_PORT,KEYPAD_Cols[i]);
		for(j=0;j<4;j++)
 c66:	8b 81       	ldd	r24, Y+3	; 0x03
 c68:	9c 81       	ldd	r25, Y+4	; 0x04
 c6a:	01 96       	adiw	r24, 0x01	; 1
 c6c:	9c 83       	std	Y+4, r25	; 0x04
 c6e:	8b 83       	std	Y+3, r24	; 0x03
 c70:	8b 81       	ldd	r24, Y+3	; 0x03
 c72:	9c 81       	ldd	r25, Y+4	; 0x04
 c74:	04 97       	sbiw	r24, 0x04	; 4
 c76:	0c f4       	brge	.+2      	; 0xc7a <KEYPAD_GetChar+0x208>
 c78:	4a cf       	rjmp	.-364    	; 0xb0e <KEYPAD_GetChar+0x9c>
	KEYPAD_PORT = 0xFF;
}
char KEYPAD_GetChar()
{
	volatile int i ,j;
	for (i=0;i<4;i++)
 c7a:	89 81       	ldd	r24, Y+1	; 0x01
 c7c:	9a 81       	ldd	r25, Y+2	; 0x02
 c7e:	01 96       	adiw	r24, 0x01	; 1
 c80:	9a 83       	std	Y+2, r25	; 0x02
 c82:	89 83       	std	Y+1, r24	; 0x01
 c84:	89 81       	ldd	r24, Y+1	; 0x01
 c86:	9a 81       	ldd	r25, Y+2	; 0x02
 c88:	04 97       	sbiw	r24, 0x04	; 4
 c8a:	0c f4       	brge	.+2      	; 0xc8e <KEYPAD_GetChar+0x21c>
 c8c:	fb ce       	rjmp	.-522    	; 0xa84 <KEYPAD_GetChar+0x12>
				}
				}
			}
		}
	}
	return 'N';
 c8e:	8e e4       	ldi	r24, 0x4E	; 78
}
 c90:	0f 90       	pop	r0
 c92:	0f 90       	pop	r0
 c94:	0f 90       	pop	r0
 c96:	0f 90       	pop	r0
 c98:	df 91       	pop	r29
 c9a:	cf 91       	pop	r28
 c9c:	08 95       	ret

00000c9e <main>:
#include "LCD.h"
#include "keypad.h"


int main(void)
{
 c9e:	cf 93       	push	r28
 ca0:	df 93       	push	r29
 ca2:	1f 92       	push	r1
 ca4:	cd b7       	in	r28, 0x3d	; 61
 ca6:	de b7       	in	r29, 0x3e	; 62
	LCD_Init();
 ca8:	0e 94 59 02 	call	0x4b2	; 0x4b2 <LCD_Init>
	KEYPAD_Init();
 cac:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <KEYPAD_Init>
	char input;
	while(1)
	{
		input = KEYPAD_GetChar();
 cb0:	0e 94 39 05 	call	0xa72	; 0xa72 <KEYPAD_GetChar>
 cb4:	89 83       	std	Y+1, r24	; 0x01
		if(input == 'N');
 cb6:	89 81       	ldd	r24, Y+1	; 0x01
 cb8:	8e 34       	cpi	r24, 0x4E	; 78
 cba:	d1 f3       	breq	.-12     	; 0xcb0 <main+0x12>
		else if(input == '!')
 cbc:	89 81       	ldd	r24, Y+1	; 0x01
 cbe:	81 32       	cpi	r24, 0x21	; 33
 cc0:	29 f4       	brne	.+10     	; 0xccc <main+0x2e>
		{
			LCD_CLEAR();
 cc2:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_CLEAR>
			LCD_CLEAR();
 cc6:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_CLEAR>
 cca:	f2 cf       	rjmp	.-28     	; 0xcb0 <main+0x12>

		}
		else
		{
			LCD_WRITE_CHAR(input);
 ccc:	89 81       	ldd	r24, Y+1	; 0x01
 cce:	0e 94 2d 03 	call	0x65a	; 0x65a <LCD_WRITE_CHAR>
		}

	}
 cd2:	ee cf       	rjmp	.-36     	; 0xcb0 <main+0x12>

00000cd4 <__cmpsf2>:
 cd4:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__fp_cmp>
 cd8:	08 f4       	brcc	.+2      	; 0xcdc <__cmpsf2+0x8>
 cda:	81 e0       	ldi	r24, 0x01	; 1
 cdc:	08 95       	ret

00000cde <__fixunssfsi>:
 cde:	0e 94 ca 06 	call	0xd94	; 0xd94 <__fp_splitA>
 ce2:	88 f0       	brcs	.+34     	; 0xd06 <__fixunssfsi+0x28>
 ce4:	9f 57       	subi	r25, 0x7F	; 127
 ce6:	98 f0       	brcs	.+38     	; 0xd0e <__fixunssfsi+0x30>
 ce8:	b9 2f       	mov	r27, r25
 cea:	99 27       	eor	r25, r25
 cec:	b7 51       	subi	r27, 0x17	; 23
 cee:	b0 f0       	brcs	.+44     	; 0xd1c <__fixunssfsi+0x3e>
 cf0:	e1 f0       	breq	.+56     	; 0xd2a <__fixunssfsi+0x4c>
 cf2:	66 0f       	add	r22, r22
 cf4:	77 1f       	adc	r23, r23
 cf6:	88 1f       	adc	r24, r24
 cf8:	99 1f       	adc	r25, r25
 cfa:	1a f0       	brmi	.+6      	; 0xd02 <__fixunssfsi+0x24>
 cfc:	ba 95       	dec	r27
 cfe:	c9 f7       	brne	.-14     	; 0xcf2 <__fixunssfsi+0x14>
 d00:	14 c0       	rjmp	.+40     	; 0xd2a <__fixunssfsi+0x4c>
 d02:	b1 30       	cpi	r27, 0x01	; 1
 d04:	91 f0       	breq	.+36     	; 0xd2a <__fixunssfsi+0x4c>
 d06:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__fp_zero>
 d0a:	b1 e0       	ldi	r27, 0x01	; 1
 d0c:	08 95       	ret
 d0e:	0c 94 e4 06 	jmp	0xdc8	; 0xdc8 <__fp_zero>
 d12:	67 2f       	mov	r22, r23
 d14:	78 2f       	mov	r23, r24
 d16:	88 27       	eor	r24, r24
 d18:	b8 5f       	subi	r27, 0xF8	; 248
 d1a:	39 f0       	breq	.+14     	; 0xd2a <__fixunssfsi+0x4c>
 d1c:	b9 3f       	cpi	r27, 0xF9	; 249
 d1e:	cc f3       	brlt	.-14     	; 0xd12 <__fixunssfsi+0x34>
 d20:	86 95       	lsr	r24
 d22:	77 95       	ror	r23
 d24:	67 95       	ror	r22
 d26:	b3 95       	inc	r27
 d28:	d9 f7       	brne	.-10     	; 0xd20 <__fixunssfsi+0x42>
 d2a:	3e f4       	brtc	.+14     	; 0xd3a <__fixunssfsi+0x5c>
 d2c:	90 95       	com	r25
 d2e:	80 95       	com	r24
 d30:	70 95       	com	r23
 d32:	61 95       	neg	r22
 d34:	7f 4f       	sbci	r23, 0xFF	; 255
 d36:	8f 4f       	sbci	r24, 0xFF	; 255
 d38:	9f 4f       	sbci	r25, 0xFF	; 255
 d3a:	08 95       	ret

00000d3c <__fp_cmp>:
 d3c:	99 0f       	add	r25, r25
 d3e:	00 08       	sbc	r0, r0
 d40:	55 0f       	add	r21, r21
 d42:	aa 0b       	sbc	r26, r26
 d44:	e0 e8       	ldi	r30, 0x80	; 128
 d46:	fe ef       	ldi	r31, 0xFE	; 254
 d48:	16 16       	cp	r1, r22
 d4a:	17 06       	cpc	r1, r23
 d4c:	e8 07       	cpc	r30, r24
 d4e:	f9 07       	cpc	r31, r25
 d50:	c0 f0       	brcs	.+48     	; 0xd82 <__fp_cmp+0x46>
 d52:	12 16       	cp	r1, r18
 d54:	13 06       	cpc	r1, r19
 d56:	e4 07       	cpc	r30, r20
 d58:	f5 07       	cpc	r31, r21
 d5a:	98 f0       	brcs	.+38     	; 0xd82 <__fp_cmp+0x46>
 d5c:	62 1b       	sub	r22, r18
 d5e:	73 0b       	sbc	r23, r19
 d60:	84 0b       	sbc	r24, r20
 d62:	95 0b       	sbc	r25, r21
 d64:	39 f4       	brne	.+14     	; 0xd74 <__fp_cmp+0x38>
 d66:	0a 26       	eor	r0, r26
 d68:	61 f0       	breq	.+24     	; 0xd82 <__fp_cmp+0x46>
 d6a:	23 2b       	or	r18, r19
 d6c:	24 2b       	or	r18, r20
 d6e:	25 2b       	or	r18, r21
 d70:	21 f4       	brne	.+8      	; 0xd7a <__fp_cmp+0x3e>
 d72:	08 95       	ret
 d74:	0a 26       	eor	r0, r26
 d76:	09 f4       	brne	.+2      	; 0xd7a <__fp_cmp+0x3e>
 d78:	a1 40       	sbci	r26, 0x01	; 1
 d7a:	a6 95       	lsr	r26
 d7c:	8f ef       	ldi	r24, 0xFF	; 255
 d7e:	81 1d       	adc	r24, r1
 d80:	81 1d       	adc	r24, r1
 d82:	08 95       	ret

00000d84 <__fp_split3>:
 d84:	57 fd       	sbrc	r21, 7
 d86:	90 58       	subi	r25, 0x80	; 128
 d88:	44 0f       	add	r20, r20
 d8a:	55 1f       	adc	r21, r21
 d8c:	59 f0       	breq	.+22     	; 0xda4 <__fp_splitA+0x10>
 d8e:	5f 3f       	cpi	r21, 0xFF	; 255
 d90:	71 f0       	breq	.+28     	; 0xdae <__fp_splitA+0x1a>
 d92:	47 95       	ror	r20

00000d94 <__fp_splitA>:
 d94:	88 0f       	add	r24, r24
 d96:	97 fb       	bst	r25, 7
 d98:	99 1f       	adc	r25, r25
 d9a:	61 f0       	breq	.+24     	; 0xdb4 <__fp_splitA+0x20>
 d9c:	9f 3f       	cpi	r25, 0xFF	; 255
 d9e:	79 f0       	breq	.+30     	; 0xdbe <__fp_splitA+0x2a>
 da0:	87 95       	ror	r24
 da2:	08 95       	ret
 da4:	12 16       	cp	r1, r18
 da6:	13 06       	cpc	r1, r19
 da8:	14 06       	cpc	r1, r20
 daa:	55 1f       	adc	r21, r21
 dac:	f2 cf       	rjmp	.-28     	; 0xd92 <__fp_split3+0xe>
 dae:	46 95       	lsr	r20
 db0:	f1 df       	rcall	.-30     	; 0xd94 <__fp_splitA>
 db2:	08 c0       	rjmp	.+16     	; 0xdc4 <__fp_splitA+0x30>
 db4:	16 16       	cp	r1, r22
 db6:	17 06       	cpc	r1, r23
 db8:	18 06       	cpc	r1, r24
 dba:	99 1f       	adc	r25, r25
 dbc:	f1 cf       	rjmp	.-30     	; 0xda0 <__fp_splitA+0xc>
 dbe:	86 95       	lsr	r24
 dc0:	71 05       	cpc	r23, r1
 dc2:	61 05       	cpc	r22, r1
 dc4:	08 94       	sec
 dc6:	08 95       	ret

00000dc8 <__fp_zero>:
 dc8:	e8 94       	clt

00000dca <__fp_szero>:
 dca:	bb 27       	eor	r27, r27
 dcc:	66 27       	eor	r22, r22
 dce:	77 27       	eor	r23, r23
 dd0:	cb 01       	movw	r24, r22
 dd2:	97 f9       	bld	r25, 7
 dd4:	08 95       	ret

00000dd6 <__gesf2>:
 dd6:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__fp_cmp>
 dda:	08 f4       	brcc	.+2      	; 0xdde <__gesf2+0x8>
 ddc:	8f ef       	ldi	r24, 0xFF	; 255
 dde:	08 95       	ret

00000de0 <__mulsf3>:
 de0:	0e 94 03 07 	call	0xe06	; 0xe06 <__mulsf3x>
 de4:	0c 94 74 07 	jmp	0xee8	; 0xee8 <__fp_round>
 de8:	0e 94 66 07 	call	0xecc	; 0xecc <__fp_pscA>
 dec:	38 f0       	brcs	.+14     	; 0xdfc <__mulsf3+0x1c>
 dee:	0e 94 6d 07 	call	0xeda	; 0xeda <__fp_pscB>
 df2:	20 f0       	brcs	.+8      	; 0xdfc <__mulsf3+0x1c>
 df4:	95 23       	and	r25, r21
 df6:	11 f0       	breq	.+4      	; 0xdfc <__mulsf3+0x1c>
 df8:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__fp_inf>
 dfc:	0c 94 63 07 	jmp	0xec6	; 0xec6 <__fp_nan>
 e00:	11 24       	eor	r1, r1
 e02:	0c 94 e5 06 	jmp	0xdca	; 0xdca <__fp_szero>

00000e06 <__mulsf3x>:
 e06:	0e 94 c2 06 	call	0xd84	; 0xd84 <__fp_split3>
 e0a:	70 f3       	brcs	.-36     	; 0xde8 <__mulsf3+0x8>

00000e0c <__mulsf3_pse>:
 e0c:	95 9f       	mul	r25, r21
 e0e:	c1 f3       	breq	.-16     	; 0xe00 <__mulsf3+0x20>
 e10:	95 0f       	add	r25, r21
 e12:	50 e0       	ldi	r21, 0x00	; 0
 e14:	55 1f       	adc	r21, r21
 e16:	62 9f       	mul	r22, r18
 e18:	f0 01       	movw	r30, r0
 e1a:	72 9f       	mul	r23, r18
 e1c:	bb 27       	eor	r27, r27
 e1e:	f0 0d       	add	r31, r0
 e20:	b1 1d       	adc	r27, r1
 e22:	63 9f       	mul	r22, r19
 e24:	aa 27       	eor	r26, r26
 e26:	f0 0d       	add	r31, r0
 e28:	b1 1d       	adc	r27, r1
 e2a:	aa 1f       	adc	r26, r26
 e2c:	64 9f       	mul	r22, r20
 e2e:	66 27       	eor	r22, r22
 e30:	b0 0d       	add	r27, r0
 e32:	a1 1d       	adc	r26, r1
 e34:	66 1f       	adc	r22, r22
 e36:	82 9f       	mul	r24, r18
 e38:	22 27       	eor	r18, r18
 e3a:	b0 0d       	add	r27, r0
 e3c:	a1 1d       	adc	r26, r1
 e3e:	62 1f       	adc	r22, r18
 e40:	73 9f       	mul	r23, r19
 e42:	b0 0d       	add	r27, r0
 e44:	a1 1d       	adc	r26, r1
 e46:	62 1f       	adc	r22, r18
 e48:	83 9f       	mul	r24, r19
 e4a:	a0 0d       	add	r26, r0
 e4c:	61 1d       	adc	r22, r1
 e4e:	22 1f       	adc	r18, r18
 e50:	74 9f       	mul	r23, r20
 e52:	33 27       	eor	r19, r19
 e54:	a0 0d       	add	r26, r0
 e56:	61 1d       	adc	r22, r1
 e58:	23 1f       	adc	r18, r19
 e5a:	84 9f       	mul	r24, r20
 e5c:	60 0d       	add	r22, r0
 e5e:	21 1d       	adc	r18, r1
 e60:	82 2f       	mov	r24, r18
 e62:	76 2f       	mov	r23, r22
 e64:	6a 2f       	mov	r22, r26
 e66:	11 24       	eor	r1, r1
 e68:	9f 57       	subi	r25, 0x7F	; 127
 e6a:	50 40       	sbci	r21, 0x00	; 0
 e6c:	9a f0       	brmi	.+38     	; 0xe94 <__mulsf3_pse+0x88>
 e6e:	f1 f0       	breq	.+60     	; 0xeac <__mulsf3_pse+0xa0>
 e70:	88 23       	and	r24, r24
 e72:	4a f0       	brmi	.+18     	; 0xe86 <__mulsf3_pse+0x7a>
 e74:	ee 0f       	add	r30, r30
 e76:	ff 1f       	adc	r31, r31
 e78:	bb 1f       	adc	r27, r27
 e7a:	66 1f       	adc	r22, r22
 e7c:	77 1f       	adc	r23, r23
 e7e:	88 1f       	adc	r24, r24
 e80:	91 50       	subi	r25, 0x01	; 1
 e82:	50 40       	sbci	r21, 0x00	; 0
 e84:	a9 f7       	brne	.-22     	; 0xe70 <__mulsf3_pse+0x64>
 e86:	9e 3f       	cpi	r25, 0xFE	; 254
 e88:	51 05       	cpc	r21, r1
 e8a:	80 f0       	brcs	.+32     	; 0xeac <__mulsf3_pse+0xa0>
 e8c:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__fp_inf>
 e90:	0c 94 e5 06 	jmp	0xdca	; 0xdca <__fp_szero>
 e94:	5f 3f       	cpi	r21, 0xFF	; 255
 e96:	e4 f3       	brlt	.-8      	; 0xe90 <__mulsf3_pse+0x84>
 e98:	98 3e       	cpi	r25, 0xE8	; 232
 e9a:	d4 f3       	brlt	.-12     	; 0xe90 <__mulsf3_pse+0x84>
 e9c:	86 95       	lsr	r24
 e9e:	77 95       	ror	r23
 ea0:	67 95       	ror	r22
 ea2:	b7 95       	ror	r27
 ea4:	f7 95       	ror	r31
 ea6:	e7 95       	ror	r30
 ea8:	9f 5f       	subi	r25, 0xFF	; 255
 eaa:	c1 f7       	brne	.-16     	; 0xe9c <__mulsf3_pse+0x90>
 eac:	fe 2b       	or	r31, r30
 eae:	88 0f       	add	r24, r24
 eb0:	91 1d       	adc	r25, r1
 eb2:	96 95       	lsr	r25
 eb4:	87 95       	ror	r24
 eb6:	97 f9       	bld	r25, 7
 eb8:	08 95       	ret

00000eba <__fp_inf>:
 eba:	97 f9       	bld	r25, 7
 ebc:	9f 67       	ori	r25, 0x7F	; 127
 ebe:	80 e8       	ldi	r24, 0x80	; 128
 ec0:	70 e0       	ldi	r23, 0x00	; 0
 ec2:	60 e0       	ldi	r22, 0x00	; 0
 ec4:	08 95       	ret

00000ec6 <__fp_nan>:
 ec6:	9f ef       	ldi	r25, 0xFF	; 255
 ec8:	80 ec       	ldi	r24, 0xC0	; 192
 eca:	08 95       	ret

00000ecc <__fp_pscA>:
 ecc:	00 24       	eor	r0, r0
 ece:	0a 94       	dec	r0
 ed0:	16 16       	cp	r1, r22
 ed2:	17 06       	cpc	r1, r23
 ed4:	18 06       	cpc	r1, r24
 ed6:	09 06       	cpc	r0, r25
 ed8:	08 95       	ret

00000eda <__fp_pscB>:
 eda:	00 24       	eor	r0, r0
 edc:	0a 94       	dec	r0
 ede:	12 16       	cp	r1, r18
 ee0:	13 06       	cpc	r1, r19
 ee2:	14 06       	cpc	r1, r20
 ee4:	05 06       	cpc	r0, r21
 ee6:	08 95       	ret

00000ee8 <__fp_round>:
 ee8:	09 2e       	mov	r0, r25
 eea:	03 94       	inc	r0
 eec:	00 0c       	add	r0, r0
 eee:	11 f4       	brne	.+4      	; 0xef4 <__fp_round+0xc>
 ef0:	88 23       	and	r24, r24
 ef2:	52 f0       	brmi	.+20     	; 0xf08 <__fp_round+0x20>
 ef4:	bb 0f       	add	r27, r27
 ef6:	40 f4       	brcc	.+16     	; 0xf08 <__fp_round+0x20>
 ef8:	bf 2b       	or	r27, r31
 efa:	11 f4       	brne	.+4      	; 0xf00 <__fp_round+0x18>
 efc:	60 ff       	sbrs	r22, 0
 efe:	04 c0       	rjmp	.+8      	; 0xf08 <__fp_round+0x20>
 f00:	6f 5f       	subi	r22, 0xFF	; 255
 f02:	7f 4f       	sbci	r23, 0xFF	; 255
 f04:	8f 4f       	sbci	r24, 0xFF	; 255
 f06:	9f 4f       	sbci	r25, 0xFF	; 255
 f08:	08 95       	ret

00000f0a <_exit>:
 f0a:	f8 94       	cli

00000f0c <__stop_program>:
 f0c:	ff cf       	rjmp	.-2      	; 0xf0c <__stop_program>
