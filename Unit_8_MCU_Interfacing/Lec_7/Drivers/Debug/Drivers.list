
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ef0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001020  08001020  00011020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001040  08001040  00011048  2**0
                  CONTENTS
  4 .ARM          00000000  08001040  08001040  00011048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001040  08001048  00011048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001040  08001040  00011040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001044  08001044  00011044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000000  08001048  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08001048  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d04  00000000  00000000  00011071  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010dd  00000000  00000000  00017d75  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001356  00000000  00000000  00018e52  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002f0  00000000  00000000  0001a1a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000268  00000000  00000000  0001a498  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002dd6  00000000  00000000  0001a700  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003612  00000000  00000000  0001d4d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000c38a  00000000  00000000  00020ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002ce72  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000009c4  00000000  00000000  0002cef0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001008 	.word	0x08001008

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001008 	.word	0x08001008

08000170 <HAL_EEPROM_Init>:




void HAL_EEPROM_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b08a      	sub	sp, #40	; 0x28
 8000174:	af00      	add	r7, sp, #0
	//PB6 : SCL
	//PB7 : SDA

	I2C_Config_t I2C_Config;

	I2C_Config.General_Call = I2C_General_Call_Enabled;
 8000176:	2340      	movs	r3, #64	; 0x40
 8000178:	617b      	str	r3, [r7, #20]
	I2C_Config.ACK_Control = I2C_ACK_Enable;
 800017a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017e:	613b      	str	r3, [r7, #16]
	I2C_Config.I2C_ClockSpeed = I2C_SCLK_SM_100KHz;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <HAL_EEPROM_Init+0x38>)
 8000182:	607b      	str	r3, [r7, #4]
	I2C_Config.I2C_Mode = I2C_Mode_I2C;
 8000184:	2300      	movs	r3, #0
 8000186:	60bb      	str	r3, [r7, #8]
	I2C_Config.Ptr_Slave_EV_IRQ_CallBack = NULL;
 8000188:	2300      	movs	r3, #0
 800018a:	627b      	str	r3, [r7, #36]	; 0x24
	I2C_Config.Stretch_Mode = I2C_Stretch_Mode_Enable;
 800018c:	2300      	movs	r3, #0
 800018e:	60fb      	str	r3, [r7, #12]

	MCAL_I2C_GPIO_Set_Pins(I2C1);
 8000190:	4806      	ldr	r0, [pc, #24]	; (80001ac <HAL_EEPROM_Init+0x3c>)
 8000192:	f000 fba1 	bl	80008d8 <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &I2C_Config);
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	4619      	mov	r1, r3
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <HAL_EEPROM_Init+0x3c>)
 800019c:	f000 fa8c 	bl	80006b8 <MCAL_I2C_Init>




}
 80001a0:	bf00      	nop
 80001a2:	3728      	adds	r7, #40	; 0x28
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	000186a0 	.word	0x000186a0
 80001ac:	40005400 	.word	0x40005400

080001b0 <HAL_EEPROM_Write_NBytes>:


uint8_t HAL_EEPROM_Write_NBytes (uint32_t Memory_Address , uint8_t* Bytes , uint8_t Data_Length)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b0ca      	sub	sp, #296	; 0x128
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	f107 030c 	add.w	r3, r7, #12
 80001ba:	6018      	str	r0, [r3, #0]
 80001bc:	f107 0308 	add.w	r3, r7, #8
 80001c0:	6019      	str	r1, [r3, #0]
 80001c2:	1dfb      	adds	r3, r7, #7
 80001c4:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint8_t Buffer[265];
	Buffer[0]= (uint8_t)(Memory_Address>>8);	//Upper Bytes Memory Address
 80001c6:	f107 030c 	add.w	r3, r7, #12
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	0a1b      	lsrs	r3, r3, #8
 80001ce:	b2da      	uxtb	r2, r3
 80001d0:	f107 0314 	add.w	r3, r7, #20
 80001d4:	701a      	strb	r2, [r3, #0]
	Buffer[1]= (uint8_t)(Memory_Address);		//Lower Bytes Memory Address
 80001d6:	f107 030c 	add.w	r3, r7, #12
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	b2da      	uxtb	r2, r3
 80001de:	f107 0314 	add.w	r3, r7, #20
 80001e2:	705a      	strb	r2, [r3, #1]

	for(i=2;i<(Data_Length+2);i++)
 80001e4:	2302      	movs	r3, #2
 80001e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 80001ea:	e011      	b.n	8000210 <HAL_EEPROM_Write_NBytes+0x60>
	{
		Buffer[i]= Bytes[i-2];
 80001ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80001f0:	3b02      	subs	r3, #2
 80001f2:	f107 0208 	add.w	r2, r7, #8
 80001f6:	6812      	ldr	r2, [r2, #0]
 80001f8:	441a      	add	r2, r3
 80001fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80001fe:	7811      	ldrb	r1, [r2, #0]
 8000200:	f107 0214 	add.w	r2, r7, #20
 8000204:	54d1      	strb	r1, [r2, r3]
	for(i=2;i<(Data_Length+2);i++)
 8000206:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800020a:	3301      	adds	r3, #1
 800020c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8000210:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8000214:	1dfb      	adds	r3, r7, #7
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	3302      	adds	r3, #2
 800021a:	429a      	cmp	r2, r3
 800021c:	dbe6      	blt.n	80001ec <HAL_EEPROM_Write_NBytes+0x3c>
	}

	MCAL_I2C_MASTER_TX(I2C1, EEPROM_SLAVE_ADDRESS, Buffer, (Data_Length+2), withSTOP, No_Repeated_Start);
 800021e:	1dfb      	adds	r3, r7, #7
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	3302      	adds	r3, #2
 8000224:	4619      	mov	r1, r3
 8000226:	f107 0214 	add.w	r2, r7, #20
 800022a:	2301      	movs	r3, #1
 800022c:	9301      	str	r3, [sp, #4]
 800022e:	2300      	movs	r3, #0
 8000230:	9300      	str	r3, [sp, #0]
 8000232:	460b      	mov	r3, r1
 8000234:	212a      	movs	r1, #42	; 0x2a
 8000236:	4804      	ldr	r0, [pc, #16]	; (8000248 <HAL_EEPROM_Write_NBytes+0x98>)
 8000238:	f000 fb98 	bl	800096c <MCAL_I2C_MASTER_TX>

	return 0;
 800023c:	2300      	movs	r3, #0
}
 800023e:	4618      	mov	r0, r3
 8000240:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	40005400 	.word	0x40005400

0800024c <HAL_EEPROM_Read_NBytes>:
uint8_t HAL_EEPROM_Read_NBytes (uint32_t Memory_Address , uint8_t* Bytes , uint8_t Data_Length)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b088      	sub	sp, #32
 8000250:	af02      	add	r7, sp, #8
 8000252:	60f8      	str	r0, [r7, #12]
 8000254:	60b9      	str	r1, [r7, #8]
 8000256:	4613      	mov	r3, r2
 8000258:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[2];
	Buffer[0]= (uint8_t)(Memory_Address>>8);	//Upper Bytes Memory Address
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	0a1b      	lsrs	r3, r3, #8
 800025e:	b2db      	uxtb	r3, r3
 8000260:	753b      	strb	r3, [r7, #20]
	Buffer[1]= (uint8_t)(Memory_Address);		//Lower Bytes Memory Address
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	b2db      	uxtb	r3, r3
 8000266:	757b      	strb	r3, [r7, #21]

	MCAL_I2C_MASTER_TX(I2C1, EEPROM_SLAVE_ADDRESS, Buffer, 2, withoutSTOP, No_Repeated_Start); //Write Address
 8000268:	f107 0214 	add.w	r2, r7, #20
 800026c:	2301      	movs	r3, #1
 800026e:	9301      	str	r3, [sp, #4]
 8000270:	2301      	movs	r3, #1
 8000272:	9300      	str	r3, [sp, #0]
 8000274:	2302      	movs	r3, #2
 8000276:	212a      	movs	r1, #42	; 0x2a
 8000278:	4809      	ldr	r0, [pc, #36]	; (80002a0 <HAL_EEPROM_Read_NBytes+0x54>)
 800027a:	f000 fb77 	bl	800096c <MCAL_I2C_MASTER_TX>

	MCAL_I2C_MASTER_RX(I2C1, EEPROM_SLAVE_ADDRESS, Bytes, Data_Length, withSTOP, Repeated_Start);	//Read Data
 800027e:	79fa      	ldrb	r2, [r7, #7]
 8000280:	2300      	movs	r3, #0
 8000282:	9301      	str	r3, [sp, #4]
 8000284:	2300      	movs	r3, #0
 8000286:	9300      	str	r3, [sp, #0]
 8000288:	4613      	mov	r3, r2
 800028a:	68ba      	ldr	r2, [r7, #8]
 800028c:	212a      	movs	r1, #42	; 0x2a
 800028e:	4804      	ldr	r0, [pc, #16]	; (80002a0 <HAL_EEPROM_Read_NBytes+0x54>)
 8000290:	f000 fbc0 	bl	8000a14 <MCAL_I2C_MASTER_RX>

	return 0;
 8000294:	2300      	movs	r3, #0
}
 8000296:	4618      	mov	r0, r3
 8000298:	3718      	adds	r7, #24
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40005400 	.word	0x40005400

080002a4 <EXTI0_IRQHandler>:
//			External Interrupt Routines
//========================================================


void EXTI0_IRQHandler (void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	//Clear EXTI PR
	EXTI->PR |= 1<<0;
 80002a8:	4b05      	ldr	r3, [pc, #20]	; (80002c0 <EXTI0_IRQHandler+0x1c>)
 80002aa:	695b      	ldr	r3, [r3, #20]
 80002ac:	4a04      	ldr	r2, [pc, #16]	; (80002c0 <EXTI0_IRQHandler+0x1c>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CALLBACK[0]();
 80002b4:	4b03      	ldr	r3, [pc, #12]	; (80002c4 <EXTI0_IRQHandler+0x20>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4798      	blx	r3
}
 80002ba:	bf00      	nop
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	40010400 	.word	0x40010400
 80002c4:	2000006c 	.word	0x2000006c

080002c8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	//Clear EXTI PR
	EXTI->PR |= 1<<1;
 80002cc:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <EXTI1_IRQHandler+0x1c>)
 80002ce:	695b      	ldr	r3, [r3, #20]
 80002d0:	4a04      	ldr	r2, [pc, #16]	; (80002e4 <EXTI1_IRQHandler+0x1c>)
 80002d2:	f043 0302 	orr.w	r3, r3, #2
 80002d6:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CALLBACK[1]();
 80002d8:	4b03      	ldr	r3, [pc, #12]	; (80002e8 <EXTI1_IRQHandler+0x20>)
 80002da:	685b      	ldr	r3, [r3, #4]
 80002dc:	4798      	blx	r3
}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40010400 	.word	0x40010400
 80002e8:	2000006c 	.word	0x2000006c

080002ec <EXTI2_IRQHandler>:

void EXTI2_IRQHandler (void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	//Clear EXTI PR
	EXTI->PR |= 1<<2;
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <EXTI2_IRQHandler+0x1c>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	4a04      	ldr	r2, [pc, #16]	; (8000308 <EXTI2_IRQHandler+0x1c>)
 80002f6:	f043 0304 	orr.w	r3, r3, #4
 80002fa:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CALLBACK[2]();
 80002fc:	4b03      	ldr	r3, [pc, #12]	; (800030c <EXTI2_IRQHandler+0x20>)
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	4798      	blx	r3
}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	40010400 	.word	0x40010400
 800030c:	2000006c 	.word	0x2000006c

08000310 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler (void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	//Clear EXTI PR
	EXTI->PR |= 1<<3;
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <EXTI3_IRQHandler+0x1c>)
 8000316:	695b      	ldr	r3, [r3, #20]
 8000318:	4a04      	ldr	r2, [pc, #16]	; (800032c <EXTI3_IRQHandler+0x1c>)
 800031a:	f043 0308 	orr.w	r3, r3, #8
 800031e:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CALLBACK[3]();
 8000320:	4b03      	ldr	r3, [pc, #12]	; (8000330 <EXTI3_IRQHandler+0x20>)
 8000322:	68db      	ldr	r3, [r3, #12]
 8000324:	4798      	blx	r3
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40010400 	.word	0x40010400
 8000330:	2000006c 	.word	0x2000006c

08000334 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler (void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	//Clear EXTI PR
	EXTI->PR |= 1<<4;
 8000338:	4b05      	ldr	r3, [pc, #20]	; (8000350 <EXTI4_IRQHandler+0x1c>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	4a04      	ldr	r2, [pc, #16]	; (8000350 <EXTI4_IRQHandler+0x1c>)
 800033e:	f043 0310 	orr.w	r3, r3, #16
 8000342:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CALLBACK[4]();
 8000344:	4b03      	ldr	r3, [pc, #12]	; (8000354 <EXTI4_IRQHandler+0x20>)
 8000346:	691b      	ldr	r3, [r3, #16]
 8000348:	4798      	blx	r3
}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40010400 	.word	0x40010400
 8000354:	2000006c 	.word	0x2000006c

08000358 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler (void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 <<5)
 800035c:	4b26      	ldr	r3, [pc, #152]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	f003 0320 	and.w	r3, r3, #32
 8000364:	2b00      	cmp	r3, #0
 8000366:	d008      	beq.n	800037a <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= 1<<5;
 8000368:	4b23      	ldr	r3, [pc, #140]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	4a22      	ldr	r2, [pc, #136]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800036e:	f043 0320 	orr.w	r3, r3, #32
 8000372:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[5]();
 8000374:	4b21      	ldr	r3, [pc, #132]	; (80003fc <EXTI9_5_IRQHandler+0xa4>)
 8000376:	695b      	ldr	r3, [r3, #20]
 8000378:	4798      	blx	r3
	}
	if(EXTI->PR & 1 <<6)
 800037a:	4b1f      	ldr	r3, [pc, #124]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000382:	2b00      	cmp	r3, #0
 8000384:	d008      	beq.n	8000398 <EXTI9_5_IRQHandler+0x40>
	{
		EXTI->PR |= 1<<6;
 8000386:	4b1c      	ldr	r3, [pc, #112]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a1b      	ldr	r2, [pc, #108]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800038c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000390:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[6]();
 8000392:	4b1a      	ldr	r3, [pc, #104]	; (80003fc <EXTI9_5_IRQHandler+0xa4>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	4798      	blx	r3
	}
	if(EXTI->PR & 1 <<7)
 8000398:	4b17      	ldr	r3, [pc, #92]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d008      	beq.n	80003b6 <EXTI9_5_IRQHandler+0x5e>
	{
		EXTI->PR |= 1<<7;
 80003a4:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	4a13      	ldr	r2, [pc, #76]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ae:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[7]();
 80003b0:	4b12      	ldr	r3, [pc, #72]	; (80003fc <EXTI9_5_IRQHandler+0xa4>)
 80003b2:	69db      	ldr	r3, [r3, #28]
 80003b4:	4798      	blx	r3
	}
	if(EXTI->PR & 1 <<8)
 80003b6:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d008      	beq.n	80003d4 <EXTI9_5_IRQHandler+0x7c>
	{
		EXTI->PR |= 1<<8;
 80003c2:	4b0d      	ldr	r3, [pc, #52]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a0c      	ldr	r2, [pc, #48]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003cc:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[8]();
 80003ce:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <EXTI9_5_IRQHandler+0xa4>)
 80003d0:	6a1b      	ldr	r3, [r3, #32]
 80003d2:	4798      	blx	r3
	}
	if(EXTI->PR & 1 <<9)
 80003d4:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d008      	beq.n	80003f2 <EXTI9_5_IRQHandler+0x9a>
	{
		EXTI->PR |= 1<<9;
 80003e0:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	4a04      	ldr	r2, [pc, #16]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003ea:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[9]();
 80003ec:	4b03      	ldr	r3, [pc, #12]	; (80003fc <EXTI9_5_IRQHandler+0xa4>)
 80003ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f0:	4798      	blx	r3
	}

}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40010400 	.word	0x40010400
 80003fc:	2000006c 	.word	0x2000006c

08000400 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler (void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 <<10)
 8000404:	4b2d      	ldr	r3, [pc, #180]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000406:	695b      	ldr	r3, [r3, #20]
 8000408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800040c:	2b00      	cmp	r3, #0
 800040e:	d008      	beq.n	8000422 <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= 1<<10;
 8000410:	4b2a      	ldr	r3, [pc, #168]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000412:	695b      	ldr	r3, [r3, #20]
 8000414:	4a29      	ldr	r2, [pc, #164]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000416:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800041a:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[10]();
 800041c:	4b28      	ldr	r3, [pc, #160]	; (80004c0 <EXTI15_10_IRQHandler+0xc0>)
 800041e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000420:	4798      	blx	r3
	}
	if(EXTI->PR & 1 <<11)
 8000422:	4b26      	ldr	r3, [pc, #152]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800042a:	2b00      	cmp	r3, #0
 800042c:	d008      	beq.n	8000440 <EXTI15_10_IRQHandler+0x40>
	{
		EXTI->PR |= 1<<11;
 800042e:	4b23      	ldr	r3, [pc, #140]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a22      	ldr	r2, [pc, #136]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000434:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000438:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[11]();
 800043a:	4b21      	ldr	r3, [pc, #132]	; (80004c0 <EXTI15_10_IRQHandler+0xc0>)
 800043c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800043e:	4798      	blx	r3
	}
	if(EXTI->PR & 1 <<12)
 8000440:	4b1e      	ldr	r3, [pc, #120]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000442:	695b      	ldr	r3, [r3, #20]
 8000444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000448:	2b00      	cmp	r3, #0
 800044a:	d008      	beq.n	800045e <EXTI15_10_IRQHandler+0x5e>
	{
		EXTI->PR |= 1<<12;
 800044c:	4b1b      	ldr	r3, [pc, #108]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	4a1a      	ldr	r2, [pc, #104]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000452:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000456:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[12]();
 8000458:	4b19      	ldr	r3, [pc, #100]	; (80004c0 <EXTI15_10_IRQHandler+0xc0>)
 800045a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045c:	4798      	blx	r3
	}
	if(EXTI->PR & 1 <<13)
 800045e:	4b17      	ldr	r3, [pc, #92]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000466:	2b00      	cmp	r3, #0
 8000468:	d008      	beq.n	800047c <EXTI15_10_IRQHandler+0x7c>
	{
		EXTI->PR |= 1<<13;
 800046a:	4b14      	ldr	r3, [pc, #80]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	4a13      	ldr	r2, [pc, #76]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000470:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000474:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[13]();
 8000476:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <EXTI15_10_IRQHandler+0xc0>)
 8000478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800047a:	4798      	blx	r3
	}
	if(EXTI->PR & 1 <<14)
 800047c:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 800047e:	695b      	ldr	r3, [r3, #20]
 8000480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000484:	2b00      	cmp	r3, #0
 8000486:	d008      	beq.n	800049a <EXTI15_10_IRQHandler+0x9a>
	{
		EXTI->PR |= 1<<14;
 8000488:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 800048a:	695b      	ldr	r3, [r3, #20]
 800048c:	4a0b      	ldr	r2, [pc, #44]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 800048e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000492:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[14]();
 8000494:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <EXTI15_10_IRQHandler+0xc0>)
 8000496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000498:	4798      	blx	r3
	}
	if(EXTI->PR & 1 <<15)
 800049a:	4b08      	ldr	r3, [pc, #32]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d008      	beq.n	80004b8 <EXTI15_10_IRQHandler+0xb8>
	{
		EXTI->PR |= 1<<15;
 80004a6:	4b05      	ldr	r3, [pc, #20]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a04      	ldr	r2, [pc, #16]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 80004ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004b0:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[15]();
 80004b2:	4b03      	ldr	r3, [pc, #12]	; (80004c0 <EXTI15_10_IRQHandler+0xc0>)
 80004b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004b6:	4798      	blx	r3
	}

}
 80004b8:	bf00      	nop
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40010400 	.word	0x40010400
 80004c0:	2000006c 	.word	0x2000006c

080004c4 <Get_CRL_CRH_Position>:
 * @retval 		-The bit position
 * Note 		-None
 */

uint8_t Get_CRL_CRH_Position (uint16_t PinNumber)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 80004ce:	88fb      	ldrh	r3, [r7, #6]
 80004d0:	2b80      	cmp	r3, #128	; 0x80
 80004d2:	d042      	beq.n	800055a <Get_CRL_CRH_Position+0x96>
 80004d4:	2b80      	cmp	r3, #128	; 0x80
 80004d6:	dc11      	bgt.n	80004fc <Get_CRL_CRH_Position+0x38>
 80004d8:	2b08      	cmp	r3, #8
 80004da:	d036      	beq.n	800054a <Get_CRL_CRH_Position+0x86>
 80004dc:	2b08      	cmp	r3, #8
 80004de:	dc06      	bgt.n	80004ee <Get_CRL_CRH_Position+0x2a>
 80004e0:	2b02      	cmp	r3, #2
 80004e2:	d02e      	beq.n	8000542 <Get_CRL_CRH_Position+0x7e>
 80004e4:	2b04      	cmp	r3, #4
 80004e6:	d02e      	beq.n	8000546 <Get_CRL_CRH_Position+0x82>
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d028      	beq.n	800053e <Get_CRL_CRH_Position+0x7a>
 80004ec:	e047      	b.n	800057e <Get_CRL_CRH_Position+0xba>
 80004ee:	2b20      	cmp	r3, #32
 80004f0:	d02f      	beq.n	8000552 <Get_CRL_CRH_Position+0x8e>
 80004f2:	2b40      	cmp	r3, #64	; 0x40
 80004f4:	d02f      	beq.n	8000556 <Get_CRL_CRH_Position+0x92>
 80004f6:	2b10      	cmp	r3, #16
 80004f8:	d029      	beq.n	800054e <Get_CRL_CRH_Position+0x8a>
 80004fa:	e040      	b.n	800057e <Get_CRL_CRH_Position+0xba>
 80004fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000500:	d033      	beq.n	800056a <Get_CRL_CRH_Position+0xa6>
 8000502:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000506:	dc09      	bgt.n	800051c <Get_CRL_CRH_Position+0x58>
 8000508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800050c:	d029      	beq.n	8000562 <Get_CRL_CRH_Position+0x9e>
 800050e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000512:	d028      	beq.n	8000566 <Get_CRL_CRH_Position+0xa2>
 8000514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000518:	d021      	beq.n	800055e <Get_CRL_CRH_Position+0x9a>
 800051a:	e030      	b.n	800057e <Get_CRL_CRH_Position+0xba>
 800051c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000520:	d027      	beq.n	8000572 <Get_CRL_CRH_Position+0xae>
 8000522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000526:	dc03      	bgt.n	8000530 <Get_CRL_CRH_Position+0x6c>
 8000528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800052c:	d01f      	beq.n	800056e <Get_CRL_CRH_Position+0xaa>
 800052e:	e026      	b.n	800057e <Get_CRL_CRH_Position+0xba>
 8000530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000534:	d01f      	beq.n	8000576 <Get_CRL_CRH_Position+0xb2>
 8000536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800053a:	d01e      	beq.n	800057a <Get_CRL_CRH_Position+0xb6>
 800053c:	e01f      	b.n	800057e <Get_CRL_CRH_Position+0xba>
	{
	//CRL
	case GPIO_PIN_0:
		return 0; break;
 800053e:	2300      	movs	r3, #0
 8000540:	e01e      	b.n	8000580 <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_1:
			return 4; break;
 8000542:	2304      	movs	r3, #4
 8000544:	e01c      	b.n	8000580 <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_2:
			return 8; break;
 8000546:	2308      	movs	r3, #8
 8000548:	e01a      	b.n	8000580 <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_3:
			return 12; break;
 800054a:	230c      	movs	r3, #12
 800054c:	e018      	b.n	8000580 <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_4:
			return 16; break;
 800054e:	2310      	movs	r3, #16
 8000550:	e016      	b.n	8000580 <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_5:
			return 20; break;
 8000552:	2314      	movs	r3, #20
 8000554:	e014      	b.n	8000580 <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_6:
			return 24; break;
 8000556:	2318      	movs	r3, #24
 8000558:	e012      	b.n	8000580 <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_7:
			return 28; break;
 800055a:	231c      	movs	r3, #28
 800055c:	e010      	b.n	8000580 <Get_CRL_CRH_Position+0xbc>
	//CRH
	case GPIO_PIN_8:
		return 0; break;
 800055e:	2300      	movs	r3, #0
 8000560:	e00e      	b.n	8000580 <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_9:
			return 4; break;
 8000562:	2304      	movs	r3, #4
 8000564:	e00c      	b.n	8000580 <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_10:
			return 8; break;
 8000566:	2308      	movs	r3, #8
 8000568:	e00a      	b.n	8000580 <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_11:
			return 12; break;
 800056a:	230c      	movs	r3, #12
 800056c:	e008      	b.n	8000580 <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_12:
			return 16; break;
 800056e:	2310      	movs	r3, #16
 8000570:	e006      	b.n	8000580 <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_13:
			return 20; break;
 8000572:	2314      	movs	r3, #20
 8000574:	e004      	b.n	8000580 <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_14:
			return 24; break;
 8000576:	2318      	movs	r3, #24
 8000578:	e002      	b.n	8000580 <Get_CRL_CRH_Position+0xbc>
	case GPIO_PIN_15:
			return 28; break;
 800057a:	231c      	movs	r3, #28
 800057c:	e000      	b.n	8000580 <Get_CRL_CRH_Position+0xbc>
	}
	return 0;
 800057e:	2300      	movs	r3, #0
}
 8000580:	4618      	mov	r0, r3
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr

0800058a <MCAL_GPIO_Init>:
 * @retval 		-None
 * Note 		-STM32F103C6 MCU has GPIO A,B,C,D,E
 * 				 but LQFP48 Package has A,B ,Part of C&D and no E
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t* PinConfig )
{
 800058a:	b590      	push	{r4, r7, lr}
 800058c:	b085      	sub	sp, #20
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
 8000592:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configures Pins from 0->7
	//Port configuration register high (GPIOx_CRH) Configures Pins from 8->15
	volatile uint32_t* configReg = NULL;
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
	volatile uint8_t CNFx_MODEx = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	72fb      	strb	r3, [r7, #11]
	//to configure CRL or CRH , check the pin number and work accordingly
	configReg = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	2bff      	cmp	r3, #255	; 0xff
 80005a2:	d801      	bhi.n	80005a8 <MCAL_GPIO_Init+0x1e>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	e001      	b.n	80005ac <MCAL_GPIO_Init+0x22>
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	3304      	adds	r3, #4
 80005ac:	60fb      	str	r3, [r7, #12]

	//Clear CNFx[1:0] & MODEx[1:0]
	(*configReg) &= ~(0xF << Get_CRL_CRH_Position(PinConfig->GPIO_PinNumber));
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff ff86 	bl	80004c4 <Get_CRL_CRH_Position>
 80005b8:	4603      	mov	r3, r0
 80005ba:	461a      	mov	r2, r3
 80005bc:	230f      	movs	r3, #15
 80005be:	4093      	lsls	r3, r2
 80005c0:	43da      	mvns	r2, r3
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	401a      	ands	r2, r3
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	601a      	str	r2, [r3, #0]

	//if the Pin is set as Output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)|(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)|(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)|(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	789b      	ldrb	r3, [r3, #2]
 80005d0:	2b07      	cmp	r3, #7
 80005d2:	bf0c      	ite	eq
 80005d4:	2301      	moveq	r3, #1
 80005d6:	2300      	movne	r3, #0
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	789b      	ldrb	r3, [r3, #2]
 80005de:	2b06      	cmp	r3, #6
 80005e0:	bf0c      	ite	eq
 80005e2:	2301      	moveq	r3, #1
 80005e4:	2300      	movne	r3, #0
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	4313      	orrs	r3, r2
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	461a      	mov	r2, r3
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	789b      	ldrb	r3, [r3, #2]
 80005f2:	2b05      	cmp	r3, #5
 80005f4:	bf0c      	ite	eq
 80005f6:	2301      	moveq	r3, #1
 80005f8:	2300      	movne	r3, #0
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	4313      	orrs	r3, r2
 80005fe:	683a      	ldr	r2, [r7, #0]
 8000600:	7892      	ldrb	r2, [r2, #2]
 8000602:	2a04      	cmp	r2, #4
 8000604:	bf0c      	ite	eq
 8000606:	2201      	moveq	r2, #1
 8000608:	2200      	movne	r2, #0
 800060a:	b2d2      	uxtb	r2, r2
 800060c:	4313      	orrs	r3, r2
 800060e:	2b00      	cmp	r3, #0
 8000610:	d00f      	beq.n	8000632 <MCAL_GPIO_Init+0xa8>
	{
		// Set CNFx[1:0] & MODE[1:0]
		CNFx_MODEx = (((PinConfig->GPIO_MODE - 4)<<2)| (PinConfig->GPIO_Output_Speed)) & 0x0F;
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	789b      	ldrb	r3, [r3, #2]
 8000616:	3b04      	subs	r3, #4
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	b25a      	sxtb	r2, r3
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	78db      	ldrb	r3, [r3, #3]
 8000620:	b25b      	sxtb	r3, r3
 8000622:	4313      	orrs	r3, r2
 8000624:	b25b      	sxtb	r3, r3
 8000626:	b2db      	uxtb	r3, r3
 8000628:	f003 030f 	and.w	r3, r3, #15
 800062c:	b2db      	uxtb	r3, r3
 800062e:	72fb      	strb	r3, [r7, #11]
 8000630:	e02d      	b.n	800068e <MCAL_GPIO_Init+0x104>
	}

	//if the Pin is set as Input , in that case MODE == 00 by default
	else
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG))
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	789b      	ldrb	r3, [r3, #2]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d003      	beq.n	8000642 <MCAL_GPIO_Init+0xb8>
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	789b      	ldrb	r3, [r3, #2]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d108      	bne.n	8000654 <MCAL_GPIO_Init+0xca>
		{
			// Set CNFx[1:0] & MODEx[1:0] = 0x00
			CNFx_MODEx = ((( (PinConfig->GPIO_MODE)<<2) | 0x0   ) & 0x0F);
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	789b      	ldrb	r3, [r3, #2]
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	b2db      	uxtb	r3, r3
 800064a:	f003 030f 	and.w	r3, r3, #15
 800064e:	b2db      	uxtb	r3, r3
 8000650:	72fb      	strb	r3, [r7, #11]
 8000652:	e01c      	b.n	800068e <MCAL_GPIO_Init+0x104>
		}
		//Alternative function input is the same as input floating Based on the TRM definition
		else if ((PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT))
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	789b      	ldrb	r3, [r3, #2]
 8000658:	2b08      	cmp	r3, #8
 800065a:	d102      	bne.n	8000662 <MCAL_GPIO_Init+0xd8>
		{
			// Set CNFx[1:0] & MODEx[1:0] = 0x00
			CNFx_MODEx = ((( (GPIO_MODE_INPUT_FLO)<<2) | 0x0   ) & 0x0F);
 800065c:	2304      	movs	r3, #4
 800065e:	72fb      	strb	r3, [r7, #11]
 8000660:	e015      	b.n	800068e <MCAL_GPIO_Init+0x104>
		}
		else 		//This means it's either Pull-Up Input or Pull-Down Input
		{
			// Set CNFx[1:0] & MODEx[1:0] = 0x00
			// 10: Input with pull-up / pull-down
			CNFx_MODEx = ((( (GPIO_MODE_INPUT_PU)<<2) | 0x0   ) & 0x0F);
 8000662:	2308      	movs	r3, #8
 8000664:	72fb      	strb	r3, [r7, #11]
			if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU))
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	789b      	ldrb	r3, [r3, #2]
 800066a:	2b02      	cmp	r3, #2
 800066c:	d107      	bne.n	800067e <MCAL_GPIO_Init+0xf4>
			{
				//Table 20. Port Bit configuration table
				//If Pull-Up input -> PxODR == 1
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	68db      	ldr	r3, [r3, #12]
 8000672:	683a      	ldr	r2, [r7, #0]
 8000674:	8812      	ldrh	r2, [r2, #0]
 8000676:	431a      	orrs	r2, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	e007      	b.n	800068e <MCAL_GPIO_Init+0x104>
			}
			else
			{
				//Table 20. Port Bit configuration table
				//If Pull-Up input -> PxODR == 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	683a      	ldr	r2, [r7, #0]
 8000684:	8812      	ldrh	r2, [r2, #0]
 8000686:	43d2      	mvns	r2, r2
 8000688:	401a      	ands	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	60da      	str	r2, [r3, #12]

		}

	}
	//Writing the configuration base on PinConfig on CNFx & MODEx
	(*configReg) |= ( (CNFx_MODEx)<<Get_CRL_CRH_Position(PinConfig->GPIO_PinNumber) );
 800068e:	7afb      	ldrb	r3, [r7, #11]
 8000690:	b2db      	uxtb	r3, r3
 8000692:	461c      	mov	r4, r3
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ff13 	bl	80004c4 <Get_CRL_CRH_Position>
 800069e:	4603      	mov	r3, r0
 80006a0:	fa04 f203 	lsl.w	r2, r4, r3
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	431a      	orrs	r2, r3
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	601a      	str	r2, [r3, #0]
}
 80006ae:	bf00      	nop
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd90      	pop	{r4, r7, pc}
	...

080006b8 <MCAL_I2C_Init>:
 * @param [in]	-I2C_Config : Pointer to SPI_Config_t which contains the configuration info for specified I2C
 * @retval 		-None
 * Note 		-None
 */
void MCAL_I2C_Init(I2C_TypeDef* I2Cx , I2C_Config_t* I2C_Config)
{
 80006b8:	b5b0      	push	{r4, r5, r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
	uint16_t temp_REG = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	82fb      	strh	r3, [r7, #22]
	uint32_t temp_Freq;
	uint32_t Result = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
	uint32_t Pclk1 = 8000000;
 80006ca:	4b7a      	ldr	r3, [pc, #488]	; (80008b4 <MCAL_I2C_Init+0x1fc>)
 80006cc:	60fb      	str	r3, [r7, #12]
	//Enable RCC Clock
	if(I2Cx == I2C1)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4a79      	ldr	r2, [pc, #484]	; (80008b8 <MCAL_I2C_Init+0x200>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d110      	bne.n	80006f8 <MCAL_I2C_Init+0x40>
	{
		GL_I2C_Config[0] = *I2C_Config;
 80006d6:	4a79      	ldr	r2, [pc, #484]	; (80008bc <MCAL_I2C_Init+0x204>)
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	4614      	mov	r4, r2
 80006dc:	461d      	mov	r5, r3
 80006de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e6:	682b      	ldr	r3, [r5, #0]
 80006e8:	6023      	str	r3, [r4, #0]
		RCC_I2C1_CLK_EN();
 80006ea:	4b75      	ldr	r3, [pc, #468]	; (80008c0 <MCAL_I2C_Init+0x208>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	4a74      	ldr	r2, [pc, #464]	; (80008c0 <MCAL_I2C_Init+0x208>)
 80006f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006f4:	61d3      	str	r3, [r2, #28]
 80006f6:	e014      	b.n	8000722 <MCAL_I2C_Init+0x6a>
	}
	else if (I2Cx == I2C2)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a72      	ldr	r2, [pc, #456]	; (80008c4 <MCAL_I2C_Init+0x20c>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d110      	bne.n	8000722 <MCAL_I2C_Init+0x6a>
	{
		GL_I2C_Config[1] = *I2C_Config;
 8000700:	4b6e      	ldr	r3, [pc, #440]	; (80008bc <MCAL_I2C_Init+0x204>)
 8000702:	683a      	ldr	r2, [r7, #0]
 8000704:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8000708:	4615      	mov	r5, r2
 800070a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800070c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000712:	682b      	ldr	r3, [r5, #0]
 8000714:	6023      	str	r3, [r4, #0]
		RCC_I2C2_CLK_EN();
 8000716:	4b6a      	ldr	r3, [pc, #424]	; (80008c0 <MCAL_I2C_Init+0x208>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	4a69      	ldr	r2, [pc, #420]	; (80008c0 <MCAL_I2C_Init+0x208>)
 800071c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000720:	61d3      	str	r3, [r2, #28]
	}

	if(I2C_Config->I2C_Mode == I2C_Mode_I2C)
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d17d      	bne.n	8000826 <MCAL_I2C_Init+0x16e>
	{
		//Init Timing
		//Get CR2 Vales in temp reg;
		temp_REG = I2Cx->CR2;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	82fb      	strh	r3, [r7, #22]
		//Clear Bits 5:0 FREQ[5:0]: Peripheral clock frequency
		temp_REG &= ~(I2C_CR2_FREQ);
 8000730:	8afb      	ldrh	r3, [r7, #22]
 8000732:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000736:	82fb      	strh	r3, [r7, #22]
		//Get Pclk1 Frequency
		Pclk1 = MCAL_RCC_GET_PCLK1();
 8000738:	f000 fb00 	bl	8000d3c <MCAL_RCC_GET_PCLK1>
 800073c:	60f8      	str	r0, [r7, #12]

		temp_Freq = (uint16_t) (Pclk1 / 1000000) ;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	4a61      	ldr	r2, [pc, #388]	; (80008c8 <MCAL_I2C_Init+0x210>)
 8000742:	fba2 2303 	umull	r2, r3, r2, r3
 8000746:	0c9b      	lsrs	r3, r3, #18
 8000748:	b29b      	uxth	r3, r3
 800074a:	60bb      	str	r3, [r7, #8]
		temp_REG |= temp_Freq;
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	b29a      	uxth	r2, r3
 8000750:	8afb      	ldrh	r3, [r7, #22]
 8000752:	4313      	orrs	r3, r2
 8000754:	82fb      	strh	r3, [r7, #22]
		I2Cx->CR2 = temp_REG;
 8000756:	8afa      	ldrh	r2, [r7, #22]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	605a      	str	r2, [r3, #4]
		temp_REG = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	82fb      	strh	r3, [r7, #22]

		I2Cx->CR1 &= ~(I2C_CR1_PE);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f023 0201 	bic.w	r2, r3, #1
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	601a      	str	r2, [r3, #0]

		if(I2C_Config->I2C_ClockSpeed == I2C_SCLK_SM_50KHz || I2C_Config->I2C_ClockSpeed == I2C_SCLK_SM_100KHz)
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000774:	4293      	cmp	r3, r2
 8000776:	d004      	beq.n	8000782 <MCAL_I2C_Init+0xca>
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a53      	ldr	r2, [pc, #332]	; (80008cc <MCAL_I2C_Init+0x214>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d113      	bne.n	80007aa <MCAL_I2C_Init+0xf2>
		{
			Result = (uint16_t)(Pclk1 / ( I2C_Config->I2C_ClockSpeed>>1 )); //I2C_ClockSpeed * 2
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	085b      	lsrs	r3, r3, #1
 8000788:	68fa      	ldr	r2, [r7, #12]
 800078a:	fbb2 f3f3 	udiv	r3, r2, r3
 800078e:	b29b      	uxth	r3, r3
 8000790:	613b      	str	r3, [r7, #16]
			temp_REG |= Result;
 8000792:	693b      	ldr	r3, [r7, #16]
 8000794:	b29a      	uxth	r2, r3
 8000796:	8afb      	ldrh	r3, [r7, #22]
 8000798:	4313      	orrs	r3, r2
 800079a:	82fb      	strh	r3, [r7, #22]
			I2Cx->CCR = temp_REG;
 800079c:	8afa      	ldrh	r2, [r7, #22]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	61da      	str	r2, [r3, #28]

			I2Cx->TRISE = temp_Freq +1;
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	1c5a      	adds	r2, r3, #1
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	621a      	str	r2, [r3, #32]
		{
			//Fast Mode to be done
		}

		//I2C CR1 Config
		temp_REG = I2Cx->CR1 ;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	82fb      	strh	r3, [r7, #22]

		temp_REG |= (I2C_Config->ACK_Control | I2C_Config->General_Call | I2C_Config->I2C_Mode | I2C_Config->Stretch_Mode );
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	691b      	ldr	r3, [r3, #16]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b29a      	uxth	r2, r3
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	4313      	orrs	r3, r2
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	4313      	orrs	r3, r2
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	8afb      	ldrh	r3, [r7, #22]
 80007d6:	4313      	orrs	r3, r2
 80007d8:	82fb      	strh	r3, [r7, #22]

		I2Cx->CR1 = temp_REG;
 80007da:	8afa      	ldrh	r2, [r7, #22]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	601a      	str	r2, [r3, #0]
		temp_REG = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	82fb      	strh	r3, [r7, #22]

		//I2C OAR1 & OAR2 Config
		if(I2C_Config ->I2C_Slave_Address_Mode.Enable_DUAL_Address == 1)
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	8a9b      	ldrh	r3, [r3, #20]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d108      	bne.n	80007fe <MCAL_I2C_Init+0x146>
		{
			temp_REG = I2C_OAR2_ENDUAL;
 80007ec:	2301      	movs	r3, #1
 80007ee:	82fb      	strh	r3, [r7, #22]

			//			Bits 7:1 ADD2[7:1]: Interface address
			//			bits 7:1 of address in dual addressing mode
			temp_REG = I2C_Config->I2C_Slave_Address_Mode.Secondary_Slave_Address << I2C_OAR2_ADD2_Pos ;
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	8b1b      	ldrh	r3, [r3, #24]
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = temp_REG;
 80007f8:	8afa      	ldrh	r2, [r7, #22]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	60da      	str	r2, [r3, #12]
		}
		temp_REG = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	82fb      	strh	r3, [r7, #22]

		//		Bits 7:1 ADD[7:1]: Interface address
		//		bits 7:1 of address
		temp_REG |= I2C_Config->I2C_Slave_Address_Mode.Primary_Slave_Address<<1;
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	8adb      	ldrh	r3, [r3, #22]
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	b21a      	sxth	r2, r3
 800080a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800080e:	4313      	orrs	r3, r2
 8000810:	b21b      	sxth	r3, r3
 8000812:	82fb      	strh	r3, [r7, #22]
		temp_REG |= I2C_Config->I2C_Slave_Address_Mode.I2C_Addressing_Slave_Mode;
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	69db      	ldr	r3, [r3, #28]
 8000818:	b29a      	uxth	r2, r3
 800081a:	8afb      	ldrh	r3, [r7, #22]
 800081c:	4313      	orrs	r3, r2
 800081e:	82fb      	strh	r3, [r7, #22]

		I2Cx->OAR1 = temp_REG;
 8000820:	8afa      	ldrh	r2, [r7, #22]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	609a      	str	r2, [r3, #8]
		//SMBUS To be Supported later
	}

	//If slave mode it must work in interrupt not polling
	//Check if Callback pointer != NULL
	if (I2C_Config->Ptr_Slave_EV_IRQ_CallBack != NULL)
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	6a1b      	ldr	r3, [r3, #32]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d038      	beq.n	80008a0 <MCAL_I2C_Init+0x1e8>
	{
		//Enable IRQ
		I2Cx->CR2 |= I2C_CR2_ITERREN;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= I2C_CR2_ITEVTEN;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= I2C_CR2_ITBUFEN;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	605a      	str	r2, [r3, #4]
		if (I2Cx == I2C1)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4a18      	ldr	r2, [pc, #96]	; (80008b8 <MCAL_I2C_Init+0x200>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d10c      	bne.n	8000874 <MCAL_I2C_Init+0x1bc>
		{
			NVIC_IRQ31_I2C1_EV_Enable();
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MCAL_I2C_Init+0x218>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a1c      	ldr	r2, [pc, #112]	; (80008d0 <MCAL_I2C_Init+0x218>)
 8000860:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000864:	6013      	str	r3, [r2, #0]
			NVIC_IRQ32_I2C1_ER_Enable();
 8000866:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MCAL_I2C_Init+0x21c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a1a      	ldr	r2, [pc, #104]	; (80008d4 <MCAL_I2C_Init+0x21c>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6013      	str	r3, [r2, #0]
 8000872:	e00f      	b.n	8000894 <MCAL_I2C_Init+0x1dc>
		}
		else if (I2Cx == I2C2)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a13      	ldr	r2, [pc, #76]	; (80008c4 <MCAL_I2C_Init+0x20c>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d10b      	bne.n	8000894 <MCAL_I2C_Init+0x1dc>
		{
			NVIC_IRQ33_I2C2_EV_Enable();
 800087c:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MCAL_I2C_Init+0x21c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a14      	ldr	r2, [pc, #80]	; (80008d4 <MCAL_I2C_Init+0x21c>)
 8000882:	f043 0302 	orr.w	r3, r3, #2
 8000886:	6013      	str	r3, [r2, #0]
			NVIC_IRQ34_I2C2_ER_Enable();
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MCAL_I2C_Init+0x21c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a11      	ldr	r2, [pc, #68]	; (80008d4 <MCAL_I2C_Init+0x21c>)
 800088e:	f043 0304 	orr.w	r3, r3, #4
 8000892:	6013      	str	r3, [r2, #0]
		}
		I2Cx->SR1 = 0;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
		I2Cx->SR2 = 0;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
	}

	//Enable I2C Peripheral
	I2Cx->CR1 |= I2C_CR1_PE;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f043 0201 	orr.w	r2, r3, #1
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	601a      	str	r2, [r3, #0]

}
 80008ac:	bf00      	nop
 80008ae:	3718      	adds	r7, #24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bdb0      	pop	{r4, r5, r7, pc}
 80008b4:	007a1200 	.word	0x007a1200
 80008b8:	40005400 	.word	0x40005400
 80008bc:	2000001c 	.word	0x2000001c
 80008c0:	40021000 	.word	0x40021000
 80008c4:	40005800 	.word	0x40005800
 80008c8:	431bde83 	.word	0x431bde83
 80008cc:	000186a0 	.word	0x000186a0
 80008d0:	e000e100 	.word	0xe000e100
 80008d4:	e000e104 	.word	0xe000e104

080008d8 <MCAL_I2C_GPIO_Set_Pins>:
 * @param [in] 	-I2Cx : where x can be (1,2 depending on device used) to select which I2C Instant
 * @retval 		-None
 * Note 		-None
 */
void MCAL_I2C_GPIO_Set_Pins(I2C_TypeDef* I2Cx)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t I2C_PinConfig;

	if(I2Cx == I2C1)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a1f      	ldr	r2, [pc, #124]	; (8000960 <MCAL_I2C_GPIO_Set_Pins+0x88>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d118      	bne.n	800091a <MCAL_I2C_GPIO_Set_Pins+0x42>
	{
		//I2C1
		//PB6 SCL
		//PB7 SDA
		I2C_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 80008e8:	2340      	movs	r3, #64	; 0x40
 80008ea:	81bb      	strh	r3, [r7, #12]
		I2C_PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 80008ec:	2307      	movs	r3, #7
 80008ee:	73bb      	strb	r3, [r7, #14]
		I2C_PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 80008f0:	2301      	movs	r3, #1
 80008f2:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &I2C_PinConfig);
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	4619      	mov	r1, r3
 80008fa:	481a      	ldr	r0, [pc, #104]	; (8000964 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 80008fc:	f7ff fe45 	bl	800058a <MCAL_GPIO_Init>

		I2C_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	81bb      	strh	r3, [r7, #12]
		I2C_PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000904:	2307      	movs	r3, #7
 8000906:	73bb      	strb	r3, [r7, #14]
		I2C_PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000908:	2301      	movs	r3, #1
 800090a:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &I2C_PinConfig);
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	4619      	mov	r1, r3
 8000912:	4814      	ldr	r0, [pc, #80]	; (8000964 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000914:	f7ff fe39 	bl	800058a <MCAL_GPIO_Init>
		MCAL_GPIO_Init(GPIOB, &I2C_PinConfig);

	}


}
 8000918:	e01d      	b.n	8000956 <MCAL_I2C_GPIO_Set_Pins+0x7e>
	else if (I2Cx == I2C2)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4a12      	ldr	r2, [pc, #72]	; (8000968 <MCAL_I2C_GPIO_Set_Pins+0x90>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d119      	bne.n	8000956 <MCAL_I2C_GPIO_Set_Pins+0x7e>
		I2C_PinConfig.GPIO_PinNumber = GPIO_PIN_10;
 8000922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000926:	81bb      	strh	r3, [r7, #12]
		I2C_PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000928:	2307      	movs	r3, #7
 800092a:	73bb      	strb	r3, [r7, #14]
		I2C_PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 800092c:	2301      	movs	r3, #1
 800092e:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &I2C_PinConfig);
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	4619      	mov	r1, r3
 8000936:	480b      	ldr	r0, [pc, #44]	; (8000964 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000938:	f7ff fe27 	bl	800058a <MCAL_GPIO_Init>
		I2C_PinConfig.GPIO_PinNumber = GPIO_PIN_11;
 800093c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000940:	81bb      	strh	r3, [r7, #12]
		I2C_PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000942:	2307      	movs	r3, #7
 8000944:	73bb      	strb	r3, [r7, #14]
		I2C_PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000946:	2301      	movs	r3, #1
 8000948:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &I2C_PinConfig);
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	4619      	mov	r1, r3
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000952:	f7ff fe1a 	bl	800058a <MCAL_GPIO_Init>
}
 8000956:	bf00      	nop
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40005400 	.word	0x40005400
 8000964:	40010c00 	.word	0x40010c00
 8000968:	40005800 	.word	0x40005800

0800096c <MCAL_I2C_MASTER_TX>:
				 Timer_Interrupt(){flag=1}
				 while condition (Flag && Time);
 */

void MCAL_I2C_MASTER_TX (I2C_TypeDef* I2Cx ,uint16_t device_Address,uint8_t* Data ,  uint32_t Data_Length , E_STOP_CONDITION Stop ,E_Repeated_Start Start )
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	607a      	str	r2, [r7, #4]
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	460b      	mov	r3, r1
 800097a:	817b      	strh	r3, [r7, #10]
	volatile uint32_t i;
	//Transit Sequence :
	//1-Send Start Bit:
	I2C_GenerateSTART(I2Cx, enable, Start);
 800097c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000980:	461a      	mov	r2, r3
 8000982:	2100      	movs	r1, #0
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	f000 f8d3 	bl	8000b30 <I2C_GenerateSTART>

	//2-Check EV5
	//EV5: SB=1, cleared by reading SR1 register
	while(!I2C_Get_Status(I2Cx, EV5));
 800098a:	bf00      	nop
 800098c:	2101      	movs	r1, #1
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f000 f910 	bl	8000bb4 <I2C_Get_Status>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d0f8      	beq.n	800098c <MCAL_I2C_MASTER_TX+0x20>

	//3-Writing DR register with Address
	I2C_SendAddress(I2Cx, device_Address, Transmitter);
 800099a:	897b      	ldrh	r3, [r7, #10]
 800099c:	2200      	movs	r2, #0
 800099e:	4619      	mov	r1, r3
 80009a0:	68f8      	ldr	r0, [r7, #12]
 80009a2:	f000 f991 	bl	8000cc8 <I2C_SendAddress>

	//4-Check EV6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!I2C_Get_Status(I2Cx, EV6));
 80009a6:	bf00      	nop
 80009a8:	2102      	movs	r1, #2
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	f000 f902 	bl	8000bb4 <I2C_Get_Status>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d0f8      	beq.n	80009a8 <MCAL_I2C_MASTER_TX+0x3c>

	//5- Check TRA , BUSY, MSL , TXE Flags
	while(!I2C_Get_Status(I2Cx, MASTER_BYTE_TRANSMITTER));
 80009b6:	bf00      	nop
 80009b8:	4915      	ldr	r1, [pc, #84]	; (8000a10 <MCAL_I2C_MASTER_TX+0xa4>)
 80009ba:	68f8      	ldr	r0, [r7, #12]
 80009bc:	f000 f8fa 	bl	8000bb4 <I2C_Get_Status>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d0f8      	beq.n	80009b8 <MCAL_I2C_MASTER_TX+0x4c>

	//6-Write Data
	for (i= 0;i<Data_Length;i++)
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
 80009ca:	e011      	b.n	80009f0 <MCAL_I2C_MASTER_TX+0x84>
	{
		I2Cx->DR = Data[i];
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	611a      	str	r2, [r3, #16]
		//7-Wait EV8
		//EV8: TxE=1, shift register not empty, data register empty, cleared by writing DR register
		while(!I2C_Get_Status(I2Cx, EV8));
 80009da:	bf00      	nop
 80009dc:	2103      	movs	r1, #3
 80009de:	68f8      	ldr	r0, [r7, #12]
 80009e0:	f000 f8e8 	bl	8000bb4 <I2C_Get_Status>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d0f8      	beq.n	80009dc <MCAL_I2C_MASTER_TX+0x70>
	for (i= 0;i<Data_Length;i++)
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	3301      	adds	r3, #1
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	683a      	ldr	r2, [r7, #0]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d8e9      	bhi.n	80009cc <MCAL_I2C_MASTER_TX+0x60>

	}

	//8-Send Stop Condition
	if(Stop == withSTOP)
 80009f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d103      	bne.n	8000a08 <MCAL_I2C_MASTER_TX+0x9c>
	{
		I2C_GenerateSTOP(I2Cx,enable);
 8000a00:	2100      	movs	r1, #0
 8000a02:	68f8      	ldr	r0, [r7, #12]
 8000a04:	f000 f8bb 	bl	8000b7e <I2C_GenerateSTOP>
	}



}
 8000a08:	bf00      	nop
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	00070080 	.word	0x00070080

08000a14 <MCAL_I2C_MASTER_RX>:
 * @retval 		-None
 * Note 		-None
 */

void MCAL_I2C_MASTER_RX (I2C_TypeDef* I2Cx ,uint16_t device_Address,uint8_t* Data ,  uint32_t Data_Length , E_STOP_CONDITION Stop ,E_Repeated_Start Start )
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	607a      	str	r2, [r7, #4]
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	460b      	mov	r3, r1
 8000a22:	817b      	strh	r3, [r7, #10]
	volatile uint32_t i;
	//Receive Sequence :
	//1-Send Start Bit:
	I2C_GenerateSTART(I2Cx, enable, Start);
 8000a24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000a28:	461a      	mov	r2, r3
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	68f8      	ldr	r0, [r7, #12]
 8000a2e:	f000 f87f 	bl	8000b30 <I2C_GenerateSTART>

	//2-Check EV5
	//EV5: SB=1, cleared by reading SR1 register
	while(!I2C_Get_Status(I2Cx, EV5));
 8000a32:	bf00      	nop
 8000a34:	2101      	movs	r1, #1
 8000a36:	68f8      	ldr	r0, [r7, #12]
 8000a38:	f000 f8bc 	bl	8000bb4 <I2C_Get_Status>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d0f8      	beq.n	8000a34 <MCAL_I2C_MASTER_RX+0x20>

	//3-Writing DR register with Address
	I2C_SendAddress(I2Cx, device_Address, Reciever);
 8000a42:	897b      	ldrh	r3, [r7, #10]
 8000a44:	2201      	movs	r2, #1
 8000a46:	4619      	mov	r1, r3
 8000a48:	68f8      	ldr	r0, [r7, #12]
 8000a4a:	f000 f93d 	bl	8000cc8 <I2C_SendAddress>

	//4-Check EV6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!I2C_Get_Status(I2Cx, EV6));
 8000a4e:	bf00      	nop
 8000a50:	2102      	movs	r1, #2
 8000a52:	68f8      	ldr	r0, [r7, #12]
 8000a54:	f000 f8ae 	bl	8000bb4 <I2C_Get_Status>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d0f8      	beq.n	8000a50 <MCAL_I2C_MASTER_RX+0x3c>

	I2C_AckConfig(I2Cx,enable);
 8000a5e:	2100      	movs	r1, #0
 8000a60:	68f8      	ldr	r0, [r7, #12]
 8000a62:	f000 f950 	bl	8000d06 <I2C_AckConfig>

	if(Data_Length)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d01c      	beq.n	8000aa6 <MCAL_I2C_MASTER_RX+0x92>
	{
		//Read data until data length Becomes zero
		for (i= Data_Length; i>1 ;i--)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	e012      	b.n	8000a98 <MCAL_I2C_MASTER_RX+0x84>
		{
			//5-Wait EV7
			//EV7: RxNE=1 Cleared by Reading DR Register
			while(!I2C_Get_Status(I2Cx, EV7));
 8000a72:	bf00      	nop
 8000a74:	2105      	movs	r1, #5
 8000a76:	68f8      	ldr	r0, [r7, #12]
 8000a78:	f000 f89c 	bl	8000bb4 <I2C_Get_Status>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d0f8      	beq.n	8000a74 <MCAL_I2C_MASTER_RX+0x60>
			//Read data
			*Data = I2Cx->DR;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	691b      	ldr	r3, [r3, #16]
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	701a      	strb	r2, [r3, #0]
			Data++;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	607b      	str	r3, [r7, #4]
		for (i= Data_Length; i>1 ;i--)
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	3b01      	subs	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d8e9      	bhi.n	8000a72 <MCAL_I2C_MASTER_RX+0x5e>
		}
		I2C_AckConfig(I2Cx,disable);
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	68f8      	ldr	r0, [r7, #12]
 8000aa2:	f000 f930 	bl	8000d06 <I2C_AckConfig>

	}

	//6-Send Stop Condition
	if(Stop == withSTOP)
 8000aa6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d103      	bne.n	8000ab6 <MCAL_I2C_MASTER_RX+0xa2>
	{
		I2C_GenerateSTOP(I2Cx,enable);
 8000aae:	2100      	movs	r1, #0
 8000ab0:	68f8      	ldr	r0, [r7, #12]
 8000ab2:	f000 f864 	bl	8000b7e <I2C_GenerateSTOP>
	}

	//Re-enable Ack
	if(I2Cx==I2C1)
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <MCAL_I2C_MASTER_RX+0xe0>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d109      	bne.n	8000ad2 <MCAL_I2C_MASTER_RX+0xbe>
	{
		if(GL_I2C_Config[0].ACK_Control== I2C_ACK_Enable)
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MCAL_I2C_MASTER_RX+0xe4>)
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ac6:	d111      	bne.n	8000aec <MCAL_I2C_MASTER_RX+0xd8>
		{
			I2C_AckConfig(I2Cx,enable);
 8000ac8:	2100      	movs	r1, #0
 8000aca:	68f8      	ldr	r0, [r7, #12]
 8000acc:	f000 f91b 	bl	8000d06 <I2C_AckConfig>
			I2C_AckConfig(I2Cx,enable);
		}
	}


}
 8000ad0:	e00c      	b.n	8000aec <MCAL_I2C_MASTER_RX+0xd8>
	else if (I2Cx==I2C2)
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	4a09      	ldr	r2, [pc, #36]	; (8000afc <MCAL_I2C_MASTER_RX+0xe8>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d108      	bne.n	8000aec <MCAL_I2C_MASTER_RX+0xd8>
		if(GL_I2C_Config[1].ACK_Control== I2C_ACK_Enable)
 8000ada:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <MCAL_I2C_MASTER_RX+0xe4>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ae2:	d103      	bne.n	8000aec <MCAL_I2C_MASTER_RX+0xd8>
			I2C_AckConfig(I2Cx,enable);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	68f8      	ldr	r0, [r7, #12]
 8000ae8:	f000 f90d 	bl	8000d06 <I2C_AckConfig>
}
 8000aec:	bf00      	nop
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40005400 	.word	0x40005400
 8000af8:	2000001c 	.word	0x2000001c
 8000afc:	40005800 	.word	0x40005800

08000b00 <I2C1_EV_IRQHandler>:




void I2C1_EV_IRQHandler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr

08000b0c <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler (void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr

08000b18 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr

08000b24 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0

}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr

08000b30 <I2C_GenerateSTART>:




void I2C_GenerateSTART(I2C_TypeDef* I2Cx,E_Functional_State State ,E_Repeated_Start Start )
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	70fb      	strb	r3, [r7, #3]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	70bb      	strb	r3, [r7, #2]
	//Check Repeated or regular start
	if (Start == No_Repeated_Start)
 8000b40:	78bb      	ldrb	r3, [r7, #2]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d107      	bne.n	8000b56 <I2C_GenerateSTART+0x26>
	{
		//Check if Bus is idle i.e. check if it's taken by any other master
		while(I2C_Get_Status(I2Cx, I2C_FLAG_BUSY));
 8000b46:	bf00      	nop
 8000b48:	2100      	movs	r1, #0
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f000 f832 	bl	8000bb4 <I2C_Get_Status>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d1f8      	bne.n	8000b48 <I2C_GenerateSTART+0x18>

	}
	//If its a repeated start , bus already taken by this master
	if(State != disable)
 8000b56:	78fb      	ldrb	r3, [r7, #3]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d006      	beq.n	8000b6a <I2C_GenerateSTART+0x3a>
		//		0: No Start generation
		//		1: Repeated start generation
		//		In Slave mode:
		//		0: No Start generation
		//		1: Start generation when the bus is free
		I2Cx->CR1 |= I2C_CR1_START;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	601a      	str	r2, [r3, #0]
		I2Cx->CR1 &= ~(I2C_CR1_START);
	}



}
 8000b68:	e005      	b.n	8000b76 <I2C_GenerateSTART+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	601a      	str	r2, [r3, #0]
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <I2C_GenerateSTOP>:
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx,E_Functional_State State)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	460b      	mov	r3, r1
 8000b88:	70fb      	strb	r3, [r7, #3]
	//	0: No Stop generation.
	//	1: Stop generation after the current byte transfer or after the current Start condition is sent.
	//	In Slave mode:
	//	0: No Stop generation.
	//	1: Release the SCL and SDA lines after the current byte transfer.
	if(State != disable)
 8000b8a:	78fb      	ldrb	r3, [r7, #3]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d006      	beq.n	8000b9e <I2C_GenerateSTOP+0x20>
	{
		I2Cx->CR1 |= I2C_CR1_STOP;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	601a      	str	r2, [r3, #0]
	{
		I2Cx->CR1 &= ~(I2C_CR1_STOP);

	}

}
 8000b9c:	e005      	b.n	8000baa <I2C_GenerateSTOP+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	601a      	str	r2, [r3, #0]
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr

08000bb4 <I2C_Get_Status>:

E_I2C_Flag_Status I2C_Get_Status ( I2C_TypeDef* I2Cx , E_Status flag)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b089      	sub	sp, #36	; 0x24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
	volatile uint32_t Temp;
	uint32_t flag1 = 0 ,flag2=0,lastevent = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61bb      	str	r3, [r7, #24]
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
	E_I2C_Flag_Status Value = RESET;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	77fb      	strb	r3, [r7, #31]
	switch(flag)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	d04d      	beq.n	8000c70 <I2C_Get_Status+0xbc>
 8000bd4:	2b03      	cmp	r3, #3
 8000bd6:	d804      	bhi.n	8000be2 <I2C_Get_Status+0x2e>
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d016      	beq.n	8000c0a <I2C_Get_Status+0x56>
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d820      	bhi.n	8000c22 <I2C_Get_Status+0x6e>
 8000be0:	e007      	b.n	8000bf2 <I2C_Get_Status+0x3e>
 8000be2:	2b05      	cmp	r3, #5
 8000be4:	d05c      	beq.n	8000ca0 <I2C_Get_Status+0xec>
 8000be6:	2b05      	cmp	r3, #5
 8000be8:	d34e      	bcc.n	8000c88 <I2C_Get_Status+0xd4>
 8000bea:	4a36      	ldr	r2, [pc, #216]	; (8000cc4 <I2C_Get_Status+0x110>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d024      	beq.n	8000c3a <I2C_Get_Status+0x86>
 8000bf0:	e062      	b.n	8000cb8 <I2C_Get_Status+0x104>
		//		1: Communication ongoing on the bus
		//		– Set by hardware on detection of SDA or SCL low
		//		– cleared by hardware on detection of a Stop condition.
		//		It indicates a communication in progress on the bus. This information is still updated when
		//		the interface is disabled (PE=0).
		if((I2Cx->SR2) & (I2C_SR2_BUSY))
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	f003 0302 	and.w	r3, r3, #2
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d002      	beq.n	8000c04 <I2C_Get_Status+0x50>
		{
			Value = SET;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	77fb      	strb	r3, [r7, #31]
		}
		else
		{
			Value = RESET;
		}
		break;
 8000c02:	e059      	b.n	8000cb8 <I2C_Get_Status+0x104>
			Value = RESET;
 8000c04:	2300      	movs	r3, #0
 8000c06:	77fb      	strb	r3, [r7, #31]
		break;
 8000c08:	e056      	b.n	8000cb8 <I2C_Get_Status+0x104>
		//		0: No Start condition
		//		1: Start condition generated.
		//		– Set when a Start condition generated.
		//		– Cleared by software by reading the SR1 register followed by writing the DR register, or by
		//		hardware when PE=0
		if((I2Cx->SR1) & (I2C_SR1_SB))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d002      	beq.n	8000c1c <I2C_Get_Status+0x68>
		{
			Value = SET;
 8000c16:	2301      	movs	r3, #1
 8000c18:	77fb      	strb	r3, [r7, #31]
		}
		else
		{
			Value = RESET;
		}
		break;
 8000c1a:	e04d      	b.n	8000cb8 <I2C_Get_Status+0x104>
			Value = RESET;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	77fb      	strb	r3, [r7, #31]
		break;
 8000c20:	e04a      	b.n	8000cb8 <I2C_Get_Status+0x104>
	}
	case EV6 :
	{
		//		Bit 1 ADDR: Address sent (master mode)/matched (slave mode)
		if((I2Cx->SR1) & (I2C_SR1_ADDR))
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d002      	beq.n	8000c34 <I2C_Get_Status+0x80>
		{
			Value = SET;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	77fb      	strb	r3, [r7, #31]
		else
		{
			Value = RESET;
		}
		//Temp = I2Cx->SR2;
		break;
 8000c32:	e041      	b.n	8000cb8 <I2C_Get_Status+0x104>
			Value = RESET;
 8000c34:	2300      	movs	r3, #0
 8000c36:	77fb      	strb	r3, [r7, #31]
		break;
 8000c38:	e03e      	b.n	8000cb8 <I2C_Get_Status+0x104>
	}

	case MASTER_BYTE_TRANSMITTER :
	{
		flag1 = I2Cx->SR1;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	61bb      	str	r3, [r7, #24]
		flag2 = I2Cx->SR2;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	617b      	str	r3, [r7, #20]
		flag2 = flag2<<16;
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	041b      	lsls	r3, r3, #16
 8000c4a:	617b      	str	r3, [r7, #20]
		//Get last event value from I2C Status Reg
		lastevent = (flag1 | flag2) & ((uint32_t) 0x00FFFFFF);
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000c56:	613b      	str	r3, [r7, #16]
		if((lastevent & flag) == flag)
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	683a      	ldr	r2, [r7, #0]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d102      	bne.n	8000c6a <I2C_Get_Status+0xb6>
		{
			Value = SET;
 8000c64:	2301      	movs	r3, #1
 8000c66:	77fb      	strb	r3, [r7, #31]
		}
		else
		{
			Value = RESET;
		}
		break;
 8000c68:	e026      	b.n	8000cb8 <I2C_Get_Status+0x104>
			Value = RESET;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	77fb      	strb	r3, [r7, #31]
		break;
 8000c6e:	e023      	b.n	8000cb8 <I2C_Get_Status+0x104>
		//		– Cleared by software writing to the DR register or by hardware after a start or a stop condition
		//		or when PE=0.
		//		TxE is not set if either a NACK is received, or if next byte to be transmitted is PEC (PEC=1)
		//		Note: TxE is not cleared by writing the first data being transmitted, or by writing data when
		//		BTF is set, as in both cases the data register is still empty.
		if((I2Cx->SR1) & (I2C_SR1_TXE))
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	695b      	ldr	r3, [r3, #20]
 8000c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d002      	beq.n	8000c82 <I2C_Get_Status+0xce>
		{
			Value = SET;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	77fb      	strb	r3, [r7, #31]
		}
		else
		{
			Value = RESET;
		}
		break;
 8000c80:	e01a      	b.n	8000cb8 <I2C_Get_Status+0x104>
			Value = RESET;
 8000c82:	2300      	movs	r3, #0
 8000c84:	77fb      	strb	r3, [r7, #31]
		break;
 8000c86:	e017      	b.n	8000cb8 <I2C_Get_Status+0x104>
		//		– Cleared by software reading SR1 followed by either a read or write in the DR register or by
		//		hardware after a start or a stop condition in transmission or when PE=0.
		//		Note: The BTF bit is not set after a NACK reception
		//		The BTF bit is not set if next byte to be transmitted is the PEC (TRA=1 in I2C_SR2
		//		register and PEC=1 in I2C_CR1 register)
		if((I2Cx->SR1) & (I2C_SR1_BTF))
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	695b      	ldr	r3, [r3, #20]
 8000c8c:	f003 0304 	and.w	r3, r3, #4
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d002      	beq.n	8000c9a <I2C_Get_Status+0xe6>
		{
			Value = SET;
 8000c94:	2301      	movs	r3, #1
 8000c96:	77fb      	strb	r3, [r7, #31]
		}
		else
		{
			Value = RESET;
		}
		break;
 8000c98:	e00e      	b.n	8000cb8 <I2C_Get_Status+0x104>
			Value = RESET;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	77fb      	strb	r3, [r7, #31]
		break;
 8000c9e:	e00b      	b.n	8000cb8 <I2C_Get_Status+0x104>
		//		1: Data register not empty
		//		– Set when data register is not empty in receiver mode. RxNE is not set during address phase.
		//		– Cleared by software reading or writing the DR register or by hardware when PE=0.
		//		RxNE is not set in case of ARLO event.
		//		Note: RxNE is not cleared by reading data when BTF is set, as the data register is still full.
		if((I2Cx->SR1) & (I2C_SR1_RXNE))
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	695b      	ldr	r3, [r3, #20]
 8000ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d002      	beq.n	8000cb2 <I2C_Get_Status+0xfe>
		{
			Value = SET;
 8000cac:	2301      	movs	r3, #1
 8000cae:	77fb      	strb	r3, [r7, #31]
		}
		else
		{
			Value = RESET;
		}
		break;
 8000cb0:	e001      	b.n	8000cb6 <I2C_Get_Status+0x102>
			Value = RESET;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	77fb      	strb	r3, [r7, #31]
		break;
 8000cb6:	bf00      	nop

	}



	return Value;
 8000cb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3724      	adds	r7, #36	; 0x24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr
 8000cc4:	00070080 	.word	0x00070080

08000cc8 <I2C_SendAddress>:




void I2C_SendAddress (I2C_TypeDef* I2Cx , uint16_t Address, E_Direction I2C_Direction)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	807b      	strh	r3, [r7, #2]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	707b      	strb	r3, [r7, #1]
	//Todo Support 10 Bit Addressing
	Address = (Address<<1);
 8000cd8:	887b      	ldrh	r3, [r7, #2]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	807b      	strh	r3, [r7, #2]
	if (I2C_Direction == Reciever)
 8000cde:	787b      	ldrb	r3, [r7, #1]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d104      	bne.n	8000cee <I2C_SendAddress+0x26>
	{
		//Address bit 0 = 1 for Read
		Address |= (1<<0);
 8000ce4:	887b      	ldrh	r3, [r7, #2]
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	807b      	strh	r3, [r7, #2]
 8000cec:	e003      	b.n	8000cf6 <I2C_SendAddress+0x2e>
	}
	else
	{
		//Address bit 0 = 0 for Write
		Address &= ~(1<<0);
 8000cee:	887b      	ldrh	r3, [r7, #2]
 8000cf0:	f023 0301 	bic.w	r3, r3, #1
 8000cf4:	807b      	strh	r3, [r7, #2]
	}

	I2Cx->DR = Address;
 8000cf6:	887a      	ldrh	r2, [r7, #2]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	611a      	str	r2, [r3, #16]

}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr

08000d06 <I2C_AckConfig>:

void I2C_AckConfig (I2C_TypeDef* I2Cx, E_Functional_State State)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	70fb      	strb	r3, [r7, #3]
	//	Bit 10 ACK: Acknowledge enable
	//	This bit is set and cleared by software and cleared by hardware when PE=0.
	//	0: No acknowledge returned
	//	1: Acknowledge returned after a byte is received (matched address or data)

	if(State == enable)
 8000d12:	78fb      	ldrb	r3, [r7, #3]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d106      	bne.n	8000d26 <I2C_AckConfig+0x20>
	{
		I2Cx->CR1 |= (I2C_CR1_ACK);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	601a      	str	r2, [r3, #0]
	}
	else
	{
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}
}
 8000d24:	e005      	b.n	8000d32 <I2C_AckConfig+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	601a      	str	r2, [r3, #0]
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr

08000d3c <MCAL_RCC_GET_PCLK1>:
 * @param [in] 	-None
 * @retval 		-PCLK1
 * Note 		-None
*/
uint32_t MCAL_RCC_GET_PCLK1(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_GET_HCLK() >> APBPrescaler[(RCC->CFGR >> 8) & 0b111]);
 8000d40:	f000 f82e 	bl	8000da0 <MCAL_RCC_GET_HCLK>
 8000d44:	4601      	mov	r1, r0
 8000d46:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <MCAL_RCC_GET_PCLK1+0x20>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	0a1b      	lsrs	r3, r3, #8
 8000d4c:	f003 0307 	and.w	r3, r3, #7
 8000d50:	4a03      	ldr	r2, [pc, #12]	; (8000d60 <MCAL_RCC_GET_PCLK1+0x24>)
 8000d52:	5cd3      	ldrb	r3, [r2, r3]
 8000d54:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	08001028 	.word	0x08001028

08000d64 <MCAL_RCC_GET_SYSCLK>:
 * @param [in] 	-None
 * @retval 		-SYSCLK
 * Note 		-None
*/
uint32_t MCAL_RCC_GET_SYSCLK(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
//	Set and cleared by hardware to indicate which clock source is used as system clock
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: not applicable
	switch ((RCC->CFGR >> 2)& 0b11)
 8000d68:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <MCAL_RCC_GET_SYSCLK+0x30>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	089b      	lsrs	r3, r3, #2
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d006      	beq.n	8000d84 <MCAL_RCC_GET_SYSCLK+0x20>
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d302      	bcc.n	8000d80 <MCAL_RCC_GET_SYSCLK+0x1c>
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d004      	beq.n	8000d88 <MCAL_RCC_GET_SYSCLK+0x24>
 8000d7e:	e005      	b.n	8000d8c <MCAL_RCC_GET_SYSCLK+0x28>
	{
	case 0 :
		return HSI_CLK;
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <MCAL_RCC_GET_SYSCLK+0x34>)
 8000d82:	e003      	b.n	8000d8c <MCAL_RCC_GET_SYSCLK+0x28>
		break;
	case 1 :
		//To be implemented later
		return HSE_CLK;
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <MCAL_RCC_GET_SYSCLK+0x38>)
 8000d86:	e001      	b.n	8000d8c <MCAL_RCC_GET_SYSCLK+0x28>
		break;
	case 2 :
		//To be implemented later
		return 16000000;
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <MCAL_RCC_GET_SYSCLK+0x38>)
 8000d8a:	e7ff      	b.n	8000d8c <MCAL_RCC_GET_SYSCLK+0x28>


	}


}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr
 8000d94:	40021000 	.word	0x40021000
 8000d98:	007a1200 	.word	0x007a1200
 8000d9c:	00f42400 	.word	0x00f42400

08000da0 <MCAL_RCC_GET_HCLK>:
 * @param [in] 	-None
 * @retval 		-HCLK
 * Note 		-None
*/
uint32_t MCAL_RCC_GET_HCLK(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0

	return (MCAL_RCC_GET_SYSCLK() >> AHBPrescaler[((RCC->CFGR >> 4) & 0xF)]);
 8000da4:	f7ff ffde 	bl	8000d64 <MCAL_RCC_GET_SYSCLK>
 8000da8:	4601      	mov	r1, r0
 8000daa:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <MCAL_RCC_GET_HCLK+0x20>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	091b      	lsrs	r3, r3, #4
 8000db0:	f003 030f 	and.w	r3, r3, #15
 8000db4:	4a03      	ldr	r2, [pc, #12]	; (8000dc4 <MCAL_RCC_GET_HCLK+0x24>)
 8000db6:	5cd3      	ldrb	r3, [r2, r3]
 8000db8:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	08001030 	.word	0x08001030

08000dc8 <SPI1_IRQHandler>:
	}
	*ptrBuffer = SPIx->DR;
}

void SPI1_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
	S_IRQ_SRC_t IRQ_SRC;
	IRQ_SRC.TXE = (( SPI1->SR & (1<<1)) >>1);
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <SPI1_IRQHandler+0x54>)
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	085b      	lsrs	r3, r3, #1
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	793b      	ldrb	r3, [r7, #4]
 8000ddc:	f362 0300 	bfi	r3, r2, #0, #1
 8000de0:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.RXNE = (( SPI1->SR & (1<<0)) >>0);
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <SPI1_IRQHandler+0x54>)
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	793b      	ldrb	r3, [r7, #4]
 8000dee:	f362 0341 	bfi	r3, r2, #1, #1
 8000df2:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.ERROR = (( SPI1->SR & (1<<4)) >>4);
 8000df4:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <SPI1_IRQHandler+0x54>)
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	091b      	lsrs	r3, r3, #4
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	793b      	ldrb	r3, [r7, #4]
 8000e02:	f362 0382 	bfi	r3, r2, #2, #1
 8000e06:	713b      	strb	r3, [r7, #4]

	GL_SPI_Config[0]->Ptr_IRQ_CallBack(IRQ_SRC);
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <SPI1_IRQHandler+0x58>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	7938      	ldrb	r0, [r7, #4]
 8000e10:	4798      	blx	r3
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40013000 	.word	0x40013000
 8000e20:	20000064 	.word	0x20000064

08000e24 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
	S_IRQ_SRC_t IRQ_SRC;
	IRQ_SRC.TXE = (( SPI2->SR & (1<<1)) >>1);
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <SPI2_IRQHandler+0x54>)
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	085b      	lsrs	r3, r3, #1
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	793b      	ldrb	r3, [r7, #4]
 8000e38:	f362 0300 	bfi	r3, r2, #0, #1
 8000e3c:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.RXNE = (( SPI2->SR & (1<<0)) >>0);
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <SPI2_IRQHandler+0x54>)
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	793b      	ldrb	r3, [r7, #4]
 8000e4a:	f362 0341 	bfi	r3, r2, #1, #1
 8000e4e:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.ERROR = (( SPI2->SR & (1<<4)) >>4);
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <SPI2_IRQHandler+0x54>)
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	091b      	lsrs	r3, r3, #4
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	793b      	ldrb	r3, [r7, #4]
 8000e5e:	f362 0382 	bfi	r3, r2, #2, #1
 8000e62:	713b      	strb	r3, [r7, #4]

	GL_SPI_Config[1]->Ptr_IRQ_CallBack(IRQ_SRC);
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <SPI2_IRQHandler+0x58>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	7938      	ldrb	r0, [r7, #4]
 8000e6c:	4798      	blx	r3
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40003800 	.word	0x40003800
 8000e7c:	20000064 	.word	0x20000064

08000e80 <USART1_IRQHandler>:
}



void USART1_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	GL_UART_Config[0] ->Ptr_IRQ_CallBack();
 8000e84:	4b02      	ldr	r3, [pc, #8]	; (8000e90 <USART1_IRQHandler+0x10>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	691b      	ldr	r3, [r3, #16]
 8000e8a:	4798      	blx	r3
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200000a8 	.word	0x200000a8

08000e94 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	GL_UART_Config[1] ->Ptr_IRQ_CallBack();
 8000e98:	4b02      	ldr	r3, [pc, #8]	; (8000ea4 <USART2_IRQHandler+0x10>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	691b      	ldr	r3, [r3, #16]
 8000e9e:	4798      	blx	r3
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200000a8 	.word	0x200000a8

08000ea8 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	GL_UART_Config[2]->Ptr_IRQ_CallBack();
 8000eac:	4b02      	ldr	r3, [pc, #8]	; (8000eb8 <USART3_IRQHandler+0x10>)
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	691b      	ldr	r3, [r3, #16]
 8000eb2:	4798      	blx	r3
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	200000a8 	.word	0x200000a8

08000ebc <clk_Init>:
		for(j=0;j<x;j++);
}


void clk_Init(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
	//Enable clock for GPIO A
	RCC_GPIOA_CLK_EN() ;
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <clk_Init+0x30>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a09      	ldr	r2, [pc, #36]	; (8000eec <clk_Init+0x30>)
 8000ec6:	f043 0304 	orr.w	r3, r3, #4
 8000eca:	6193      	str	r3, [r2, #24]
	//Enable clock for GPIO B
	RCC_GPIOB_CLK_EN() ;
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <clk_Init+0x30>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	4a06      	ldr	r2, [pc, #24]	; (8000eec <clk_Init+0x30>)
 8000ed2:	f043 0308 	orr.w	r3, r3, #8
 8000ed6:	6193      	str	r3, [r2, #24]
	//Enable clock for AFIO
	RCC_AFIO_CLK_EN();
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <clk_Init+0x30>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a03      	ldr	r2, [pc, #12]	; (8000eec <clk_Init+0x30>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6193      	str	r3, [r2, #24]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	40021000 	.word	0x40021000

08000ef0 <main>:


int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
	clk_Init();
 8000ef6:	f7ff ffe1 	bl	8000ebc <clk_Init>
	//Test Case 1

	uint8_t ch1 [] = {0x1,0x2,0x3,0x4,0x5,0x6,0x7};
 8000efa:	4a1b      	ldr	r2, [pc, #108]	; (8000f68 <main+0x78>)
 8000efc:	f107 0308 	add.w	r3, r7, #8
 8000f00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f04:	6018      	str	r0, [r3, #0]
 8000f06:	3304      	adds	r3, #4
 8000f08:	8019      	strh	r1, [r3, #0]
 8000f0a:	3302      	adds	r3, #2
 8000f0c:	0c0a      	lsrs	r2, r1, #16
 8000f0e:	701a      	strb	r2, [r3, #0]
	uint8_t ch2 [7] = {0};
 8000f10:	463b      	mov	r3, r7
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	f8c3 2003 	str.w	r2, [r3, #3]

	HAL_EEPROM_Init();
 8000f1a:	f7ff f929 	bl	8000170 <HAL_EEPROM_Init>
	HAL_EEPROM_Write_NBytes(0xAF, ch1, 7);
 8000f1e:	f107 0308 	add.w	r3, r7, #8
 8000f22:	2207      	movs	r2, #7
 8000f24:	4619      	mov	r1, r3
 8000f26:	20af      	movs	r0, #175	; 0xaf
 8000f28:	f7ff f942 	bl	80001b0 <HAL_EEPROM_Write_NBytes>
	HAL_EEPROM_Read_NBytes(0xAF, ch2, 7);
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	2207      	movs	r2, #7
 8000f30:	4619      	mov	r1, r3
 8000f32:	20af      	movs	r0, #175	; 0xaf
 8000f34:	f7ff f98a 	bl	800024c <HAL_EEPROM_Read_NBytes>

	//Test Case 2

	ch1 [0] = 0xA;
 8000f38:	230a      	movs	r3, #10
 8000f3a:	723b      	strb	r3, [r7, #8]
	ch1 [1] = 0xB;
 8000f3c:	230b      	movs	r3, #11
 8000f3e:	727b      	strb	r3, [r7, #9]
	ch1 [2] = 0xC;
 8000f40:	230c      	movs	r3, #12
 8000f42:	72bb      	strb	r3, [r7, #10]
	ch1 [3] = 0xD;
 8000f44:	230d      	movs	r3, #13
 8000f46:	72fb      	strb	r3, [r7, #11]


	HAL_EEPROM_Write_NBytes(0xFFF, ch1, 4);
 8000f48:	f107 0308 	add.w	r3, r7, #8
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000f54:	f7ff f92c 	bl	80001b0 <HAL_EEPROM_Write_NBytes>
	HAL_EEPROM_Read_NBytes(0xFFF, ch2, 4);
 8000f58:	463b      	mov	r3, r7
 8000f5a:	2204      	movs	r2, #4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000f62:	f7ff f973 	bl	800024c <HAL_EEPROM_Read_NBytes>


	while(1)
 8000f66:	e7fe      	b.n	8000f66 <main+0x76>
 8000f68:	08001020 	.word	0x08001020

08000f6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f6c:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f6e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f70:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f74:	480c      	ldr	r0, [pc, #48]	; (8000fa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f76:	490d      	ldr	r1, [pc, #52]	; (8000fac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f78:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <LoopForever+0xe>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f7c:	e002      	b.n	8000f84 <LoopCopyDataInit>

08000f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f82:	3304      	adds	r3, #4

08000f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f88:	d3f9      	bcc.n	8000f7e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f8c:	4c0a      	ldr	r4, [pc, #40]	; (8000fb8 <LoopForever+0x16>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f90:	e001      	b.n	8000f96 <LoopFillZerobss>

08000f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f94:	3204      	adds	r2, #4

08000f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f98:	d3fb      	bcc.n	8000f92 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f9a:	f000 f811 	bl	8000fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f9e:	f7ff ffa7 	bl	8000ef0 <main>

08000fa2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fa2:	e7fe      	b.n	8000fa2 <LoopForever>
  ldr   r0, =_estack
 8000fa4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000fb0:	08001048 	.word	0x08001048
  ldr r2, =_sbss
 8000fb4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000fb8:	200000b4 	.word	0x200000b4

08000fbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fbc:	e7fe      	b.n	8000fbc <ADC1_2_IRQHandler>
	...

08000fc0 <__libc_init_array>:
 8000fc0:	b570      	push	{r4, r5, r6, lr}
 8000fc2:	2500      	movs	r5, #0
 8000fc4:	4e0c      	ldr	r6, [pc, #48]	; (8000ff8 <__libc_init_array+0x38>)
 8000fc6:	4c0d      	ldr	r4, [pc, #52]	; (8000ffc <__libc_init_array+0x3c>)
 8000fc8:	1ba4      	subs	r4, r4, r6
 8000fca:	10a4      	asrs	r4, r4, #2
 8000fcc:	42a5      	cmp	r5, r4
 8000fce:	d109      	bne.n	8000fe4 <__libc_init_array+0x24>
 8000fd0:	f000 f81a 	bl	8001008 <_init>
 8000fd4:	2500      	movs	r5, #0
 8000fd6:	4e0a      	ldr	r6, [pc, #40]	; (8001000 <__libc_init_array+0x40>)
 8000fd8:	4c0a      	ldr	r4, [pc, #40]	; (8001004 <__libc_init_array+0x44>)
 8000fda:	1ba4      	subs	r4, r4, r6
 8000fdc:	10a4      	asrs	r4, r4, #2
 8000fde:	42a5      	cmp	r5, r4
 8000fe0:	d105      	bne.n	8000fee <__libc_init_array+0x2e>
 8000fe2:	bd70      	pop	{r4, r5, r6, pc}
 8000fe4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fe8:	4798      	blx	r3
 8000fea:	3501      	adds	r5, #1
 8000fec:	e7ee      	b.n	8000fcc <__libc_init_array+0xc>
 8000fee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ff2:	4798      	blx	r3
 8000ff4:	3501      	adds	r5, #1
 8000ff6:	e7f2      	b.n	8000fde <__libc_init_array+0x1e>
 8000ff8:	08001040 	.word	0x08001040
 8000ffc:	08001040 	.word	0x08001040
 8001000:	08001040 	.word	0x08001040
 8001004:	08001044 	.word	0x08001044

08001008 <_init>:
 8001008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800100a:	bf00      	nop
 800100c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800100e:	bc08      	pop	{r3}
 8001010:	469e      	mov	lr, r3
 8001012:	4770      	bx	lr

08001014 <_fini>:
 8001014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001016:	bf00      	nop
 8001018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800101a:	bc08      	pop	{r3}
 800101c:	469e      	mov	lr, r3
 800101e:	4770      	bx	lr
